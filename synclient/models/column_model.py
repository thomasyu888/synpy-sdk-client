# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ColumnModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'column_type': 'ColumnType',
        'default_value': 'str',
        'enum_values': 'list[str]',
        'facet_type': 'FacetType',
        'id': 'str',
        'maximum_list_length': 'int',
        'maximum_size': 'float',
        'name': 'str'
    }

    attribute_map = {
        'column_type': 'columnType',
        'default_value': 'defaultValue',
        'enum_values': 'enumValues',
        'facet_type': 'facetType',
        'id': 'id',
        'maximum_list_length': 'maximumListLength',
        'maximum_size': 'maximumSize',
        'name': 'name'
    }

    def __init__(self, column_type=None, default_value=None, enum_values=None, facet_type=None, id=None, maximum_list_length=100, maximum_size=None, name=None, local_vars_configuration=None):  # noqa: E501
        """ColumnModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._column_type = None
        self._default_value = None
        self._enum_values = None
        self._facet_type = None
        self._id = None
        self._maximum_list_length = None
        self._maximum_size = None
        self._name = None
        self.discriminator = None

        if column_type is not None:
            self.column_type = column_type
        if default_value is not None:
            self.default_value = default_value
        if enum_values is not None:
            self.enum_values = enum_values
        if facet_type is not None:
            self.facet_type = facet_type
        if id is not None:
            self.id = id
        if maximum_list_length is not None:
            self.maximum_list_length = maximum_list_length
        if maximum_size is not None:
            self.maximum_size = maximum_size
        if name is not None:
            self.name = name

    @property
    def column_type(self):
        """Gets the column_type of this ColumnModel.  # noqa: E501


        :return: The column_type of this ColumnModel.  # noqa: E501
        :rtype: ColumnType
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this ColumnModel.


        :param column_type: The column_type of this ColumnModel.  # noqa: E501
        :type: ColumnType
        """

        self._column_type = column_type

    @property
    def default_value(self):
        """Gets the default_value of this ColumnModel.  # noqa: E501

        The default value for this column. Columns of type ENTITYID, FILEHANDLEID, USERID, and LARGETEXT are not allowed to have default values.   # noqa: E501

        :return: The default_value of this ColumnModel.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ColumnModel.

        The default value for this column. Columns of type ENTITYID, FILEHANDLEID, USERID, and LARGETEXT are not allowed to have default values.   # noqa: E501

        :param default_value: The default_value of this ColumnModel.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def enum_values(self):
        """Gets the enum_values of this ColumnModel.  # noqa: E501

        Columns of type STRING can be constrained to an enumeration values set on this list. The maximum number of entries for an enum is 100   # noqa: E501

        :return: The enum_values of this ColumnModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._enum_values

    @enum_values.setter
    def enum_values(self, enum_values):
        """Sets the enum_values of this ColumnModel.

        Columns of type STRING can be constrained to an enumeration values set on this list. The maximum number of entries for an enum is 100   # noqa: E501

        :param enum_values: The enum_values of this ColumnModel.  # noqa: E501
        :type: list[str]
        """

        self._enum_values = enum_values

    @property
    def facet_type(self):
        """Gets the facet_type of this ColumnModel.  # noqa: E501


        :return: The facet_type of this ColumnModel.  # noqa: E501
        :rtype: FacetType
        """
        return self._facet_type

    @facet_type.setter
    def facet_type(self, facet_type):
        """Sets the facet_type of this ColumnModel.


        :param facet_type: The facet_type of this ColumnModel.  # noqa: E501
        :type: FacetType
        """

        self._facet_type = facet_type

    @property
    def id(self):
        """Gets the id of this ColumnModel.  # noqa: E501

        The immutable ID issued to new columns  # noqa: E501

        :return: The id of this ColumnModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ColumnModel.

        The immutable ID issued to new columns  # noqa: E501

        :param id: The id of this ColumnModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def maximum_list_length(self):
        """Gets the maximum_list_length of this ColumnModel.  # noqa: E501

        Required if using a columnType with a \"_LIST\" suffix. Describes the maximum number of values that will appear in that list.   # noqa: E501

        :return: The maximum_list_length of this ColumnModel.  # noqa: E501
        :rtype: int
        """
        return self._maximum_list_length

    @maximum_list_length.setter
    def maximum_list_length(self, maximum_list_length):
        """Sets the maximum_list_length of this ColumnModel.

        Required if using a columnType with a \"_LIST\" suffix. Describes the maximum number of values that will appear in that list.   # noqa: E501

        :param maximum_list_length: The maximum_list_length of this ColumnModel.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                maximum_list_length is not None and maximum_list_length > 100):  # noqa: E501
            raise ValueError("Invalid value for `maximum_list_length`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                maximum_list_length is not None and maximum_list_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `maximum_list_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._maximum_list_length = maximum_list_length

    @property
    def maximum_size(self):
        """Gets the maximum_size of this ColumnModel.  # noqa: E501

        A parameter for columnTypes with a maximum size. For example, ColumnType. STRINGs have a default maximum size of 50 characters, but can be set to a maximumSize of 1 to 1000 characters. For columnType of STRING_LIST, this limits the size of individual string elements in the list   # noqa: E501

        :return: The maximum_size of this ColumnModel.  # noqa: E501
        :rtype: float
        """
        return self._maximum_size

    @maximum_size.setter
    def maximum_size(self, maximum_size):
        """Sets the maximum_size of this ColumnModel.

        A parameter for columnTypes with a maximum size. For example, ColumnType. STRINGs have a default maximum size of 50 characters, but can be set to a maximumSize of 1 to 1000 characters. For columnType of STRING_LIST, this limits the size of individual string elements in the list   # noqa: E501

        :param maximum_size: The maximum_size of this ColumnModel.  # noqa: E501
        :type: float
        """

        self._maximum_size = maximum_size

    @property
    def name(self):
        """Gets the name of this ColumnModel.  # noqa: E501

        The display name of the column  # noqa: E501

        :return: The name of this ColumnModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnModel.

        The display name of the column  # noqa: E501

        :param name: The name of this ColumnModel.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ColumnModel):
            return True

        return self.to_dict() != other.to_dict()
