# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class MessageToUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bcc': 'str',
        'cc': 'str',
        'created_by': 'str',
        'created_on': 'str',
        'file_handle_id': 'str',
        'id': 'str',
        'in_reply_to': 'str',
        'in_reply_to_root': 'str',
        'is_notification_message': 'bool',
        'notification_unsubscribe_endpoint': 'str',
        'recipients': 'list[str]',
        'subject': 'str',
        'to': 'str',
        'user_profile_setting_endpoint': 'str',
        'with_profile_setting_link': 'bool',
        'with_unsubscribe_link': 'bool'
    }

    attribute_map = {
        'bcc': 'bcc',
        'cc': 'cc',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'file_handle_id': 'fileHandleId',
        'id': 'id',
        'in_reply_to': 'inReplyTo',
        'in_reply_to_root': 'inReplyToRoot',
        'is_notification_message': 'isNotificationMessage',
        'notification_unsubscribe_endpoint': 'notificationUnsubscribeEndpoint',
        'recipients': 'recipients',
        'subject': 'subject',
        'to': 'to',
        'user_profile_setting_endpoint': 'userProfileSettingEndpoint',
        'with_profile_setting_link': 'withProfileSettingLink',
        'with_unsubscribe_link': 'withUnsubscribeLink'
    }

    def __init__(self, bcc=None, cc=None, created_by=None, created_on=None, file_handle_id=None, id=None, in_reply_to=None, in_reply_to_root=None, is_notification_message=None, notification_unsubscribe_endpoint=None, recipients=None, subject=None, to=None, user_profile_setting_endpoint=None, with_profile_setting_link=None, with_unsubscribe_link=None, local_vars_configuration=None):  # noqa: E501
        """MessageToUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bcc = None
        self._cc = None
        self._created_by = None
        self._created_on = None
        self._file_handle_id = None
        self._id = None
        self._in_reply_to = None
        self._in_reply_to_root = None
        self._is_notification_message = None
        self._notification_unsubscribe_endpoint = None
        self._recipients = None
        self._subject = None
        self._to = None
        self._user_profile_setting_endpoint = None
        self._with_profile_setting_link = None
        self._with_unsubscribe_link = None
        self.discriminator = None

        if bcc is not None:
            self.bcc = bcc
        if cc is not None:
            self.cc = cc
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if file_handle_id is not None:
            self.file_handle_id = file_handle_id
        if id is not None:
            self.id = id
        if in_reply_to is not None:
            self.in_reply_to = in_reply_to
        if in_reply_to_root is not None:
            self.in_reply_to_root = in_reply_to_root
        if is_notification_message is not None:
            self.is_notification_message = is_notification_message
        if notification_unsubscribe_endpoint is not None:
            self.notification_unsubscribe_endpoint = notification_unsubscribe_endpoint
        if recipients is not None:
            self.recipients = recipients
        if subject is not None:
            self.subject = subject
        if to is not None:
            self.to = to
        if user_profile_setting_endpoint is not None:
            self.user_profile_setting_endpoint = user_profile_setting_endpoint
        if with_profile_setting_link is not None:
            self.with_profile_setting_link = with_profile_setting_link
        if with_unsubscribe_link is not None:
            self.with_unsubscribe_link = with_unsubscribe_link

    @property
    def bcc(self):
        """Gets the bcc of this MessageToUser.  # noqa: E501

        The email addresses in the 'bcc' field of the email message   # noqa: E501

        :return: The bcc of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this MessageToUser.

        The email addresses in the 'bcc' field of the email message   # noqa: E501

        :param bcc: The bcc of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._bcc = bcc

    @property
    def cc(self):
        """Gets the cc of this MessageToUser.  # noqa: E501

        The email addresses in the 'cc' field of the email message   # noqa: E501

        :return: The cc of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this MessageToUser.

        The email addresses in the 'cc' field of the email message   # noqa: E501

        :param cc: The cc of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._cc = cc

    @property
    def created_by(self):
        """Gets the created_by of this MessageToUser.  # noqa: E501

        The unique identifier of the sender of this message  # noqa: E501

        :return: The created_by of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MessageToUser.

        The unique identifier of the sender of this message  # noqa: E501

        :param created_by: The created_by of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this MessageToUser.  # noqa: E501

        When this message was created  # noqa: E501

        :return: The created_on of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this MessageToUser.

        When this message was created  # noqa: E501

        :param created_on: The created_on of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def file_handle_id(self):
        """Gets the file_handle_id of this MessageToUser.  # noqa: E501

        The S3 file handle storing the body of this message. Note: The file's mime type should be 'text/plain' or 'text/html'. If no character encoding is specified, then UTF-8 is assumed.   # noqa: E501

        :return: The file_handle_id of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._file_handle_id

    @file_handle_id.setter
    def file_handle_id(self, file_handle_id):
        """Sets the file_handle_id of this MessageToUser.

        The S3 file handle storing the body of this message. Note: The file's mime type should be 'text/plain' or 'text/html'. If no character encoding is specified, then UTF-8 is assumed.   # noqa: E501

        :param file_handle_id: The file_handle_id of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._file_handle_id = file_handle_id

    @property
    def id(self):
        """Gets the id of this MessageToUser.  # noqa: E501

        The unique identifier of the message or comment  # noqa: E501

        :return: The id of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageToUser.

        The unique identifier of the message or comment  # noqa: E501

        :param id: The id of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_reply_to(self):
        """Gets the in_reply_to of this MessageToUser.  # noqa: E501

        The unique identifier of the message being replied to. Can be null  # noqa: E501

        :return: The in_reply_to of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._in_reply_to

    @in_reply_to.setter
    def in_reply_to(self, in_reply_to):
        """Sets the in_reply_to of this MessageToUser.

        The unique identifier of the message being replied to. Can be null  # noqa: E501

        :param in_reply_to: The in_reply_to of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._in_reply_to = in_reply_to

    @property
    def in_reply_to_root(self):
        """Gets the in_reply_to_root of this MessageToUser.  # noqa: E501

        The unique identifier of the root message being replied to  # noqa: E501

        :return: The in_reply_to_root of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._in_reply_to_root

    @in_reply_to_root.setter
    def in_reply_to_root(self, in_reply_to_root):
        """Sets the in_reply_to_root of this MessageToUser.

        The unique identifier of the root message being replied to  # noqa: E501

        :param in_reply_to_root: The in_reply_to_root of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._in_reply_to_root = in_reply_to_root

    @property
    def is_notification_message(self):
        """Gets the is_notification_message of this MessageToUser.  # noqa: E501

        A notification message is sent from a noreply email address, delivery failures are not sent back to the sender  # noqa: E501

        :return: The is_notification_message of this MessageToUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_notification_message

    @is_notification_message.setter
    def is_notification_message(self, is_notification_message):
        """Sets the is_notification_message of this MessageToUser.

        A notification message is sent from a noreply email address, delivery failures are not sent back to the sender  # noqa: E501

        :param is_notification_message: The is_notification_message of this MessageToUser.  # noqa: E501
        :type: bool
        """

        self._is_notification_message = is_notification_message

    @property
    def notification_unsubscribe_endpoint(self):
        """Gets the notification_unsubscribe_endpoint of this MessageToUser.  # noqa: E501

        the portal prefix for one-click email unsubscription. A signed, serialized token is appended to create the complete URL. If omitted, the default endpoint will be used.   # noqa: E501

        :return: The notification_unsubscribe_endpoint of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._notification_unsubscribe_endpoint

    @notification_unsubscribe_endpoint.setter
    def notification_unsubscribe_endpoint(self, notification_unsubscribe_endpoint):
        """Sets the notification_unsubscribe_endpoint of this MessageToUser.

        the portal prefix for one-click email unsubscription. A signed, serialized token is appended to create the complete URL. If omitted, the default endpoint will be used.   # noqa: E501

        :param notification_unsubscribe_endpoint: The notification_unsubscribe_endpoint of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._notification_unsubscribe_endpoint = notification_unsubscribe_endpoint

    @property
    def recipients(self):
        """Gets the recipients of this MessageToUser.  # noqa: E501

        The unique identifiers of the intended recipients of a message  # noqa: E501

        :return: The recipients of this MessageToUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this MessageToUser.

        The unique identifiers of the intended recipients of a message  # noqa: E501

        :param recipients: The recipients of this MessageToUser.  # noqa: E501
        :type: list[str]
        """

        self._recipients = recipients

    @property
    def subject(self):
        """Gets the subject of this MessageToUser.  # noqa: E501

        Topic of this message. Optional  # noqa: E501

        :return: The subject of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MessageToUser.

        Topic of this message. Optional  # noqa: E501

        :param subject: The subject of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this MessageToUser.  # noqa: E501

        The email addresses in the 'to' field of the email message   # noqa: E501

        :return: The to of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessageToUser.

        The email addresses in the 'to' field of the email message   # noqa: E501

        :param to: The to of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def user_profile_setting_endpoint(self):
        """Gets the user_profile_setting_endpoint of this MessageToUser.  # noqa: E501

        the portal link to user profile setting page. If omitted, the default endpoint will be used.  # noqa: E501

        :return: The user_profile_setting_endpoint of this MessageToUser.  # noqa: E501
        :rtype: str
        """
        return self._user_profile_setting_endpoint

    @user_profile_setting_endpoint.setter
    def user_profile_setting_endpoint(self, user_profile_setting_endpoint):
        """Sets the user_profile_setting_endpoint of this MessageToUser.

        the portal link to user profile setting page. If omitted, the default endpoint will be used.  # noqa: E501

        :param user_profile_setting_endpoint: The user_profile_setting_endpoint of this MessageToUser.  # noqa: E501
        :type: str
        """

        self._user_profile_setting_endpoint = user_profile_setting_endpoint

    @property
    def with_profile_setting_link(self):
        """Gets the with_profile_setting_link of this MessageToUser.  # noqa: E501

        should the user profile setting link be included in the email?  # noqa: E501

        :return: The with_profile_setting_link of this MessageToUser.  # noqa: E501
        :rtype: bool
        """
        return self._with_profile_setting_link

    @with_profile_setting_link.setter
    def with_profile_setting_link(self, with_profile_setting_link):
        """Sets the with_profile_setting_link of this MessageToUser.

        should the user profile setting link be included in the email?  # noqa: E501

        :param with_profile_setting_link: The with_profile_setting_link of this MessageToUser.  # noqa: E501
        :type: bool
        """

        self._with_profile_setting_link = with_profile_setting_link

    @property
    def with_unsubscribe_link(self):
        """Gets the with_unsubscribe_link of this MessageToUser.  # noqa: E501

        should the unsubscribe link be included in the email?  # noqa: E501

        :return: The with_unsubscribe_link of this MessageToUser.  # noqa: E501
        :rtype: bool
        """
        return self._with_unsubscribe_link

    @with_unsubscribe_link.setter
    def with_unsubscribe_link(self, with_unsubscribe_link):
        """Sets the with_unsubscribe_link of this MessageToUser.

        should the unsubscribe link be included in the email?  # noqa: E501

        :param with_unsubscribe_link: The with_unsubscribe_link of this MessageToUser.  # noqa: E501
        :type: bool
        """

        self._with_unsubscribe_link = with_unsubscribe_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageToUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MessageToUser):
            return True

        return self.to_dict() != other.to_dict()
