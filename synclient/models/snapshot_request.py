# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class SnapshotRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'snapshot_activity_id': 'str',
        'snapshot_comment': 'str',
        'snapshot_label': 'str'
    }

    attribute_map = {
        'snapshot_activity_id': 'snapshotActivityId',
        'snapshot_comment': 'snapshotComment',
        'snapshot_label': 'snapshotLabel'
    }

    def __init__(self, snapshot_activity_id=None, snapshot_comment=None, snapshot_label=None, local_vars_configuration=None):  # noqa: E501
        """SnapshotRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._snapshot_activity_id = None
        self._snapshot_comment = None
        self._snapshot_label = None
        self.discriminator = None

        if snapshot_activity_id is not None:
            self.snapshot_activity_id = snapshot_activity_id
        if snapshot_comment is not None:
            self.snapshot_comment = snapshot_comment
        if snapshot_label is not None:
            self.snapshot_label = snapshot_label

    @property
    def snapshot_activity_id(self):
        """Gets the snapshot_activity_id of this SnapshotRequest.  # noqa: E501

        Optional. If createNewSnapshot=true, the Activity ID to be applied to the snapshot version. Null by default   # noqa: E501

        :return: The snapshot_activity_id of this SnapshotRequest.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_activity_id

    @snapshot_activity_id.setter
    def snapshot_activity_id(self, snapshot_activity_id):
        """Sets the snapshot_activity_id of this SnapshotRequest.

        Optional. If createNewSnapshot=true, the Activity ID to be applied to the snapshot version. Null by default   # noqa: E501

        :param snapshot_activity_id: The snapshot_activity_id of this SnapshotRequest.  # noqa: E501
        :type: str
        """

        self._snapshot_activity_id = snapshot_activity_id

    @property
    def snapshot_comment(self):
        """Gets the snapshot_comment of this SnapshotRequest.  # noqa: E501

        Optional. If createNewSnapshot=true, the comment to be applied to the snapshot version. Null by default   # noqa: E501

        :return: The snapshot_comment of this SnapshotRequest.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_comment

    @snapshot_comment.setter
    def snapshot_comment(self, snapshot_comment):
        """Sets the snapshot_comment of this SnapshotRequest.

        Optional. If createNewSnapshot=true, the comment to be applied to the snapshot version. Null by default   # noqa: E501

        :param snapshot_comment: The snapshot_comment of this SnapshotRequest.  # noqa: E501
        :type: str
        """

        self._snapshot_comment = snapshot_comment

    @property
    def snapshot_label(self):
        """Gets the snapshot_label of this SnapshotRequest.  # noqa: E501

        Optional. If createNewSnapshot=true, the label to be applied to the snapshot version. Null by default   # noqa: E501

        :return: The snapshot_label of this SnapshotRequest.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_label

    @snapshot_label.setter
    def snapshot_label(self, snapshot_label):
        """Sets the snapshot_label of this SnapshotRequest.

        Optional. If createNewSnapshot=true, the label to be applied to the snapshot version. Null by default   # noqa: E501

        :param snapshot_label: The snapshot_label of this SnapshotRequest.  # noqa: E501
        :type: str
        """

        self._snapshot_label = snapshot_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotRequest):
            return True

        return self.to_dict() != other.to_dict()
