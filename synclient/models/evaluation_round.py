# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class EvaluationRound(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'etag': 'str',
        'evaluation_id': 'str',
        'id': 'str',
        'limits': 'list[EvaluationRoundLimit]',
        'round_end': 'str',
        'round_start': 'str'
    }

    attribute_map = {
        'etag': 'etag',
        'evaluation_id': 'evaluationId',
        'id': 'id',
        'limits': 'limits',
        'round_end': 'roundEnd',
        'round_start': 'roundStart'
    }

    def __init__(self, etag=None, evaluation_id=None, id=None, limits=None, round_end=None, round_start=None, local_vars_configuration=None):  # noqa: E501
        """EvaluationRound - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._etag = None
        self._evaluation_id = None
        self._id = None
        self._limits = None
        self._round_end = None
        self._round_start = None
        self.discriminator = None

        if etag is not None:
            self.etag = etag
        if evaluation_id is not None:
            self.evaluation_id = evaluation_id
        if id is not None:
            self.id = id
        if limits is not None:
            self.limits = limits
        if round_end is not None:
            self.round_end = round_end
        if round_start is not None:
            self.round_start = round_start

    @property
    def etag(self):
        """Gets the etag of this EvaluationRound.  # noqa: E501

        Synapse etag  # noqa: E501

        :return: The etag of this EvaluationRound.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EvaluationRound.

        Synapse etag  # noqa: E501

        :param etag: The etag of this EvaluationRound.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def evaluation_id(self):
        """Gets the evaluation_id of this EvaluationRound.  # noqa: E501

        The unique immutable ID for this Evaluation.  # noqa: E501

        :return: The evaluation_id of this EvaluationRound.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id):
        """Sets the evaluation_id of this EvaluationRound.

        The unique immutable ID for this Evaluation.  # noqa: E501

        :param evaluation_id: The evaluation_id of this EvaluationRound.  # noqa: E501
        :type: str
        """

        self._evaluation_id = evaluation_id

    @property
    def id(self):
        """Gets the id of this EvaluationRound.  # noqa: E501

        Evaluation round Id  # noqa: E501

        :return: The id of this EvaluationRound.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EvaluationRound.

        Evaluation round Id  # noqa: E501

        :param id: The id of this EvaluationRound.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def limits(self):
        """Gets the limits of this EvaluationRound.  # noqa: E501

        List of round limits  # noqa: E501

        :return: The limits of this EvaluationRound.  # noqa: E501
        :rtype: list[EvaluationRoundLimit]
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this EvaluationRound.

        List of round limits  # noqa: E501

        :param limits: The limits of this EvaluationRound.  # noqa: E501
        :type: list[EvaluationRoundLimit]
        """

        self._limits = limits

    @property
    def round_end(self):
        """Gets the round_end of this EvaluationRound.  # noqa: E501

        End of round  # noqa: E501

        :return: The round_end of this EvaluationRound.  # noqa: E501
        :rtype: str
        """
        return self._round_end

    @round_end.setter
    def round_end(self, round_end):
        """Sets the round_end of this EvaluationRound.

        End of round  # noqa: E501

        :param round_end: The round_end of this EvaluationRound.  # noqa: E501
        :type: str
        """

        self._round_end = round_end

    @property
    def round_start(self):
        """Gets the round_start of this EvaluationRound.  # noqa: E501

        Start of round  # noqa: E501

        :return: The round_start of this EvaluationRound.  # noqa: E501
        :rtype: str
        """
        return self._round_start

    @round_start.setter
    def round_start(self, round_start):
        """Sets the round_start of this EvaluationRound.

        Start of round  # noqa: E501

        :param round_start: The round_start of this EvaluationRound.  # noqa: E501
        :type: str
        """

        self._round_start = round_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EvaluationRound):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EvaluationRound):
            return True

        return self.to_dict() != other.to_dict()
