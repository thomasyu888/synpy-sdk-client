# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class Question(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'concrete_type': 'str',
        'doc_link': 'str',
        'help_text': 'str',
        'prompt': 'str',
        'question_index': 'int',
        'reference': 'WikiPageKey'
    }

    attribute_map = {
        'concrete_type': 'concreteType',
        'doc_link': 'docLink',
        'help_text': 'helpText',
        'prompt': 'prompt',
        'question_index': 'questionIndex',
        'reference': 'reference'
    }

    def __init__(self, concrete_type=None, doc_link=None, help_text=None, prompt=None, question_index=None, reference=None, local_vars_configuration=None):  # noqa: E501
        """Question - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._concrete_type = None
        self._doc_link = None
        self._help_text = None
        self._prompt = None
        self._question_index = None
        self._reference = None
        self.discriminator = None

        if concrete_type is not None:
            self.concrete_type = concrete_type
        if doc_link is not None:
            self.doc_link = doc_link
        if help_text is not None:
            self.help_text = help_text
        if prompt is not None:
            self.prompt = prompt
        if question_index is not None:
            self.question_index = question_index
        if reference is not None:
            self.reference = reference

    @property
    def concrete_type(self):
        """Gets the concrete_type of this Question.  # noqa: E501

        Concrete Type  # noqa: E501

        :return: The concrete_type of this Question.  # noqa: E501
        :rtype: str
        """
        return self._concrete_type

    @concrete_type.setter
    def concrete_type(self, concrete_type):
        """Sets the concrete_type of this Question.

        Concrete Type  # noqa: E501

        :param concrete_type: The concrete_type of this Question.  # noqa: E501
        :type: str
        """

        self._concrete_type = concrete_type

    @property
    def doc_link(self):
        """Gets the doc_link of this Question.  # noqa: E501

        Link to the document that contains information for background reading related to the question.  # noqa: E501

        :return: The doc_link of this Question.  # noqa: E501
        :rtype: str
        """
        return self._doc_link

    @doc_link.setter
    def doc_link(self, doc_link):
        """Sets the doc_link of this Question.

        Link to the document that contains information for background reading related to the question.  # noqa: E501

        :param doc_link: The doc_link of this Question.  # noqa: E501
        :type: str
        """

        self._doc_link = doc_link

    @property
    def help_text(self):
        """Gets the help_text of this Question.  # noqa: E501

        A short text that provides a snippet of help to answer the question.  # noqa: E501

        :return: The help_text of this Question.  # noqa: E501
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this Question.

        A short text that provides a snippet of help to answer the question.  # noqa: E501

        :param help_text: The help_text of this Question.  # noqa: E501
        :type: str
        """

        self._help_text = help_text

    @property
    def prompt(self):
        """Gets the prompt of this Question.  # noqa: E501

        the user-readable prompt for this question  # noqa: E501

        :return: The prompt of this Question.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this Question.

        the user-readable prompt for this question  # noqa: E501

        :param prompt: The prompt of this Question.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def question_index(self):
        """Gets the question_index of this Question.  # noqa: E501

        An index unique in the Quiz, used to refer to this question  # noqa: E501

        :return: The question_index of this Question.  # noqa: E501
        :rtype: int
        """
        return self._question_index

    @question_index.setter
    def question_index(self, question_index):
        """Sets the question_index of this Question.

        An index unique in the Quiz, used to refer to this question  # noqa: E501

        :param question_index: The question_index of this Question.  # noqa: E501
        :type: int
        """

        self._question_index = question_index

    @property
    def reference(self):
        """Gets the reference of this Question.  # noqa: E501


        :return: The reference of this Question.  # noqa: E501
        :rtype: WikiPageKey
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Question.


        :param reference: The reference of this Question.  # noqa: E501
        :type: WikiPageKey
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Question):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Question):
            return True

        return self.to_dict() != other.to_dict()
