# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class DownloadFromTableRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_filters': 'list[object]',
        'include_entity_etag': 'bool',
        'limit': 'int',
        'offset': 'int',
        'selected_facets': 'list[FacetColumnRequest]',
        'sort': 'list[SortItem]',
        'sql': 'str',
        'concrete_type': 'str',
        'csv_table_descriptor': 'CsvTableDescriptor',
        'entity_id': 'str',
        'include_row_id_and_row_version': 'bool',
        'write_header': 'bool'
    }

    attribute_map = {
        'additional_filters': 'additionalFilters',
        'include_entity_etag': 'includeEntityEtag',
        'limit': 'limit',
        'offset': 'offset',
        'selected_facets': 'selectedFacets',
        'sort': 'sort',
        'sql': 'sql',
        'concrete_type': 'concreteType',
        'csv_table_descriptor': 'csvTableDescriptor',
        'entity_id': 'entityId',
        'include_row_id_and_row_version': 'includeRowIdAndRowVersion',
        'write_header': 'writeHeader'
    }

    def __init__(self, additional_filters=None, include_entity_etag=None, limit=None, offset=None, selected_facets=None, sort=None, sql=None, concrete_type=None, csv_table_descriptor=None, entity_id=None, include_row_id_and_row_version=True, write_header=True, local_vars_configuration=None):  # noqa: E501
        """DownloadFromTableRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_filters = None
        self._include_entity_etag = None
        self._limit = None
        self._offset = None
        self._selected_facets = None
        self._sort = None
        self._sql = None
        self._concrete_type = None
        self._csv_table_descriptor = None
        self._entity_id = None
        self._include_row_id_and_row_version = None
        self._write_header = None
        self.discriminator = None

        if additional_filters is not None:
            self.additional_filters = additional_filters
        if include_entity_etag is not None:
            self.include_entity_etag = include_entity_etag
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if selected_facets is not None:
            self.selected_facets = selected_facets
        if sort is not None:
            self.sort = sort
        if sql is not None:
            self.sql = sql
        if concrete_type is not None:
            self.concrete_type = concrete_type
        if csv_table_descriptor is not None:
            self.csv_table_descriptor = csv_table_descriptor
        if entity_id is not None:
            self.entity_id = entity_id
        if include_row_id_and_row_version is not None:
            self.include_row_id_and_row_version = include_row_id_and_row_version
        if write_header is not None:
            self.write_header = write_header

    @property
    def additional_filters(self):
        """Gets the additional_filters of this DownloadFromTableRequest.  # noqa: E501

        Appends additional filters to the SQL query. These are applied before facets. Filters within the list have an AND relationship. If a WHERE clause already exists on the SQL query or facets are selected, it will also be ANDed with the query generated by these additional filters.   # noqa: E501

        :return: The additional_filters of this DownloadFromTableRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._additional_filters

    @additional_filters.setter
    def additional_filters(self, additional_filters):
        """Sets the additional_filters of this DownloadFromTableRequest.

        Appends additional filters to the SQL query. These are applied before facets. Filters within the list have an AND relationship. If a WHERE clause already exists on the SQL query or facets are selected, it will also be ANDed with the query generated by these additional filters.   # noqa: E501

        :param additional_filters: The additional_filters of this DownloadFromTableRequest.  # noqa: E501
        :type: list[object]
        """

        self._additional_filters = additional_filters

    @property
    def include_entity_etag(self):
        """Gets the include_entity_etag of this DownloadFromTableRequest.  # noqa: E501

        Optional, default false. When true, a query results against views will include the Etag of each entity in the results. Note: The etag is necessary to update Entities in the view.   # noqa: E501

        :return: The include_entity_etag of this DownloadFromTableRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_entity_etag

    @include_entity_etag.setter
    def include_entity_etag(self, include_entity_etag):
        """Sets the include_entity_etag of this DownloadFromTableRequest.

        Optional, default false. When true, a query results against views will include the Etag of each entity in the results. Note: The etag is necessary to update Entities in the view.   # noqa: E501

        :param include_entity_etag: The include_entity_etag of this DownloadFromTableRequest.  # noqa: E501
        :type: bool
        """

        self._include_entity_etag = include_entity_etag

    @property
    def limit(self):
        """Gets the limit of this DownloadFromTableRequest.  # noqa: E501

        The optional limit to the results  # noqa: E501

        :return: The limit of this DownloadFromTableRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DownloadFromTableRequest.

        The optional limit to the results  # noqa: E501

        :param limit: The limit of this DownloadFromTableRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this DownloadFromTableRequest.  # noqa: E501

        The optional offset into the results  # noqa: E501

        :return: The offset of this DownloadFromTableRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DownloadFromTableRequest.

        The optional offset into the results  # noqa: E501

        :param offset: The offset of this DownloadFromTableRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def selected_facets(self):
        """Gets the selected_facets of this DownloadFromTableRequest.  # noqa: E501

        The selected facet filters.  # noqa: E501

        :return: The selected_facets of this DownloadFromTableRequest.  # noqa: E501
        :rtype: list[FacetColumnRequest]
        """
        return self._selected_facets

    @selected_facets.setter
    def selected_facets(self, selected_facets):
        """Sets the selected_facets of this DownloadFromTableRequest.

        The selected facet filters.  # noqa: E501

        :param selected_facets: The selected_facets of this DownloadFromTableRequest.  # noqa: E501
        :type: list[FacetColumnRequest]
        """

        self._selected_facets = selected_facets

    @property
    def sort(self):
        """Gets the sort of this DownloadFromTableRequest.  # noqa: E501

        To sort values  # noqa: E501

        :return: The sort of this DownloadFromTableRequest.  # noqa: E501
        :rtype: list[SortItem]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DownloadFromTableRequest.

        To sort values  # noqa: E501

        :param sort: The sort of this DownloadFromTableRequest.  # noqa: E501
        :type: list[SortItem]
        """

        self._sort = sort

    @property
    def sql(self):
        """Gets the sql of this DownloadFromTableRequest.  # noqa: E501

        The SQL query string.  # noqa: E501

        :return: The sql of this DownloadFromTableRequest.  # noqa: E501
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this DownloadFromTableRequest.

        The SQL query string.  # noqa: E501

        :param sql: The sql of this DownloadFromTableRequest.  # noqa: E501
        :type: str
        """

        self._sql = sql

    @property
    def concrete_type(self):
        """Gets the concrete_type of this DownloadFromTableRequest.  # noqa: E501

        Concrete Type  # noqa: E501

        :return: The concrete_type of this DownloadFromTableRequest.  # noqa: E501
        :rtype: str
        """
        return self._concrete_type

    @concrete_type.setter
    def concrete_type(self, concrete_type):
        """Sets the concrete_type of this DownloadFromTableRequest.

        Concrete Type  # noqa: E501

        :param concrete_type: The concrete_type of this DownloadFromTableRequest.  # noqa: E501
        :type: str
        """

        self._concrete_type = concrete_type

    @property
    def csv_table_descriptor(self):
        """Gets the csv_table_descriptor of this DownloadFromTableRequest.  # noqa: E501


        :return: The csv_table_descriptor of this DownloadFromTableRequest.  # noqa: E501
        :rtype: CsvTableDescriptor
        """
        return self._csv_table_descriptor

    @csv_table_descriptor.setter
    def csv_table_descriptor(self, csv_table_descriptor):
        """Sets the csv_table_descriptor of this DownloadFromTableRequest.


        :param csv_table_descriptor: The csv_table_descriptor of this DownloadFromTableRequest.  # noqa: E501
        :type: CsvTableDescriptor
        """

        self._csv_table_descriptor = csv_table_descriptor

    @property
    def entity_id(self):
        """Gets the entity_id of this DownloadFromTableRequest.  # noqa: E501

        Entity Id  # noqa: E501

        :return: The entity_id of this DownloadFromTableRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this DownloadFromTableRequest.

        Entity Id  # noqa: E501

        :param entity_id: The entity_id of this DownloadFromTableRequest.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def include_row_id_and_row_version(self):
        """Gets the include_row_id_and_row_version of this DownloadFromTableRequest.  # noqa: E501

        Should the first two columns contain the row ID and row version? The default value is 'true'.   # noqa: E501

        :return: The include_row_id_and_row_version of this DownloadFromTableRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_row_id_and_row_version

    @include_row_id_and_row_version.setter
    def include_row_id_and_row_version(self, include_row_id_and_row_version):
        """Sets the include_row_id_and_row_version of this DownloadFromTableRequest.

        Should the first two columns contain the row ID and row version? The default value is 'true'.   # noqa: E501

        :param include_row_id_and_row_version: The include_row_id_and_row_version of this DownloadFromTableRequest.  # noqa: E501
        :type: bool
        """

        self._include_row_id_and_row_version = include_row_id_and_row_version

    @property
    def write_header(self):
        """Gets the write_header of this DownloadFromTableRequest.  # noqa: E501

        Should the first line contain the columns names as a header in the resulting file? Set to 'true' to include the headers else, 'false'. The default value is 'true'.   # noqa: E501

        :return: The write_header of this DownloadFromTableRequest.  # noqa: E501
        :rtype: bool
        """
        return self._write_header

    @write_header.setter
    def write_header(self, write_header):
        """Sets the write_header of this DownloadFromTableRequest.

        Should the first line contain the columns names as a header in the resulting file? Set to 'true' to include the headers else, 'false'. The default value is 'true'.   # noqa: E501

        :param write_header: The write_header of this DownloadFromTableRequest.  # noqa: E501
        :type: bool
        """

        self._write_header = write_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DownloadFromTableRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DownloadFromTableRequest):
            return True

        return self.to_dict() != other.to_dict()
