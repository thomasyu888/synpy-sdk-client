# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class EntityChildrenRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'include_sum_file_sizes': 'bool',
        'include_total_child_count': 'bool',
        'include_types': 'list[EntityType]',
        'next_page_token': 'str',
        'parent_id': 'str',
        'sort_by': 'SortBy',
        'sort_direction': 'SortDirection'
    }

    attribute_map = {
        'include_sum_file_sizes': 'includeSumFileSizes',
        'include_total_child_count': 'includeTotalChildCount',
        'include_types': 'includeTypes',
        'next_page_token': 'nextPageToken',
        'parent_id': 'parentId',
        'sort_by': 'sortBy',
        'sort_direction': 'sortDirection'
    }

    def __init__(self, include_sum_file_sizes=False, include_total_child_count=False, include_types=None, next_page_token=None, parent_id=None, sort_by=None, sort_direction=None, local_vars_configuration=None):  # noqa: E501
        """EntityChildrenRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._include_sum_file_sizes = None
        self._include_total_child_count = None
        self._include_types = None
        self._next_page_token = None
        self._parent_id = None
        self._sort_by = None
        self._sort_direction = None
        self.discriminator = None

        if include_sum_file_sizes is not None:
            self.include_sum_file_sizes = include_sum_file_sizes
        if include_total_child_count is not None:
            self.include_total_child_count = include_total_child_count
        if include_types is not None:
            self.include_types = include_types
        if next_page_token is not None:
            self.next_page_token = next_page_token
        if parent_id is not None:
            self.parent_id = parent_id
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_direction is not None:
            self.sort_direction = sort_direction

    @property
    def include_sum_file_sizes(self):
        """Gets the include_sum_file_sizes of this EntityChildrenRequest.  # noqa: E501

        When true, the sum of the files sizes (bytes) with the given parentId and types will be included. False by default  # noqa: E501

        :return: The include_sum_file_sizes of this EntityChildrenRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_sum_file_sizes

    @include_sum_file_sizes.setter
    def include_sum_file_sizes(self, include_sum_file_sizes):
        """Sets the include_sum_file_sizes of this EntityChildrenRequest.

        When true, the sum of the files sizes (bytes) with the given parentId and types will be included. False by default  # noqa: E501

        :param include_sum_file_sizes: The include_sum_file_sizes of this EntityChildrenRequest.  # noqa: E501
        :type: bool
        """

        self._include_sum_file_sizes = include_sum_file_sizes

    @property
    def include_total_child_count(self):
        """Gets the include_total_child_count of this EntityChildrenRequest.  # noqa: E501

        When true, the total number of children with the givenparentId and types will be included. False by default  # noqa: E501

        :return: The include_total_child_count of this EntityChildrenRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_total_child_count

    @include_total_child_count.setter
    def include_total_child_count(self, include_total_child_count):
        """Sets the include_total_child_count of this EntityChildrenRequest.

        When true, the total number of children with the givenparentId and types will be included. False by default  # noqa: E501

        :param include_total_child_count: The include_total_child_count of this EntityChildrenRequest.  # noqa: E501
        :type: bool
        """

        self._include_total_child_count = include_total_child_count

    @property
    def include_types(self):
        """Gets the include_types of this EntityChildrenRequest.  # noqa: E501

        The types of children to be include. Must include at least one type.  # noqa: E501

        :return: The include_types of this EntityChildrenRequest.  # noqa: E501
        :rtype: list[EntityType]
        """
        return self._include_types

    @include_types.setter
    def include_types(self, include_types):
        """Sets the include_types of this EntityChildrenRequest.

        The types of children to be include. Must include at least one type.  # noqa: E501

        :param include_types: The include_types of this EntityChildrenRequest.  # noqa: E501
        :type: list[EntityType]
        """

        self._include_types = include_types

    @property
    def next_page_token(self):
        """Gets the next_page_token of this EntityChildrenRequest.  # noqa: E501

        Optional parameter used to fetch the next page of results. When NULL, the first page will be returned. The nextPageToken is provided with the results if there is another page of results.  # noqa: E501

        :return: The next_page_token of this EntityChildrenRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this EntityChildrenRequest.

        Optional parameter used to fetch the next page of results. When NULL, the first page will be returned. The nextPageToken is provided with the results if there is another page of results.  # noqa: E501

        :param next_page_token: The next_page_token of this EntityChildrenRequest.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def parent_id(self):
        """Gets the parent_id of this EntityChildrenRequest.  # noqa: E501

        The ID of the parent. Set to null to list projects.  # noqa: E501

        :return: The parent_id of this EntityChildrenRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this EntityChildrenRequest.

        The ID of the parent. Set to null to list projects.  # noqa: E501

        :param parent_id: The parent_id of this EntityChildrenRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def sort_by(self):
        """Gets the sort_by of this EntityChildrenRequest.  # noqa: E501


        :return: The sort_by of this EntityChildrenRequest.  # noqa: E501
        :rtype: SortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this EntityChildrenRequest.


        :param sort_by: The sort_by of this EntityChildrenRequest.  # noqa: E501
        :type: SortBy
        """

        self._sort_by = sort_by

    @property
    def sort_direction(self):
        """Gets the sort_direction of this EntityChildrenRequest.  # noqa: E501


        :return: The sort_direction of this EntityChildrenRequest.  # noqa: E501
        :rtype: SortDirection
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this EntityChildrenRequest.


        :param sort_direction: The sort_direction of this EntityChildrenRequest.  # noqa: E501
        :type: SortDirection
        """

        self._sort_direction = sort_direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityChildrenRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityChildrenRequest):
            return True

        return self.to_dict() != other.to_dict()
