# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ObjectType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ENTITY = "ENTITY"
    ENTITY_CONTAINER = "ENTITY_CONTAINER"
    PRINCIPAL = "PRINCIPAL"
    ACTIVITY = "ACTIVITY"
    EVALUATION = "EVALUATION"
    EVALUATION_ROUND = "EVALUATION_ROUND"
    SUBMISSION = "SUBMISSION"
    EVALUATION_SUBMISSIONS = "EVALUATION_SUBMISSIONS"
    FILE = "FILE"
    MESSAGE = "MESSAGE"
    WIKI = "WIKI"
    FAVORITE = "FAVORITE"
    ACCESS_REQUIREMENT = "ACCESS_REQUIREMENT"
    ACCESS_APPROVAL = "ACCESS_APPROVAL"
    TEAM = "TEAM"
    TABLE = "TABLE"
    ACCESS_CONTROL_LIST = "ACCESS_CONTROL_LIST"
    PROJECT_SETTING = "PROJECT_SETTING"
    VERIFICATION_SUBMISSION = "VERIFICATION_SUBMISSION"
    CERTIFIED_USER_PASSING_RECORD = "CERTIFIED_USER_PASSING_RECORD"
    FORUM = "FORUM"
    THREAD = "THREAD"
    REPLY = "REPLY"
    FORM_GROUP = "FORM_GROUP"
    ORGANIZATION = "ORGANIZATION"
    FORM_DATA = "FORM_DATA"
    ENTITY_VIEW = "ENTITY_VIEW"
    USER_PROFILE = "USER_PROFILE"
    DATA_ACCESS_REQUEST = "DATA_ACCESS_REQUEST"
    DATA_ACCESS_SUBMISSION = "DATA_ACCESS_SUBMISSION"
    DATA_ACCESS_SUBMISSION_STATUS = "DATA_ACCESS_SUBMISSION_STATUS"
    MEMBERSHIP_INVITATION = "MEMBERSHIP_INVITATION"

    allowable_values = [ENTITY, ENTITY_CONTAINER, PRINCIPAL, ACTIVITY, EVALUATION, EVALUATION_ROUND, SUBMISSION, EVALUATION_SUBMISSIONS, FILE, MESSAGE, WIKI, FAVORITE, ACCESS_REQUIREMENT, ACCESS_APPROVAL, TEAM, TABLE, ACCESS_CONTROL_LIST, PROJECT_SETTING, VERIFICATION_SUBMISSION, CERTIFIED_USER_PASSING_RECORD, FORUM, THREAD, REPLY, FORM_GROUP, ORGANIZATION, FORM_DATA, ENTITY_VIEW, USER_PROFILE, DATA_ACCESS_REQUEST, DATA_ACCESS_SUBMISSION, DATA_ACCESS_SUBMISSION_STATUS, MEMBERSHIP_INVITATION]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """ObjectType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ObjectType):
            return True

        return self.to_dict() != other.to_dict()
