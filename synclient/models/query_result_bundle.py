# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class QueryResultBundle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'column_models': 'list[ColumnModel]',
        'concrete_type': 'str',
        'facets': 'list[FacetColumnResult]',
        'last_updated_on': 'str',
        'max_rows_per_page': 'int',
        'query_count': 'int',
        'query_result': 'QueryResult',
        'select_columns': 'list[SelectColumn]',
        'sum_file_sizes': 'SumFileSizes'
    }

    attribute_map = {
        'column_models': 'columnModels',
        'concrete_type': 'concreteType',
        'facets': 'facets',
        'last_updated_on': 'lastUpdatedOn',
        'max_rows_per_page': 'maxRowsPerPage',
        'query_count': 'queryCount',
        'query_result': 'queryResult',
        'select_columns': 'selectColumns',
        'sum_file_sizes': 'sumFileSizes'
    }

    def __init__(self, column_models=None, concrete_type=None, facets=None, last_updated_on=None, max_rows_per_page=None, query_count=None, query_result=None, select_columns=None, sum_file_sizes=None, local_vars_configuration=None):  # noqa: E501
        """QueryResultBundle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._column_models = None
        self._concrete_type = None
        self._facets = None
        self._last_updated_on = None
        self._max_rows_per_page = None
        self._query_count = None
        self._query_result = None
        self._select_columns = None
        self._sum_file_sizes = None
        self.discriminator = None

        if column_models is not None:
            self.column_models = column_models
        if concrete_type is not None:
            self.concrete_type = concrete_type
        if facets is not None:
            self.facets = facets
        if last_updated_on is not None:
            self.last_updated_on = last_updated_on
        if max_rows_per_page is not None:
            self.max_rows_per_page = max_rows_per_page
        if query_count is not None:
            self.query_count = query_count
        if query_result is not None:
            self.query_result = query_result
        if select_columns is not None:
            self.select_columns = select_columns
        if sum_file_sizes is not None:
            self.sum_file_sizes = sum_file_sizes

    @property
    def column_models(self):
        """Gets the column_models of this QueryResultBundle.  # noqa: E501

        The list of ColumnModels for the table. Use mask = 0x10 to include in the bundle.  # noqa: E501

        :return: The column_models of this QueryResultBundle.  # noqa: E501
        :rtype: list[ColumnModel]
        """
        return self._column_models

    @column_models.setter
    def column_models(self, column_models):
        """Sets the column_models of this QueryResultBundle.

        The list of ColumnModels for the table. Use mask = 0x10 to include in the bundle.  # noqa: E501

        :param column_models: The column_models of this QueryResultBundle.  # noqa: E501
        :type: list[ColumnModel]
        """

        self._column_models = column_models

    @property
    def concrete_type(self):
        """Gets the concrete_type of this QueryResultBundle.  # noqa: E501

        Concrete Type  # noqa: E501

        :return: The concrete_type of this QueryResultBundle.  # noqa: E501
        :rtype: str
        """
        return self._concrete_type

    @concrete_type.setter
    def concrete_type(self, concrete_type):
        """Sets the concrete_type of this QueryResultBundle.

        Concrete Type  # noqa: E501

        :param concrete_type: The concrete_type of this QueryResultBundle.  # noqa: E501
        :type: str
        """

        self._concrete_type = concrete_type

    @property
    def facets(self):
        """Gets the facets of this QueryResultBundle.  # noqa: E501

        The list of facets for the search results  # noqa: E501

        :return: The facets of this QueryResultBundle.  # noqa: E501
        :rtype: list[FacetColumnResult]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this QueryResultBundle.

        The list of facets for the search results  # noqa: E501

        :param facets: The facets of this QueryResultBundle.  # noqa: E501
        :type: list[FacetColumnResult]
        """

        self._facets = facets

    @property
    def last_updated_on(self):
        """Gets the last_updated_on of this QueryResultBundle.  # noqa: E501

        The date-time when this table/view was last updated. Note: Since views are eventually consistent a view might still be out-of-date even if it was recently updated. Use mask = 0x80 to include in the bundle.   # noqa: E501

        :return: The last_updated_on of this QueryResultBundle.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """Sets the last_updated_on of this QueryResultBundle.

        The date-time when this table/view was last updated. Note: Since views are eventually consistent a view might still be out-of-date even if it was recently updated. Use mask = 0x80 to include in the bundle.   # noqa: E501

        :param last_updated_on: The last_updated_on of this QueryResultBundle.  # noqa: E501
        :type: str
        """

        self._last_updated_on = last_updated_on

    @property
    def max_rows_per_page(self):
        """Gets the max_rows_per_page of this QueryResultBundle.  # noqa: E501

        The maximum number of rows that can be retrieved in a single call. This is a function of the columns that are selected in the query. Use mask = 0x8 to include in the bundle.  # noqa: E501

        :return: The max_rows_per_page of this QueryResultBundle.  # noqa: E501
        :rtype: int
        """
        return self._max_rows_per_page

    @max_rows_per_page.setter
    def max_rows_per_page(self, max_rows_per_page):
        """Sets the max_rows_per_page of this QueryResultBundle.

        The maximum number of rows that can be retrieved in a single call. This is a function of the columns that are selected in the query. Use mask = 0x8 to include in the bundle.  # noqa: E501

        :param max_rows_per_page: The max_rows_per_page of this QueryResultBundle.  # noqa: E501
        :type: int
        """

        self._max_rows_per_page = max_rows_per_page

    @property
    def query_count(self):
        """Gets the query_count of this QueryResultBundle.  # noqa: E501

        The total number of rows that match the query. Use mask = 0x2 to include in the bundle.  # noqa: E501

        :return: The query_count of this QueryResultBundle.  # noqa: E501
        :rtype: int
        """
        return self._query_count

    @query_count.setter
    def query_count(self, query_count):
        """Sets the query_count of this QueryResultBundle.

        The total number of rows that match the query. Use mask = 0x2 to include in the bundle.  # noqa: E501

        :param query_count: The query_count of this QueryResultBundle.  # noqa: E501
        :type: int
        """

        self._query_count = query_count

    @property
    def query_result(self):
        """Gets the query_result of this QueryResultBundle.  # noqa: E501


        :return: The query_result of this QueryResultBundle.  # noqa: E501
        :rtype: QueryResult
        """
        return self._query_result

    @query_result.setter
    def query_result(self, query_result):
        """Sets the query_result of this QueryResultBundle.


        :param query_result: The query_result of this QueryResultBundle.  # noqa: E501
        :type: QueryResult
        """

        self._query_result = query_result

    @property
    def select_columns(self):
        """Gets the select_columns of this QueryResultBundle.  # noqa: E501

        The list of SelectColumns from the select clause. Use mask = 0x4 to include in the bundle.  # noqa: E501

        :return: The select_columns of this QueryResultBundle.  # noqa: E501
        :rtype: list[SelectColumn]
        """
        return self._select_columns

    @select_columns.setter
    def select_columns(self, select_columns):
        """Sets the select_columns of this QueryResultBundle.

        The list of SelectColumns from the select clause. Use mask = 0x4 to include in the bundle.  # noqa: E501

        :param select_columns: The select_columns of this QueryResultBundle.  # noqa: E501
        :type: list[SelectColumn]
        """

        self._select_columns = select_columns

    @property
    def sum_file_sizes(self):
        """Gets the sum_file_sizes of this QueryResultBundle.  # noqa: E501


        :return: The sum_file_sizes of this QueryResultBundle.  # noqa: E501
        :rtype: SumFileSizes
        """
        return self._sum_file_sizes

    @sum_file_sizes.setter
    def sum_file_sizes(self, sum_file_sizes):
        """Sets the sum_file_sizes of this QueryResultBundle.


        :param sum_file_sizes: The sum_file_sizes of this QueryResultBundle.  # noqa: E501
        :type: SumFileSizes
        """

        self._sum_file_sizes = sum_file_sizes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResultBundle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryResultBundle):
            return True

        return self.to_dict() != other.to_dict()
