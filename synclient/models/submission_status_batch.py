# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class SubmissionStatusBatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_token': 'str',
        'is_first_batch': 'bool',
        'is_last_batch': 'bool',
        'statuses': 'list[SubmissionStatusModel]'
    }

    attribute_map = {
        'batch_token': 'batchToken',
        'is_first_batch': 'isFirstBatch',
        'is_last_batch': 'isLastBatch',
        'statuses': 'statuses'
    }

    def __init__(self, batch_token=None, is_first_batch=None, is_last_batch=None, statuses=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionStatusBatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batch_token = None
        self._is_first_batch = None
        self._is_last_batch = None
        self._statuses = None
        self.discriminator = None

        if batch_token is not None:
            self.batch_token = batch_token
        if is_first_batch is not None:
            self.is_first_batch = is_first_batch
        if is_last_batch is not None:
            self.is_last_batch = is_last_batch
        if statuses is not None:
            self.statuses = statuses

    @property
    def batch_token(self):
        """Gets the batch_token of this SubmissionStatusBatch.  # noqa: E501

        A token required to accept a batch submission for all but the first batch.  # noqa: E501

        :return: The batch_token of this SubmissionStatusBatch.  # noqa: E501
        :rtype: str
        """
        return self._batch_token

    @batch_token.setter
    def batch_token(self, batch_token):
        """Sets the batch_token of this SubmissionStatusBatch.

        A token required to accept a batch submission for all but the first batch.  # noqa: E501

        :param batch_token: The batch_token of this SubmissionStatusBatch.  # noqa: E501
        :type: str
        """

        self._batch_token = batch_token

    @property
    def is_first_batch(self):
        """Gets the is_first_batch of this SubmissionStatusBatch.  # noqa: E501

        true if and only if this is the first batch to upload  # noqa: E501

        :return: The is_first_batch of this SubmissionStatusBatch.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_batch

    @is_first_batch.setter
    def is_first_batch(self, is_first_batch):
        """Sets the is_first_batch of this SubmissionStatusBatch.

        true if and only if this is the first batch to upload  # noqa: E501

        :param is_first_batch: The is_first_batch of this SubmissionStatusBatch.  # noqa: E501
        :type: bool
        """

        self._is_first_batch = is_first_batch

    @property
    def is_last_batch(self):
        """Gets the is_last_batch of this SubmissionStatusBatch.  # noqa: E501

        true if and only if this is the last batch to upload  # noqa: E501

        :return: The is_last_batch of this SubmissionStatusBatch.  # noqa: E501
        :rtype: bool
        """
        return self._is_last_batch

    @is_last_batch.setter
    def is_last_batch(self, is_last_batch):
        """Sets the is_last_batch of this SubmissionStatusBatch.

        true if and only if this is the last batch to upload  # noqa: E501

        :param is_last_batch: The is_last_batch of this SubmissionStatusBatch.  # noqa: E501
        :type: bool
        """

        self._is_last_batch = is_last_batch

    @property
    def statuses(self):
        """Gets the statuses of this SubmissionStatusBatch.  # noqa: E501

        A collection of Submission Statuses  # noqa: E501

        :return: The statuses of this SubmissionStatusBatch.  # noqa: E501
        :rtype: list[SubmissionStatusModel]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this SubmissionStatusBatch.

        A collection of Submission Statuses  # noqa: E501

        :param statuses: The statuses of this SubmissionStatusBatch.  # noqa: E501
        :type: list[SubmissionStatusModel]
        """

        self._statuses = statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionStatusBatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionStatusBatch):
            return True

        return self.to_dict() != other.to_dict()
