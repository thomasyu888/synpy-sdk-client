# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class UserProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'r_studio_url': 'str',
        'company': 'str',
        'created_on': 'str',
        'display_name': 'str',
        'email': 'str',
        'emails': 'list[str]',
        'etag': 'str',
        'first_name': 'str',
        'industry': 'str',
        'last_name': 'str',
        'location': 'str',
        'notification_settings': 'Settings',
        'open_ids': 'list[str]',
        'owner_id': 'str',
        'position': 'str',
        'preferences': 'list[UserPreference]',
        'profile_picure_file_handle_id': 'str',
        'summary': 'str',
        'team_name': 'str',
        'url': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'r_studio_url': 'RStudioUrl',
        'company': 'company',
        'created_on': 'createdOn',
        'display_name': 'displayName',
        'email': 'email',
        'emails': 'emails',
        'etag': 'etag',
        'first_name': 'firstName',
        'industry': 'industry',
        'last_name': 'lastName',
        'location': 'location',
        'notification_settings': 'notificationSettings',
        'open_ids': 'openIds',
        'owner_id': 'ownerId',
        'position': 'position',
        'preferences': 'preferences',
        'profile_picure_file_handle_id': 'profilePicureFileHandleId',
        'summary': 'summary',
        'team_name': 'teamName',
        'url': 'url',
        'user_name': 'userName'
    }

    def __init__(self, r_studio_url=None, company=None, created_on=None, display_name=None, email=None, emails=None, etag=None, first_name=None, industry=None, last_name=None, location=None, notification_settings=None, open_ids=None, owner_id=None, position=None, preferences=None, profile_picure_file_handle_id=None, summary=None, team_name=None, url=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """UserProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._r_studio_url = None
        self._company = None
        self._created_on = None
        self._display_name = None
        self._email = None
        self._emails = None
        self._etag = None
        self._first_name = None
        self._industry = None
        self._last_name = None
        self._location = None
        self._notification_settings = None
        self._open_ids = None
        self._owner_id = None
        self._position = None
        self._preferences = None
        self._profile_picure_file_handle_id = None
        self._summary = None
        self._team_name = None
        self._url = None
        self._user_name = None
        self.discriminator = None

        if r_studio_url is not None:
            self.r_studio_url = r_studio_url
        if company is not None:
            self.company = company
        if created_on is not None:
            self.created_on = created_on
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if emails is not None:
            self.emails = emails
        if etag is not None:
            self.etag = etag
        if first_name is not None:
            self.first_name = first_name
        if industry is not None:
            self.industry = industry
        if last_name is not None:
            self.last_name = last_name
        if location is not None:
            self.location = location
        if notification_settings is not None:
            self.notification_settings = notification_settings
        if open_ids is not None:
            self.open_ids = open_ids
        if owner_id is not None:
            self.owner_id = owner_id
        if position is not None:
            self.position = position
        if preferences is not None:
            self.preferences = preferences
        if profile_picure_file_handle_id is not None:
            self.profile_picure_file_handle_id = profile_picure_file_handle_id
        if summary is not None:
            self.summary = summary
        if team_name is not None:
            self.team_name = team_name
        if url is not None:
            self.url = url
        if user_name is not None:
            self.user_name = user_name

    @property
    def r_studio_url(self):
        """Gets the r_studio_url of this UserProfile.  # noqa: E501

        URL for RStudio server assigned to the user  # noqa: E501

        :return: The r_studio_url of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._r_studio_url

    @r_studio_url.setter
    def r_studio_url(self, r_studio_url):
        """Sets the r_studio_url of this UserProfile.

        URL for RStudio server assigned to the user  # noqa: E501

        :param r_studio_url: The r_studio_url of this UserProfile.  # noqa: E501
        :type: str
        """

        self._r_studio_url = r_studio_url

    @property
    def company(self):
        """Gets the company of this UserProfile.  # noqa: E501

        This person's current affiliation   # noqa: E501

        :return: The company of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserProfile.

        This person's current affiliation   # noqa: E501

        :param company: The company of this UserProfile.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def created_on(self):
        """Gets the created_on of this UserProfile.  # noqa: E501

        The date this profile was created.  # noqa: E501

        :return: The created_on of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this UserProfile.

        The date this profile was created.  # noqa: E501

        :param created_on: The created_on of this UserProfile.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def display_name(self):
        """Gets the display_name of this UserProfile.  # noqa: E501

        Will always be null.  # noqa: E501

        :return: The display_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserProfile.

        Will always be null.  # noqa: E501

        :param display_name: The display_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserProfile.  # noqa: E501

        Users can have more than one email. See emails  # noqa: E501

        :return: The email of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProfile.

        Users can have more than one email. See emails  # noqa: E501

        :param email: The email of this UserProfile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def emails(self):
        """Gets the emails of this UserProfile.  # noqa: E501

        The list of user email addresses registered to this user.  # noqa: E501

        :return: The emails of this UserProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this UserProfile.

        The list of user email addresses registered to this user.  # noqa: E501

        :param emails: The emails of this UserProfile.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def etag(self):
        """Gets the etag of this UserProfile.  # noqa: E501

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.   # noqa: E501

        :return: The etag of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this UserProfile.

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.   # noqa: E501

        :param etag: The etag of this UserProfile.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def first_name(self):
        """Gets the first_name of this UserProfile.  # noqa: E501

        This person's given name (forename)   # noqa: E501

        :return: The first_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserProfile.

        This person's given name (forename)   # noqa: E501

        :param first_name: The first_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def industry(self):
        """Gets the industry of this UserProfile.  # noqa: E501

        The industry/discipline that this person is associated with  # noqa: E501

        :return: The industry of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this UserProfile.

        The industry/discipline that this person is associated with  # noqa: E501

        :param industry: The industry of this UserProfile.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def last_name(self):
        """Gets the last_name of this UserProfile.  # noqa: E501

        This person's family name (surname)   # noqa: E501

        :return: The last_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserProfile.

        This person's family name (surname)   # noqa: E501

        :param last_name: The last_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def location(self):
        """Gets the location of this UserProfile.  # noqa: E501

        This person's location   # noqa: E501

        :return: The location of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserProfile.

        This person's location   # noqa: E501

        :param location: The location of this UserProfile.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def notification_settings(self):
        """Gets the notification_settings of this UserProfile.  # noqa: E501


        :return: The notification_settings of this UserProfile.  # noqa: E501
        :rtype: Settings
        """
        return self._notification_settings

    @notification_settings.setter
    def notification_settings(self, notification_settings):
        """Sets the notification_settings of this UserProfile.


        :param notification_settings: The notification_settings of this UserProfile.  # noqa: E501
        :type: Settings
        """

        self._notification_settings = notification_settings

    @property
    def open_ids(self):
        """Gets the open_ids of this UserProfile.  # noqa: E501

        'The list of OpenIds bound to this user's account.'   # noqa: E501

        :return: The open_ids of this UserProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._open_ids

    @open_ids.setter
    def open_ids(self, open_ids):
        """Sets the open_ids of this UserProfile.

        'The list of OpenIds bound to this user's account.'   # noqa: E501

        :param open_ids: The open_ids of this UserProfile.  # noqa: E501
        :type: list[str]
        """

        self._open_ids = open_ids

    @property
    def owner_id(self):
        """Gets the owner_id of this UserProfile.  # noqa: E501

        'A foreign key to the ID of the 'principal' object for the user.'   # noqa: E501

        :return: The owner_id of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this UserProfile.

        'A foreign key to the ID of the 'principal' object for the user.'   # noqa: E501

        :param owner_id: The owner_id of this UserProfile.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def position(self):
        """Gets the position of this UserProfile.  # noqa: E501

        This person's current position title   # noqa: E501

        :return: The position of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this UserProfile.

        This person's current position title   # noqa: E501

        :param position: The position of this UserProfile.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def preferences(self):
        """Gets the preferences of this UserProfile.  # noqa: E501

        User preferences  # noqa: E501

        :return: The preferences of this UserProfile.  # noqa: E501
        :rtype: list[UserPreference]
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this UserProfile.

        User preferences  # noqa: E501

        :param preferences: The preferences of this UserProfile.  # noqa: E501
        :type: list[UserPreference]
        """

        self._preferences = preferences

    @property
    def profile_picure_file_handle_id(self):
        """Gets the profile_picure_file_handle_id of this UserProfile.  # noqa: E501

        The FileHandle.id of the user's profile picture.   # noqa: E501

        :return: The profile_picure_file_handle_id of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_picure_file_handle_id

    @profile_picure_file_handle_id.setter
    def profile_picure_file_handle_id(self, profile_picure_file_handle_id):
        """Sets the profile_picure_file_handle_id of this UserProfile.

        The FileHandle.id of the user's profile picture.   # noqa: E501

        :param profile_picure_file_handle_id: The profile_picure_file_handle_id of this UserProfile.  # noqa: E501
        :type: str
        """

        self._profile_picure_file_handle_id = profile_picure_file_handle_id

    @property
    def summary(self):
        """Gets the summary of this UserProfile.  # noqa: E501

        A summary description about this person  # noqa: E501

        :return: The summary of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this UserProfile.

        A summary description about this person  # noqa: E501

        :param summary: The summary of this UserProfile.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def team_name(self):
        """Gets the team_name of this UserProfile.  # noqa: E501

        This person's default team name   # noqa: E501

        :return: The team_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this UserProfile.

        This person's default team name   # noqa: E501

        :param team_name: The team_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def url(self):
        """Gets the url of this UserProfile.  # noqa: E501

        A link to more information about this person  # noqa: E501

        :return: The url of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UserProfile.

        A link to more information about this person  # noqa: E501

        :param url: The url of this UserProfile.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_name(self):
        """Gets the user_name of this UserProfile.  # noqa: E501

        A name chosen by the user that uniquely identifies them.  # noqa: E501

        :return: The user_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserProfile.

        A name chosen by the user that uniquely identifies them.  # noqa: E501

        :param user_name: The user_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserProfile):
            return True

        return self.to_dict() != other.to_dict()
