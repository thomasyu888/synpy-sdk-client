# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class JsonSchemaObjectBinding(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'created_on': 'str',
        'json_schema_version_info': 'JsonSchemaVersionInfo',
        'object_id': 'int',
        'object_type': 'BoundObjectType'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'json_schema_version_info': 'jsonSchemaVersionInfo',
        'object_id': 'objectId',
        'object_type': 'objectType'
    }

    def __init__(self, created_by=None, created_on=None, json_schema_version_info=None, object_id=None, object_type=None, local_vars_configuration=None):  # noqa: E501
        """JsonSchemaObjectBinding - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_on = None
        self._json_schema_version_info = None
        self._object_id = None
        self._object_type = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if json_schema_version_info is not None:
            self.json_schema_version_info = json_schema_version_info
        if object_id is not None:
            self.object_id = object_id
        if object_type is not None:
            self.object_type = object_type

    @property
    def created_by(self):
        """Gets the created_by of this JsonSchemaObjectBinding.  # noqa: E501

        The ID of the user that bound this object to the schema.  # noqa: E501

        :return: The created_by of this JsonSchemaObjectBinding.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this JsonSchemaObjectBinding.

        The ID of the user that bound this object to the schema.  # noqa: E501

        :param created_by: The created_by of this JsonSchemaObjectBinding.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this JsonSchemaObjectBinding.  # noqa: E501

        The date this binding was created.  # noqa: E501

        :return: The created_on of this JsonSchemaObjectBinding.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this JsonSchemaObjectBinding.

        The date this binding was created.  # noqa: E501

        :param created_on: The created_on of this JsonSchemaObjectBinding.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def json_schema_version_info(self):
        """Gets the json_schema_version_info of this JsonSchemaObjectBinding.  # noqa: E501


        :return: The json_schema_version_info of this JsonSchemaObjectBinding.  # noqa: E501
        :rtype: JsonSchemaVersionInfo
        """
        return self._json_schema_version_info

    @json_schema_version_info.setter
    def json_schema_version_info(self, json_schema_version_info):
        """Sets the json_schema_version_info of this JsonSchemaObjectBinding.


        :param json_schema_version_info: The json_schema_version_info of this JsonSchemaObjectBinding.  # noqa: E501
        :type: JsonSchemaVersionInfo
        """

        self._json_schema_version_info = json_schema_version_info

    @property
    def object_id(self):
        """Gets the object_id of this JsonSchemaObjectBinding.  # noqa: E501

        The numeric identifier of the object bound to a JSON schema  # noqa: E501

        :return: The object_id of this JsonSchemaObjectBinding.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this JsonSchemaObjectBinding.

        The numeric identifier of the object bound to a JSON schema  # noqa: E501

        :param object_id: The object_id of this JsonSchemaObjectBinding.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this JsonSchemaObjectBinding.  # noqa: E501


        :return: The object_type of this JsonSchemaObjectBinding.  # noqa: E501
        :rtype: BoundObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this JsonSchemaObjectBinding.


        :param object_type: The object_type of this JsonSchemaObjectBinding.  # noqa: E501
        :type: BoundObjectType
        """

        self._object_type = object_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonSchemaObjectBinding):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JsonSchemaObjectBinding):
            return True

        return self.to_dict() != other.to_dict()
