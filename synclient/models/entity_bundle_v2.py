# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class EntityBundleV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_control_list': 'AccessControlList',
        'annotations': 'AnnotationsV2',
        'benefactor_acl': 'AccessControlList',
        'doi_association': 'DoiAssociation',
        'entity': 'Entity',
        'entity_type': 'EntityType',
        'file_handles': 'list[FileHandle]',
        'file_name': 'str',
        'has_children': 'bool',
        'path': 'EntityPath',
        'permissions': 'UserEntityPermissions',
        'restriction_information': 'RestrictionInformationResponse',
        'root_wiki_id': 'str',
        'table_bundle': 'TableBundle',
        'thread_count': 'float'
    }

    attribute_map = {
        'access_control_list': 'accessControlList',
        'annotations': 'annotations',
        'benefactor_acl': 'benefactorAcl',
        'doi_association': 'doiAssociation',
        'entity': 'entity',
        'entity_type': 'entityType',
        'file_handles': 'fileHandles',
        'file_name': 'fileName',
        'has_children': 'hasChildren',
        'path': 'path',
        'permissions': 'permissions',
        'restriction_information': 'restrictionInformation',
        'root_wiki_id': 'rootWikiId',
        'table_bundle': 'tableBundle',
        'thread_count': 'threadCount'
    }

    def __init__(self, access_control_list=None, annotations=None, benefactor_acl=None, doi_association=None, entity=None, entity_type=None, file_handles=None, file_name=None, has_children=None, path=None, permissions=None, restriction_information=None, root_wiki_id=None, table_bundle=None, thread_count=None, local_vars_configuration=None):  # noqa: E501
        """EntityBundleV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_control_list = None
        self._annotations = None
        self._benefactor_acl = None
        self._doi_association = None
        self._entity = None
        self._entity_type = None
        self._file_handles = None
        self._file_name = None
        self._has_children = None
        self._path = None
        self._permissions = None
        self._restriction_information = None
        self._root_wiki_id = None
        self._table_bundle = None
        self._thread_count = None
        self.discriminator = None

        if access_control_list is not None:
            self.access_control_list = access_control_list
        if annotations is not None:
            self.annotations = annotations
        if benefactor_acl is not None:
            self.benefactor_acl = benefactor_acl
        if doi_association is not None:
            self.doi_association = doi_association
        if entity is not None:
            self.entity = entity
        if entity_type is not None:
            self.entity_type = entity_type
        if file_handles is not None:
            self.file_handles = file_handles
        if file_name is not None:
            self.file_name = file_name
        if has_children is not None:
            self.has_children = has_children
        if path is not None:
            self.path = path
        if permissions is not None:
            self.permissions = permissions
        if restriction_information is not None:
            self.restriction_information = restriction_information
        if root_wiki_id is not None:
            self.root_wiki_id = root_wiki_id
        if table_bundle is not None:
            self.table_bundle = table_bundle
        if thread_count is not None:
            self.thread_count = thread_count

    @property
    def access_control_list(self):
        """Gets the access_control_list of this EntityBundleV2.  # noqa: E501


        :return: The access_control_list of this EntityBundleV2.  # noqa: E501
        :rtype: AccessControlList
        """
        return self._access_control_list

    @access_control_list.setter
    def access_control_list(self, access_control_list):
        """Sets the access_control_list of this EntityBundleV2.


        :param access_control_list: The access_control_list of this EntityBundleV2.  # noqa: E501
        :type: AccessControlList
        """

        self._access_control_list = access_control_list

    @property
    def annotations(self):
        """Gets the annotations of this EntityBundleV2.  # noqa: E501


        :return: The annotations of this EntityBundleV2.  # noqa: E501
        :rtype: AnnotationsV2
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this EntityBundleV2.


        :param annotations: The annotations of this EntityBundleV2.  # noqa: E501
        :type: AnnotationsV2
        """

        self._annotations = annotations

    @property
    def benefactor_acl(self):
        """Gets the benefactor_acl of this EntityBundleV2.  # noqa: E501


        :return: The benefactor_acl of this EntityBundleV2.  # noqa: E501
        :rtype: AccessControlList
        """
        return self._benefactor_acl

    @benefactor_acl.setter
    def benefactor_acl(self, benefactor_acl):
        """Sets the benefactor_acl of this EntityBundleV2.


        :param benefactor_acl: The benefactor_acl of this EntityBundleV2.  # noqa: E501
        :type: AccessControlList
        """

        self._benefactor_acl = benefactor_acl

    @property
    def doi_association(self):
        """Gets the doi_association of this EntityBundleV2.  # noqa: E501


        :return: The doi_association of this EntityBundleV2.  # noqa: E501
        :rtype: DoiAssociation
        """
        return self._doi_association

    @doi_association.setter
    def doi_association(self, doi_association):
        """Sets the doi_association of this EntityBundleV2.


        :param doi_association: The doi_association of this EntityBundleV2.  # noqa: E501
        :type: DoiAssociation
        """

        self._doi_association = doi_association

    @property
    def entity(self):
        """Gets the entity of this EntityBundleV2.  # noqa: E501


        :return: The entity of this EntityBundleV2.  # noqa: E501
        :rtype: Entity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityBundleV2.


        :param entity: The entity of this EntityBundleV2.  # noqa: E501
        :type: Entity
        """

        self._entity = entity

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityBundleV2.  # noqa: E501


        :return: The entity_type of this EntityBundleV2.  # noqa: E501
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityBundleV2.


        :param entity_type: The entity_type of this EntityBundleV2.  # noqa: E501
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def file_handles(self):
        """Gets the file_handles of this EntityBundleV2.  # noqa: E501

        FileHandles associated with this Entity  # noqa: E501

        :return: The file_handles of this EntityBundleV2.  # noqa: E501
        :rtype: list[FileHandle]
        """
        return self._file_handles

    @file_handles.setter
    def file_handles(self, file_handles):
        """Sets the file_handles of this EntityBundleV2.

        FileHandles associated with this Entity  # noqa: E501

        :param file_handles: The file_handles of this EntityBundleV2.  # noqa: E501
        :type: list[FileHandle]
        """

        self._file_handles = file_handles

    @property
    def file_name(self):
        """Gets the file_name of this EntityBundleV2.  # noqa: E501

        If this Entity is a FileEntity, this is its filename  # noqa: E501

        :return: The file_name of this EntityBundleV2.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this EntityBundleV2.

        If this Entity is a FileEntity, this is its filename  # noqa: E501

        :param file_name: The file_name of this EntityBundleV2.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def has_children(self):
        """Gets the has_children of this EntityBundleV2.  # noqa: E501

        Whether or not this Entity has children  # noqa: E501

        :return: The has_children of this EntityBundleV2.  # noqa: E501
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this EntityBundleV2.

        Whether or not this Entity has children  # noqa: E501

        :param has_children: The has_children of this EntityBundleV2.  # noqa: E501
        :type: bool
        """

        self._has_children = has_children

    @property
    def path(self):
        """Gets the path of this EntityBundleV2.  # noqa: E501


        :return: The path of this EntityBundleV2.  # noqa: E501
        :rtype: EntityPath
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this EntityBundleV2.


        :param path: The path of this EntityBundleV2.  # noqa: E501
        :type: EntityPath
        """

        self._path = path

    @property
    def permissions(self):
        """Gets the permissions of this EntityBundleV2.  # noqa: E501


        :return: The permissions of this EntityBundleV2.  # noqa: E501
        :rtype: UserEntityPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this EntityBundleV2.


        :param permissions: The permissions of this EntityBundleV2.  # noqa: E501
        :type: UserEntityPermissions
        """

        self._permissions = permissions

    @property
    def restriction_information(self):
        """Gets the restriction_information of this EntityBundleV2.  # noqa: E501


        :return: The restriction_information of this EntityBundleV2.  # noqa: E501
        :rtype: RestrictionInformationResponse
        """
        return self._restriction_information

    @restriction_information.setter
    def restriction_information(self, restriction_information):
        """Sets the restriction_information of this EntityBundleV2.


        :param restriction_information: The restriction_information of this EntityBundleV2.  # noqa: E501
        :type: RestrictionInformationResponse
        """

        self._restriction_information = restriction_information

    @property
    def root_wiki_id(self):
        """Gets the root_wiki_id of this EntityBundleV2.  # noqa: E501

        Id of the root Wiki associated with this Entity  # noqa: E501

        :return: The root_wiki_id of this EntityBundleV2.  # noqa: E501
        :rtype: str
        """
        return self._root_wiki_id

    @root_wiki_id.setter
    def root_wiki_id(self, root_wiki_id):
        """Sets the root_wiki_id of this EntityBundleV2.

        Id of the root Wiki associated with this Entity  # noqa: E501

        :param root_wiki_id: The root_wiki_id of this EntityBundleV2.  # noqa: E501
        :type: str
        """

        self._root_wiki_id = root_wiki_id

    @property
    def table_bundle(self):
        """Gets the table_bundle of this EntityBundleV2.  # noqa: E501


        :return: The table_bundle of this EntityBundleV2.  # noqa: E501
        :rtype: TableBundle
        """
        return self._table_bundle

    @table_bundle.setter
    def table_bundle(self, table_bundle):
        """Sets the table_bundle of this EntityBundleV2.


        :param table_bundle: The table_bundle of this EntityBundleV2.  # noqa: E501
        :type: TableBundle
        """

        self._table_bundle = table_bundle

    @property
    def thread_count(self):
        """Gets the thread_count of this EntityBundleV2.  # noqa: E501

        Number of disucssion threads that reference this Entity  # noqa: E501

        :return: The thread_count of this EntityBundleV2.  # noqa: E501
        :rtype: float
        """
        return self._thread_count

    @thread_count.setter
    def thread_count(self, thread_count):
        """Sets the thread_count of this EntityBundleV2.

        Number of disucssion threads that reference this Entity  # noqa: E501

        :param thread_count: The thread_count of this EntityBundleV2.  # noqa: E501
        :type: float
        """

        self._thread_count = thread_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityBundleV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityBundleV2):
            return True

        return self.to_dict() != other.to_dict()
