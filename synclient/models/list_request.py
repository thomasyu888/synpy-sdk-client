# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ListRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filter_by_state': 'list[StateEnum]',
        'group_id': 'str',
        'next_page_token': 'str'
    }

    attribute_map = {
        'filter_by_state': 'filterByState',
        'group_id': 'groupId',
        'next_page_token': 'nextPageToken'
    }

    def __init__(self, filter_by_state=None, group_id=None, next_page_token=None, local_vars_configuration=None):  # noqa: E501
        """ListRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filter_by_state = None
        self._group_id = None
        self._next_page_token = None
        self.discriminator = None

        if filter_by_state is not None:
            self.filter_by_state = filter_by_state
        if group_id is not None:
            self.group_id = group_id
        if next_page_token is not None:
            self.next_page_token = next_page_token

    @property
    def filter_by_state(self):
        """Gets the filter_by_state of this ListRequest.  # noqa: E501

        Only return results with a state that matches elements from this set. Required. Must include at least one element.   # noqa: E501

        :return: The filter_by_state of this ListRequest.  # noqa: E501
        :rtype: list[StateEnum]
        """
        return self._filter_by_state

    @filter_by_state.setter
    def filter_by_state(self, filter_by_state):
        """Sets the filter_by_state of this ListRequest.

        Only return results with a state that matches elements from this set. Required. Must include at least one element.   # noqa: E501

        :param filter_by_state: The filter_by_state of this ListRequest.  # noqa: E501
        :type: list[StateEnum]
        """

        self._filter_by_state = filter_by_state

    @property
    def group_id(self):
        """Gets the group_id of this ListRequest.  # noqa: E501

        The group identifier. Required.  # noqa: E501

        :return: The group_id of this ListRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ListRequest.

        The group identifier. Required.  # noqa: E501

        :param group_id: The group_id of this ListRequest.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListRequest.  # noqa: E501

        The results are automatically paginated. To get the next page, forward the nextPageToken returned from the last request.   # noqa: E501

        :return: The next_page_token of this ListRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListRequest.

        The results are automatically paginated. To get the next page, forward the nextPageToken returned from the last request.   # noqa: E501

        :param next_page_token: The next_page_token of this ListRequest.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListRequest):
            return True

        return self.to_dict() != other.to_dict()
