# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class TeamSubmissionEligibility(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'eligibility_state_hash': 'int',
        'evaluation_id': 'str',
        'members_eligibility': 'list[MemberSubmissionEligibility]',
        'team_eligibility': 'SubmissionEligibility',
        'team_id': 'str'
    }

    attribute_map = {
        'eligibility_state_hash': 'eligibilityStateHash',
        'evaluation_id': 'evaluationId',
        'members_eligibility': 'membersEligibility',
        'team_eligibility': 'teamEligibility',
        'team_id': 'teamId'
    }

    def __init__(self, eligibility_state_hash=None, evaluation_id=None, members_eligibility=None, team_eligibility=None, team_id=None, local_vars_configuration=None):  # noqa: E501
        """TeamSubmissionEligibility - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._eligibility_state_hash = None
        self._evaluation_id = None
        self._members_eligibility = None
        self._team_eligibility = None
        self._team_id = None
        self.discriminator = None

        if eligibility_state_hash is not None:
            self.eligibility_state_hash = eligibility_state_hash
        if evaluation_id is not None:
            self.evaluation_id = evaluation_id
        if members_eligibility is not None:
            self.members_eligibility = members_eligibility
        if team_eligibility is not None:
            self.team_eligibility = team_eligibility
        if team_id is not None:
            self.team_id = team_id

    @property
    def eligibility_state_hash(self):
        """Gets the eligibility_state_hash of this TeamSubmissionEligibility.  # noqa: E501

        A hash of this object, used for optimistic concurrency.  # noqa: E501

        :return: The eligibility_state_hash of this TeamSubmissionEligibility.  # noqa: E501
        :rtype: int
        """
        return self._eligibility_state_hash

    @eligibility_state_hash.setter
    def eligibility_state_hash(self, eligibility_state_hash):
        """Sets the eligibility_state_hash of this TeamSubmissionEligibility.

        A hash of this object, used for optimistic concurrency.  # noqa: E501

        :param eligibility_state_hash: The eligibility_state_hash of this TeamSubmissionEligibility.  # noqa: E501
        :type: int
        """

        self._eligibility_state_hash = eligibility_state_hash

    @property
    def evaluation_id(self):
        """Gets the evaluation_id of this TeamSubmissionEligibility.  # noqa: E501

        The ID of the Evaluation of interest  # noqa: E501

        :return: The evaluation_id of this TeamSubmissionEligibility.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id):
        """Sets the evaluation_id of this TeamSubmissionEligibility.

        The ID of the Evaluation of interest  # noqa: E501

        :param evaluation_id: The evaluation_id of this TeamSubmissionEligibility.  # noqa: E501
        :type: str
        """

        self._evaluation_id = evaluation_id

    @property
    def members_eligibility(self):
        """Gets the members_eligibility of this TeamSubmissionEligibility.  # noqa: E501

        Describes the submission eligibility of the contributors to the Submission.  # noqa: E501

        :return: The members_eligibility of this TeamSubmissionEligibility.  # noqa: E501
        :rtype: list[MemberSubmissionEligibility]
        """
        return self._members_eligibility

    @members_eligibility.setter
    def members_eligibility(self, members_eligibility):
        """Sets the members_eligibility of this TeamSubmissionEligibility.

        Describes the submission eligibility of the contributors to the Submission.  # noqa: E501

        :param members_eligibility: The members_eligibility of this TeamSubmissionEligibility.  # noqa: E501
        :type: list[MemberSubmissionEligibility]
        """

        self._members_eligibility = members_eligibility

    @property
    def team_eligibility(self):
        """Gets the team_eligibility of this TeamSubmissionEligibility.  # noqa: E501


        :return: The team_eligibility of this TeamSubmissionEligibility.  # noqa: E501
        :rtype: SubmissionEligibility
        """
        return self._team_eligibility

    @team_eligibility.setter
    def team_eligibility(self, team_eligibility):
        """Sets the team_eligibility of this TeamSubmissionEligibility.


        :param team_eligibility: The team_eligibility of this TeamSubmissionEligibility.  # noqa: E501
        :type: SubmissionEligibility
        """

        self._team_eligibility = team_eligibility

    @property
    def team_id(self):
        """Gets the team_id of this TeamSubmissionEligibility.  # noqa: E501

        The ID of the Team of interest  # noqa: E501

        :return: The team_id of this TeamSubmissionEligibility.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TeamSubmissionEligibility.

        The ID of the Team of interest  # noqa: E501

        :param team_id: The team_id of this TeamSubmissionEligibility.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamSubmissionEligibility):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamSubmissionEligibility):
            return True

        return self.to_dict() != other.to_dict()
