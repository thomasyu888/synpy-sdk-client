# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class UserGroupHeader(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'email': 'str',
        'first_name': 'str',
        'is_individual': 'bool',
        'last_name': 'str',
        'owner_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'email': 'email',
        'first_name': 'firstName',
        'is_individual': 'isIndividual',
        'last_name': 'lastName',
        'owner_id': 'ownerId',
        'user_name': 'userName'
    }

    def __init__(self, display_name=None, email=None, first_name=None, is_individual=None, last_name=None, owner_id=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """UserGroupHeader - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._email = None
        self._first_name = None
        self._is_individual = None
        self._last_name = None
        self._owner_id = None
        self._user_name = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if is_individual is not None:
            self.is_individual = is_individual
        if last_name is not None:
            self.last_name = last_name
        if owner_id is not None:
            self.owner_id = owner_id
        if user_name is not None:
            self.user_name = user_name

    @property
    def display_name(self):
        """Gets the display_name of this UserGroupHeader.  # noqa: E501

        This is deprecated and will always be null  # noqa: E501

        :return: The display_name of this UserGroupHeader.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserGroupHeader.

        This is deprecated and will always be null  # noqa: E501

        :param display_name: The display_name of this UserGroupHeader.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserGroupHeader.  # noqa: E501

        User's current email address   # noqa: E501

        :return: The email of this UserGroupHeader.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserGroupHeader.

        User's current email address   # noqa: E501

        :param email: The email of this UserGroupHeader.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserGroupHeader.  # noqa: E501

        First Name  # noqa: E501

        :return: The first_name of this UserGroupHeader.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserGroupHeader.

        First Name  # noqa: E501

        :param first_name: The first_name of this UserGroupHeader.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def is_individual(self):
        """Gets the is_individual of this UserGroupHeader.  # noqa: E501

        True if this is a user, false if it is a group  # noqa: E501

        :return: The is_individual of this UserGroupHeader.  # noqa: E501
        :rtype: bool
        """
        return self._is_individual

    @is_individual.setter
    def is_individual(self, is_individual):
        """Sets the is_individual of this UserGroupHeader.

        True if this is a user, false if it is a group  # noqa: E501

        :param is_individual: The is_individual of this UserGroupHeader.  # noqa: E501
        :type: bool
        """

        self._is_individual = is_individual

    @property
    def last_name(self):
        """Gets the last_name of this UserGroupHeader.  # noqa: E501

        Last Name  # noqa: E501

        :return: The last_name of this UserGroupHeader.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserGroupHeader.

        Last Name  # noqa: E501

        :param last_name: The last_name of this UserGroupHeader.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def owner_id(self):
        """Gets the owner_id of this UserGroupHeader.  # noqa: E501

        A foreign key to the ID of the 'principal' object for the user.   # noqa: E501

        :return: The owner_id of this UserGroupHeader.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this UserGroupHeader.

        A foreign key to the ID of the 'principal' object for the user.   # noqa: E501

        :param owner_id: The owner_id of this UserGroupHeader.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def user_name(self):
        """Gets the user_name of this UserGroupHeader.  # noqa: E501

        A name chosen by the user that uniquely identifies them.  # noqa: E501

        :return: The user_name of this UserGroupHeader.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserGroupHeader.

        A name chosen by the user that uniquely identifies them.  # noqa: E501

        :param user_name: The user_name of this UserGroupHeader.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroupHeader):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserGroupHeader):
            return True

        return self.to_dict() != other.to_dict()
