# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class AccessRequirement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_type': 'ACCESSTYPE',
        'concrete_type': 'str',
        'created_by': 'str',
        'created_on': 'str',
        'description': 'str',
        'etag': 'str',
        'id': 'float',
        'modified_by': 'str',
        'modified_on': 'str',
        'subject_ids': 'list[RestrictableObjectDescriptor]',
        'version_number': 'int'
    }

    attribute_map = {
        'access_type': 'accessType',
        'concrete_type': 'concreteType',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'description': 'description',
        'etag': 'etag',
        'id': 'id',
        'modified_by': 'modifiedBy',
        'modified_on': 'modifiedOn',
        'subject_ids': 'subjectIds',
        'version_number': 'versionNumber'
    }

    def __init__(self, access_type=None, concrete_type=None, created_by=None, created_on=None, description=None, etag=None, id=None, modified_by=None, modified_on=None, subject_ids=None, version_number=None, local_vars_configuration=None):  # noqa: E501
        """AccessRequirement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_type = None
        self._concrete_type = None
        self._created_by = None
        self._created_on = None
        self._description = None
        self._etag = None
        self._id = None
        self._modified_by = None
        self._modified_on = None
        self._subject_ids = None
        self._version_number = None
        self.discriminator = None

        if access_type is not None:
            self.access_type = access_type
        if concrete_type is not None:
            self.concrete_type = concrete_type
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if description is not None:
            self.description = description
        if etag is not None:
            self.etag = etag
        if id is not None:
            self.id = id
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_on is not None:
            self.modified_on = modified_on
        if subject_ids is not None:
            self.subject_ids = subject_ids
        if version_number is not None:
            self.version_number = version_number

    @property
    def access_type(self):
        """Gets the access_type of this AccessRequirement.  # noqa: E501


        :return: The access_type of this AccessRequirement.  # noqa: E501
        :rtype: ACCESSTYPE
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this AccessRequirement.


        :param access_type: The access_type of this AccessRequirement.  # noqa: E501
        :type: ACCESSTYPE
        """

        self._access_type = access_type

    @property
    def concrete_type(self):
        """Gets the concrete_type of this AccessRequirement.  # noqa: E501

        Indicates which type of AccessRequirement this object represents. Provided by the system, the user may not set this field.  # noqa: E501

        :return: The concrete_type of this AccessRequirement.  # noqa: E501
        :rtype: str
        """
        return self._concrete_type

    @concrete_type.setter
    def concrete_type(self, concrete_type):
        """Sets the concrete_type of this AccessRequirement.

        Indicates which type of AccessRequirement this object represents. Provided by the system, the user may not set this field.  # noqa: E501

        :param concrete_type: The concrete_type of this AccessRequirement.  # noqa: E501
        :type: str
        """

        self._concrete_type = concrete_type

    @property
    def created_by(self):
        """Gets the created_by of this AccessRequirement.  # noqa: E501

        The user that created this object. Provided by the system, the user may not set this field.  # noqa: E501

        :return: The created_by of this AccessRequirement.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AccessRequirement.

        The user that created this object. Provided by the system, the user may not set this field.  # noqa: E501

        :param created_by: The created_by of this AccessRequirement.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this AccessRequirement.  # noqa: E501

        The date this object was created. Provided by the system, the user may not set this field.  # noqa: E501

        :return: The created_on of this AccessRequirement.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AccessRequirement.

        The date this object was created. Provided by the system, the user may not set this field.  # noqa: E501

        :param created_on: The created_on of this AccessRequirement.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this AccessRequirement.  # noqa: E501

        Short optional description for the AR. Limited to 50 characters.  # noqa: E501

        :return: The description of this AccessRequirement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccessRequirement.

        Short optional description for the AR. Limited to 50 characters.  # noqa: E501

        :param description: The description of this AccessRequirement.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this AccessRequirement.  # noqa: E501

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an object is out-of-date.   # noqa: E501

        :return: The etag of this AccessRequirement.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AccessRequirement.

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an object is out-of-date.   # noqa: E501

        :param etag: The etag of this AccessRequirement.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this AccessRequirement.  # noqa: E501

        The unique immutable ID. Provided by the system, the user may not set this field.  # noqa: E501

        :return: The id of this AccessRequirement.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessRequirement.

        The unique immutable ID. Provided by the system, the user may not set this field.  # noqa: E501

        :param id: The id of this AccessRequirement.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def modified_by(self):
        """Gets the modified_by of this AccessRequirement.  # noqa: E501

        The user that last modified this object. Provided by the system, the user may not set this field.  # noqa: E501

        :return: The modified_by of this AccessRequirement.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this AccessRequirement.

        The user that last modified this object. Provided by the system, the user may not set this field.  # noqa: E501

        :param modified_by: The modified_by of this AccessRequirement.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this AccessRequirement.  # noqa: E501

        The date this object was last modified. Provided by the system, the user may not set this field.  # noqa: E501

        :return: The modified_on of this AccessRequirement.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this AccessRequirement.

        The date this object was last modified. Provided by the system, the user may not set this field.  # noqa: E501

        :param modified_on: The modified_on of this AccessRequirement.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def subject_ids(self):
        """Gets the subject_ids of this AccessRequirement.  # noqa: E501

        The IDs of the items controlled by this Access Requirement. Required when creating or updating.  # noqa: E501

        :return: The subject_ids of this AccessRequirement.  # noqa: E501
        :rtype: list[RestrictableObjectDescriptor]
        """
        return self._subject_ids

    @subject_ids.setter
    def subject_ids(self, subject_ids):
        """Sets the subject_ids of this AccessRequirement.

        The IDs of the items controlled by this Access Requirement. Required when creating or updating.  # noqa: E501

        :param subject_ids: The subject_ids of this AccessRequirement.  # noqa: E501
        :type: list[RestrictableObjectDescriptor]
        """

        self._subject_ids = subject_ids

    @property
    def version_number(self):
        """Gets the version_number of this AccessRequirement.  # noqa: E501

        The version number issued to this version on the object.  # noqa: E501

        :return: The version_number of this AccessRequirement.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this AccessRequirement.

        The version number issued to this version on the object.  # noqa: E501

        :param version_number: The version_number of this AccessRequirement.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessRequirement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessRequirement):
            return True

        return self.to_dict() != other.to_dict()
