# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class SubmissionModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contributors': 'list[SubmissionContributor]',
        'created_on': 'str',
        'docker_digest': 'str',
        'docker_repository_name': 'str',
        'entity_bundle_json': 'str',
        'entity_id': 'str',
        'evaluation_id': 'str',
        'evaluation_round_id': 'str',
        'id': 'str',
        'name': 'str',
        'submitter_alias': 'str',
        'team_id': 'str',
        'user_id': 'str',
        'version_number': 'int'
    }

    attribute_map = {
        'contributors': 'contributors',
        'created_on': 'createdOn',
        'docker_digest': 'dockerDigest',
        'docker_repository_name': 'dockerRepositoryName',
        'entity_bundle_json': 'entityBundleJSON',
        'entity_id': 'entityId',
        'evaluation_id': 'evaluationId',
        'evaluation_round_id': 'evaluationRoundId',
        'id': 'id',
        'name': 'name',
        'submitter_alias': 'submitterAlias',
        'team_id': 'teamId',
        'user_id': 'userId',
        'version_number': 'versionNumber'
    }

    def __init__(self, contributors=None, created_on=None, docker_digest=None, docker_repository_name=None, entity_bundle_json=None, entity_id=None, evaluation_id=None, evaluation_round_id=None, id=None, name=None, submitter_alias=None, team_id=None, user_id=None, version_number=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contributors = None
        self._created_on = None
        self._docker_digest = None
        self._docker_repository_name = None
        self._entity_bundle_json = None
        self._entity_id = None
        self._evaluation_id = None
        self._evaluation_round_id = None
        self._id = None
        self._name = None
        self._submitter_alias = None
        self._team_id = None
        self._user_id = None
        self._version_number = None
        self.discriminator = None

        if contributors is not None:
            self.contributors = contributors
        if created_on is not None:
            self.created_on = created_on
        if docker_digest is not None:
            self.docker_digest = docker_digest
        if docker_repository_name is not None:
            self.docker_repository_name = docker_repository_name
        if entity_bundle_json is not None:
            self.entity_bundle_json = entity_bundle_json
        if entity_id is not None:
            self.entity_id = entity_id
        if evaluation_id is not None:
            self.evaluation_id = evaluation_id
        if evaluation_round_id is not None:
            self.evaluation_round_id = evaluation_round_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if submitter_alias is not None:
            self.submitter_alias = submitter_alias
        if team_id is not None:
            self.team_id = team_id
        if user_id is not None:
            self.user_id = user_id
        if version_number is not None:
            self.version_number = version_number

    @property
    def contributors(self):
        """Gets the contributors of this SubmissionModel.  # noqa: E501

        User ids of the submitter and (if a team submission) the team members involved in creating the submission.   # noqa: E501

        :return: The contributors of this SubmissionModel.  # noqa: E501
        :rtype: list[SubmissionContributor]
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this SubmissionModel.

        User ids of the submitter and (if a team submission) the team members involved in creating the submission.   # noqa: E501

        :param contributors: The contributors of this SubmissionModel.  # noqa: E501
        :type: list[SubmissionContributor]
        """

        self._contributors = contributors

    @property
    def created_on(self):
        """Gets the created_on of this SubmissionModel.  # noqa: E501

        The date on which Submission was created.  # noqa: E501

        :return: The created_on of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SubmissionModel.

        The date on which Submission was created.  # noqa: E501

        :param created_on: The created_on of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def docker_digest(self):
        """Gets the docker_digest of this SubmissionModel.  # noqa: E501

        For Docker repositories, the digest from the commit. Null for other entity types.  # noqa: E501

        :return: The docker_digest of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._docker_digest

    @docker_digest.setter
    def docker_digest(self, docker_digest):
        """Sets the docker_digest of this SubmissionModel.

        For Docker repositories, the digest from the commit. Null for other entity types.  # noqa: E501

        :param docker_digest: The docker_digest of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._docker_digest = docker_digest

    @property
    def docker_repository_name(self):
        """Gets the docker_repository_name of this SubmissionModel.  # noqa: E501

        For Docker repositories, the name of the submitted repository. Null for other entity types.  # noqa: E501

        :return: The docker_repository_name of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._docker_repository_name

    @docker_repository_name.setter
    def docker_repository_name(self, docker_repository_name):
        """Sets the docker_repository_name of this SubmissionModel.

        For Docker repositories, the name of the submitted repository. Null for other entity types.  # noqa: E501

        :param docker_repository_name: The docker_repository_name of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._docker_repository_name = docker_repository_name

    @property
    def entity_bundle_json(self):
        """Gets the entity_bundle_json of this SubmissionModel.  # noqa: E501

        The Bundled Entity and Annotations JSON at the time of submission.  # noqa: E501

        :return: The entity_bundle_json of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._entity_bundle_json

    @entity_bundle_json.setter
    def entity_bundle_json(self, entity_bundle_json):
        """Sets the entity_bundle_json of this SubmissionModel.

        The Bundled Entity and Annotations JSON at the time of submission.  # noqa: E501

        :param entity_bundle_json: The entity_bundle_json of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._entity_bundle_json = entity_bundle_json

    @property
    def entity_id(self):
        """Gets the entity_id of this SubmissionModel.  # noqa: E501

        The Synapse ID of the Entity in this Submission.  # noqa: E501

        :return: The entity_id of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SubmissionModel.

        The Synapse ID of the Entity in this Submission.  # noqa: E501

        :param entity_id: The entity_id of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def evaluation_id(self):
        """Gets the evaluation_id of this SubmissionModel.  # noqa: E501

        The Synapse ID of the Evaluation this Submission is for.  # noqa: E501

        :return: The evaluation_id of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id):
        """Sets the evaluation_id of this SubmissionModel.

        The Synapse ID of the Evaluation this Submission is for.  # noqa: E501

        :param evaluation_id: The evaluation_id of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._evaluation_id = evaluation_id

    @property
    def evaluation_round_id(self):
        """Gets the evaluation_round_id of this SubmissionModel.  # noqa: E501

        The Synapse ID of the EvaluationRound to which this was submitted. DO NOT specify a value for this. It will be filled in automatically upon creation of the Submission if the Evaluation is configured with an EvaluationRound.  # noqa: E501

        :return: The evaluation_round_id of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_round_id

    @evaluation_round_id.setter
    def evaluation_round_id(self, evaluation_round_id):
        """Sets the evaluation_round_id of this SubmissionModel.

        The Synapse ID of the EvaluationRound to which this was submitted. DO NOT specify a value for this. It will be filled in automatically upon creation of the Submission if the Evaluation is configured with an EvaluationRound.  # noqa: E501

        :param evaluation_round_id: The evaluation_round_id of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._evaluation_round_id = evaluation_round_id

    @property
    def id(self):
        """Gets the id of this SubmissionModel.  # noqa: E501

        The unique, immutable Synapse ID of this Submission.  # noqa: E501

        :return: The id of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionModel.

        The unique, immutable Synapse ID of this Submission.  # noqa: E501

        :param id: The id of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SubmissionModel.  # noqa: E501

        The title of this Submission.  # noqa: E501

        :return: The name of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubmissionModel.

        The title of this Submission.  # noqa: E501

        :param name: The name of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def submitter_alias(self):
        """Gets the submitter_alias of this SubmissionModel.  # noqa: E501

        The alias for the user or team creating the submission.  # noqa: E501

        :return: The submitter_alias of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._submitter_alias

    @submitter_alias.setter
    def submitter_alias(self, submitter_alias):
        """Sets the submitter_alias of this SubmissionModel.

        The alias for the user or team creating the submission.  # noqa: E501

        :param submitter_alias: The submitter_alias of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._submitter_alias = submitter_alias

    @property
    def team_id(self):
        """Gets the team_id of this SubmissionModel.  # noqa: E501

        optional Team which collaborated on the submission  # noqa: E501

        :return: The team_id of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this SubmissionModel.

        optional Team which collaborated on the submission  # noqa: E501

        :param team_id: The team_id of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def user_id(self):
        """Gets the user_id of this SubmissionModel.  # noqa: E501

        The Synapse ID of the user who created this Submission.  # noqa: E501

        :return: The user_id of this SubmissionModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SubmissionModel.

        The Synapse ID of the user who created this Submission.  # noqa: E501

        :param user_id: The user_id of this SubmissionModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version_number(self):
        """Gets the version_number of this SubmissionModel.  # noqa: E501

        The submitted version number of the Entity.  # noqa: E501

        :return: The version_number of this SubmissionModel.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this SubmissionModel.

        The submitted version number of the Entity.  # noqa: E501

        :param version_number: The version_number of this SubmissionModel.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionModel):
            return True

        return self.to_dict() != other.to_dict()
