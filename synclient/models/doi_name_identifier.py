# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class DoiNameIdentifier(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'str',
        'name_identifier_scheme': 'NameIdentifierScheme'
    }

    attribute_map = {
        'identifier': 'identifier',
        'name_identifier_scheme': 'nameIdentifierScheme'
    }

    def __init__(self, identifier=None, name_identifier_scheme=None, local_vars_configuration=None):  # noqa: E501
        """DoiNameIdentifier - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._name_identifier_scheme = None
        self.discriminator = None

        self.identifier = identifier
        self.name_identifier_scheme = name_identifier_scheme

    @property
    def identifier(self):
        """Gets the identifier of this DoiNameIdentifier.  # noqa: E501

        The identifier belonging to the creator.  # noqa: E501

        :return: The identifier of this DoiNameIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DoiNameIdentifier.

        The identifier belonging to the creator.  # noqa: E501

        :param identifier: The identifier of this DoiNameIdentifier.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def name_identifier_scheme(self):
        """Gets the name_identifier_scheme of this DoiNameIdentifier.  # noqa: E501


        :return: The name_identifier_scheme of this DoiNameIdentifier.  # noqa: E501
        :rtype: NameIdentifierScheme
        """
        return self._name_identifier_scheme

    @name_identifier_scheme.setter
    def name_identifier_scheme(self, name_identifier_scheme):
        """Sets the name_identifier_scheme of this DoiNameIdentifier.


        :param name_identifier_scheme: The name_identifier_scheme of this DoiNameIdentifier.  # noqa: E501
        :type: NameIdentifierScheme
        """
        if self.local_vars_configuration.client_side_validation and name_identifier_scheme is None:  # noqa: E501
            raise ValueError("Invalid value for `name_identifier_scheme`, must not be `None`")  # noqa: E501

        self._name_identifier_scheme = name_identifier_scheme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DoiNameIdentifier):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DoiNameIdentifier):
            return True

        return self.to_dict() != other.to_dict()
