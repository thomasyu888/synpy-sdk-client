# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class SubmissionQuota(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_round_start': 'str',
        'number_of_rounds': 'int',
        'round_duration_millis': 'int',
        'submission_limit': 'int'
    }

    attribute_map = {
        'first_round_start': 'firstRoundStart',
        'number_of_rounds': 'numberOfRounds',
        'round_duration_millis': 'roundDurationMillis',
        'submission_limit': 'submissionLimit'
    }

    def __init__(self, first_round_start=None, number_of_rounds=None, round_duration_millis=None, submission_limit=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionQuota - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_round_start = None
        self._number_of_rounds = None
        self._round_duration_millis = None
        self._submission_limit = None
        self.discriminator = None

        if first_round_start is not None:
            self.first_round_start = first_round_start
        if number_of_rounds is not None:
            self.number_of_rounds = number_of_rounds
        if round_duration_millis is not None:
            self.round_duration_millis = round_duration_millis
        if submission_limit is not None:
            self.submission_limit = submission_limit

    @property
    def first_round_start(self):
        """Gets the first_round_start of this SubmissionQuota.  # noqa: E501

        The date/time at which the first round begins.  # noqa: E501

        :return: The first_round_start of this SubmissionQuota.  # noqa: E501
        :rtype: str
        """
        return self._first_round_start

    @first_round_start.setter
    def first_round_start(self, first_round_start):
        """Sets the first_round_start of this SubmissionQuota.

        The date/time at which the first round begins.  # noqa: E501

        :param first_round_start: The first_round_start of this SubmissionQuota.  # noqa: E501
        :type: str
        """

        self._first_round_start = first_round_start

    @property
    def number_of_rounds(self):
        """Gets the number_of_rounds of this SubmissionQuota.  # noqa: E501

        The number of rounds, or null if there is no end.  # noqa: E501

        :return: The number_of_rounds of this SubmissionQuota.  # noqa: E501
        :rtype: int
        """
        return self._number_of_rounds

    @number_of_rounds.setter
    def number_of_rounds(self, number_of_rounds):
        """Sets the number_of_rounds of this SubmissionQuota.

        The number of rounds, or null if there is no end.  # noqa: E501

        :param number_of_rounds: The number_of_rounds of this SubmissionQuota.  # noqa: E501
        :type: int
        """

        self._number_of_rounds = number_of_rounds

    @property
    def round_duration_millis(self):
        """Gets the round_duration_millis of this SubmissionQuota.  # noqa: E501

        The duration of each round in milliseconds  # noqa: E501

        :return: The round_duration_millis of this SubmissionQuota.  # noqa: E501
        :rtype: int
        """
        return self._round_duration_millis

    @round_duration_millis.setter
    def round_duration_millis(self, round_duration_millis):
        """Sets the round_duration_millis of this SubmissionQuota.

        The duration of each round in milliseconds  # noqa: E501

        :param round_duration_millis: The round_duration_millis of this SubmissionQuota.  # noqa: E501
        :type: int
        """

        self._round_duration_millis = round_duration_millis

    @property
    def submission_limit(self):
        """Gets the submission_limit of this SubmissionQuota.  # noqa: E501

        the maximum number of submissions per team/participant per round.  # noqa: E501

        :return: The submission_limit of this SubmissionQuota.  # noqa: E501
        :rtype: int
        """
        return self._submission_limit

    @submission_limit.setter
    def submission_limit(self, submission_limit):
        """Sets the submission_limit of this SubmissionQuota.

        the maximum number of submissions per team/participant per round.  # noqa: E501

        :param submission_limit: The submission_limit of this SubmissionQuota.  # noqa: E501
        :type: int
        """

        self._submission_limit = submission_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionQuota):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionQuota):
            return True

        return self.to_dict() != other.to_dict()
