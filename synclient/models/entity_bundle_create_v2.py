# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class EntityBundleCreateV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_control_list': 'AccessControlList',
        'annotations': 'AnnotationsV2',
        'entity': 'Entity'
    }

    attribute_map = {
        'access_control_list': 'accessControlList',
        'annotations': 'annotations',
        'entity': 'entity'
    }

    def __init__(self, access_control_list=None, annotations=None, entity=None, local_vars_configuration=None):  # noqa: E501
        """EntityBundleCreateV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_control_list = None
        self._annotations = None
        self._entity = None
        self.discriminator = None

        if access_control_list is not None:
            self.access_control_list = access_control_list
        if annotations is not None:
            self.annotations = annotations
        if entity is not None:
            self.entity = entity

    @property
    def access_control_list(self):
        """Gets the access_control_list of this EntityBundleCreateV2.  # noqa: E501


        :return: The access_control_list of this EntityBundleCreateV2.  # noqa: E501
        :rtype: AccessControlList
        """
        return self._access_control_list

    @access_control_list.setter
    def access_control_list(self, access_control_list):
        """Sets the access_control_list of this EntityBundleCreateV2.


        :param access_control_list: The access_control_list of this EntityBundleCreateV2.  # noqa: E501
        :type: AccessControlList
        """

        self._access_control_list = access_control_list

    @property
    def annotations(self):
        """Gets the annotations of this EntityBundleCreateV2.  # noqa: E501


        :return: The annotations of this EntityBundleCreateV2.  # noqa: E501
        :rtype: AnnotationsV2
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this EntityBundleCreateV2.


        :param annotations: The annotations of this EntityBundleCreateV2.  # noqa: E501
        :type: AnnotationsV2
        """

        self._annotations = annotations

    @property
    def entity(self):
        """Gets the entity of this EntityBundleCreateV2.  # noqa: E501


        :return: The entity of this EntityBundleCreateV2.  # noqa: E501
        :rtype: Entity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityBundleCreateV2.


        :param entity: The entity of this EntityBundleCreateV2.  # noqa: E501
        :type: Entity
        """

        self._entity = entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityBundleCreateV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityBundleCreateV2):
            return True

        return self.to_dict() != other.to_dict()
