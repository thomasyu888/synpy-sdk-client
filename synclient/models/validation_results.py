# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ValidationResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_validation_messages': 'list[str]',
        'is_valid': 'bool',
        'object_etag': 'str',
        'object_id': 'str',
        'object_type': 'ObjectTypeSchema',
        'schemaid': 'str',
        'validated_on': 'str',
        'validation_error_message': 'str',
        'validation_exception': 'ValidationException'
    }

    attribute_map = {
        'all_validation_messages': 'allValidationMessages',
        'is_valid': 'isValid',
        'object_etag': 'objectEtag',
        'object_id': 'objectId',
        'object_type': 'objectType',
        'schemaid': 'schema$id',
        'validated_on': 'validatedOn',
        'validation_error_message': 'validationErrorMessage',
        'validation_exception': 'validationException'
    }

    def __init__(self, all_validation_messages=None, is_valid=None, object_etag=None, object_id=None, object_type=None, schemaid=None, validated_on=None, validation_error_message=None, validation_exception=None, local_vars_configuration=None):  # noqa: E501
        """ValidationResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._all_validation_messages = None
        self._is_valid = None
        self._object_etag = None
        self._object_id = None
        self._object_type = None
        self._schemaid = None
        self._validated_on = None
        self._validation_error_message = None
        self._validation_exception = None
        self.discriminator = None

        if all_validation_messages is not None:
            self.all_validation_messages = all_validation_messages
        if is_valid is not None:
            self.is_valid = is_valid
        if object_etag is not None:
            self.object_etag = object_etag
        if object_id is not None:
            self.object_id = object_id
        if object_type is not None:
            self.object_type = object_type
        if schemaid is not None:
            self.schemaid = schemaid
        if validated_on is not None:
            self.validated_on = validated_on
        if validation_error_message is not None:
            self.validation_error_message = validation_error_message
        if validation_exception is not None:
            self.validation_exception = validation_exception

    @property
    def all_validation_messages(self):
        """Gets the all_validation_messages of this ValidationResults.  # noqa: E501

        If the object is not valid according to the schema, a the flat list of error messages will be provided with one error message per sub-schema.   # noqa: E501

        :return: The all_validation_messages of this ValidationResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._all_validation_messages

    @all_validation_messages.setter
    def all_validation_messages(self, all_validation_messages):
        """Sets the all_validation_messages of this ValidationResults.

        If the object is not valid according to the schema, a the flat list of error messages will be provided with one error message per sub-schema.   # noqa: E501

        :param all_validation_messages: The all_validation_messages of this ValidationResults.  # noqa: E501
        :type: list[str]
        """

        self._all_validation_messages = all_validation_messages

    @property
    def is_valid(self):
        """Gets the is_valid of this ValidationResults.  # noqa: E501

        True if the object is currently valid according to the schema.  # noqa: E501

        :return: The is_valid of this ValidationResults.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this ValidationResults.

        True if the object is currently valid according to the schema.  # noqa: E501

        :param is_valid: The is_valid of this ValidationResults.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def object_etag(self):
        """Gets the object_etag of this ValidationResults.  # noqa: E501

        The etag of the object at the time of validation. Note: If this etag does not match the current etag of the object then these validation results should be considered out of date.   # noqa: E501

        :return: The object_etag of this ValidationResults.  # noqa: E501
        :rtype: str
        """
        return self._object_etag

    @object_etag.setter
    def object_etag(self, object_etag):
        """Sets the object_etag of this ValidationResults.

        The etag of the object at the time of validation. Note: If this etag does not match the current etag of the object then these validation results should be considered out of date.   # noqa: E501

        :param object_etag: The object_etag of this ValidationResults.  # noqa: E501
        :type: str
        """

        self._object_etag = object_etag

    @property
    def object_id(self):
        """Gets the object_id of this ValidationResults.  # noqa: E501

        The identifier of the object that was validated.  # noqa: E501

        :return: The object_id of this ValidationResults.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ValidationResults.

        The identifier of the object that was validated.  # noqa: E501

        :param object_id: The object_id of this ValidationResults.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this ValidationResults.  # noqa: E501


        :return: The object_type of this ValidationResults.  # noqa: E501
        :rtype: ObjectTypeSchema
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ValidationResults.


        :param object_type: The object_type of this ValidationResults.  # noqa: E501
        :type: ObjectTypeSchema
        """

        self._object_type = object_type

    @property
    def schemaid(self):
        """Gets the schemaid of this ValidationResults.  # noqa: E501

        The $id of the schema that the object was validated against.  # noqa: E501

        :return: The schemaid of this ValidationResults.  # noqa: E501
        :rtype: str
        """
        return self._schemaid

    @schemaid.setter
    def schemaid(self, schemaid):
        """Sets the schemaid of this ValidationResults.

        The $id of the schema that the object was validated against.  # noqa: E501

        :param schemaid: The schemaid of this ValidationResults.  # noqa: E501
        :type: str
        """

        self._schemaid = schemaid

    @property
    def validated_on(self):
        """Gets the validated_on of this ValidationResults.  # noqa: E501

        The date-time this object was validated  # noqa: E501

        :return: The validated_on of this ValidationResults.  # noqa: E501
        :rtype: str
        """
        return self._validated_on

    @validated_on.setter
    def validated_on(self, validated_on):
        """Sets the validated_on of this ValidationResults.

        The date-time this object was validated  # noqa: E501

        :param validated_on: The validated_on of this ValidationResults.  # noqa: E501
        :type: str
        """

        self._validated_on = validated_on

    @property
    def validation_error_message(self):
        """Gets the validation_error_message of this ValidationResults.  # noqa: E501

        If the object is not valid according to the schema, a simple one line error message will be provided.   # noqa: E501

        :return: The validation_error_message of this ValidationResults.  # noqa: E501
        :rtype: str
        """
        return self._validation_error_message

    @validation_error_message.setter
    def validation_error_message(self, validation_error_message):
        """Sets the validation_error_message of this ValidationResults.

        If the object is not valid according to the schema, a simple one line error message will be provided.   # noqa: E501

        :param validation_error_message: The validation_error_message of this ValidationResults.  # noqa: E501
        :type: str
        """

        self._validation_error_message = validation_error_message

    @property
    def validation_exception(self):
        """Gets the validation_exception of this ValidationResults.  # noqa: E501


        :return: The validation_exception of this ValidationResults.  # noqa: E501
        :rtype: ValidationException
        """
        return self._validation_exception

    @validation_exception.setter
    def validation_exception(self, validation_exception):
        """Sets the validation_exception of this ValidationResults.


        :param validation_exception: The validation_exception of this ValidationResults.  # noqa: E501
        :type: ValidationException
        """

        self._validation_exception = validation_exception

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidationResults):
            return True

        return self.to_dict() != other.to_dict()
