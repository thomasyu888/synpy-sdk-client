# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class UserBundle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'orcid': 'str',
        'is_act_member': 'bool',
        'is_certified': 'bool',
        'is_verified': 'bool',
        'user_id': 'str',
        'user_profile': 'UserProfile',
        'verification_submission': 'VerificationSubmission'
    }

    attribute_map = {
        'orcid': 'ORCID',
        'is_act_member': 'isACTMember',
        'is_certified': 'isCertified',
        'is_verified': 'isVerified',
        'user_id': 'userId',
        'user_profile': 'userProfile',
        'verification_submission': 'verificationSubmission'
    }

    def __init__(self, orcid=None, is_act_member=None, is_certified=None, is_verified=None, user_id=None, user_profile=None, verification_submission=None, local_vars_configuration=None):  # noqa: E501
        """UserBundle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._orcid = None
        self._is_act_member = None
        self._is_certified = None
        self._is_verified = None
        self._user_id = None
        self._user_profile = None
        self._verification_submission = None
        self.discriminator = None

        if orcid is not None:
            self.orcid = orcid
        if is_act_member is not None:
            self.is_act_member = is_act_member
        if is_certified is not None:
            self.is_certified = is_certified
        if is_verified is not None:
            self.is_verified = is_verified
        if user_id is not None:
            self.user_id = user_id
        if user_profile is not None:
            self.user_profile = user_profile
        if verification_submission is not None:
            self.verification_submission = verification_submission

    @property
    def orcid(self):
        """Gets the orcid of this UserBundle.  # noqa: E501

        The ORCID ID for the user, if any  # noqa: E501

        :return: The orcid of this UserBundle.  # noqa: E501
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this UserBundle.

        The ORCID ID for the user, if any  # noqa: E501

        :param orcid: The orcid of this UserBundle.  # noqa: E501
        :type: str
        """

        self._orcid = orcid

    @property
    def is_act_member(self):
        """Gets the is_act_member of this UserBundle.  # noqa: E501

        true if the user is an ACT member  # noqa: E501

        :return: The is_act_member of this UserBundle.  # noqa: E501
        :rtype: bool
        """
        return self._is_act_member

    @is_act_member.setter
    def is_act_member(self, is_act_member):
        """Sets the is_act_member of this UserBundle.

        true if the user is an ACT member  # noqa: E501

        :param is_act_member: The is_act_member of this UserBundle.  # noqa: E501
        :type: bool
        """

        self._is_act_member = is_act_member

    @property
    def is_certified(self):
        """Gets the is_certified of this UserBundle.  # noqa: E501

        true if the user is Certified  # noqa: E501

        :return: The is_certified of this UserBundle.  # noqa: E501
        :rtype: bool
        """
        return self._is_certified

    @is_certified.setter
    def is_certified(self, is_certified):
        """Sets the is_certified of this UserBundle.

        true if the user is Certified  # noqa: E501

        :param is_certified: The is_certified of this UserBundle.  # noqa: E501
        :type: bool
        """

        self._is_certified = is_certified

    @property
    def is_verified(self):
        """Gets the is_verified of this UserBundle.  # noqa: E501

        true if the user is Verified  # noqa: E501

        :return: The is_verified of this UserBundle.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this UserBundle.

        true if the user is Verified  # noqa: E501

        :param is_verified: The is_verified of this UserBundle.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def user_id(self):
        """Gets the user_id of this UserBundle.  # noqa: E501

        The ID of the user described by this bundle  # noqa: E501

        :return: The user_id of this UserBundle.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserBundle.

        The ID of the user described by this bundle  # noqa: E501

        :param user_id: The user_id of this UserBundle.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_profile(self):
        """Gets the user_profile of this UserBundle.  # noqa: E501


        :return: The user_profile of this UserBundle.  # noqa: E501
        :rtype: UserProfile
        """
        return self._user_profile

    @user_profile.setter
    def user_profile(self, user_profile):
        """Sets the user_profile of this UserBundle.


        :param user_profile: The user_profile of this UserBundle.  # noqa: E501
        :type: UserProfile
        """

        self._user_profile = user_profile

    @property
    def verification_submission(self):
        """Gets the verification_submission of this UserBundle.  # noqa: E501


        :return: The verification_submission of this UserBundle.  # noqa: E501
        :rtype: VerificationSubmission
        """
        return self._verification_submission

    @verification_submission.setter
    def verification_submission(self, verification_submission):
        """Sets the verification_submission of this UserBundle.


        :param verification_submission: The verification_submission of this UserBundle.  # noqa: E501
        :type: VerificationSubmission
        """

        self._verification_submission = verification_submission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBundle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserBundle):
            return True

        return self.to_dict() != other.to_dict()
