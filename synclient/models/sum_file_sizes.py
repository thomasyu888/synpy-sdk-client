# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class SumFileSizes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'greater_than': 'bool',
        'sum_file_sizes_bytes': 'int'
    }

    attribute_map = {
        'greater_than': 'greaterThan',
        'sum_file_sizes_bytes': 'sumFileSizesBytes'
    }

    def __init__(self, greater_than=None, sum_file_sizes_bytes=None, local_vars_configuration=None):  # noqa: E501
        """SumFileSizes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._greater_than = None
        self._sum_file_sizes_bytes = None
        self.discriminator = None

        if greater_than is not None:
            self.greater_than = greater_than
        if sum_file_sizes_bytes is not None:
            self.sum_file_sizes_bytes = sum_file_sizes_bytes

    @property
    def greater_than(self):
        """Gets the greater_than of this SumFileSizes.  # noqa: E501

        When true, the actual sum of the files sizes is greater than the value provided with 'sumFileSizesBytes'. When false, the actual sum of the files sizes is equlas the value provided with 'sumFileSizesBytes'   # noqa: E501

        :return: The greater_than of this SumFileSizes.  # noqa: E501
        :rtype: bool
        """
        return self._greater_than

    @greater_than.setter
    def greater_than(self, greater_than):
        """Sets the greater_than of this SumFileSizes.

        When true, the actual sum of the files sizes is greater than the value provided with 'sumFileSizesBytes'. When false, the actual sum of the files sizes is equlas the value provided with 'sumFileSizesBytes'   # noqa: E501

        :param greater_than: The greater_than of this SumFileSizes.  # noqa: E501
        :type: bool
        """

        self._greater_than = greater_than

    @property
    def sum_file_sizes_bytes(self):
        """Gets the sum_file_sizes_bytes of this SumFileSizes.  # noqa: E501

        The sum of the file size in bytes.  # noqa: E501

        :return: The sum_file_sizes_bytes of this SumFileSizes.  # noqa: E501
        :rtype: int
        """
        return self._sum_file_sizes_bytes

    @sum_file_sizes_bytes.setter
    def sum_file_sizes_bytes(self, sum_file_sizes_bytes):
        """Sets the sum_file_sizes_bytes of this SumFileSizes.

        The sum of the file size in bytes.  # noqa: E501

        :param sum_file_sizes_bytes: The sum_file_sizes_bytes of this SumFileSizes.  # noqa: E501
        :type: int
        """

        self._sum_file_sizes_bytes = sum_file_sizes_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SumFileSizes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SumFileSizes):
            return True

        return self.to_dict() != other.to_dict()
