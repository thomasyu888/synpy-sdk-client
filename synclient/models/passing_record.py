# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class PassingRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'corrections': 'list[ResponseCorrectness]',
        'passed': 'bool',
        'passed_on': 'str',
        'quiz_id': 'int',
        'response_id': 'int',
        'score': 'int',
        'user_id': 'str'
    }

    attribute_map = {
        'corrections': 'corrections',
        'passed': 'passed',
        'passed_on': 'passedOn',
        'quiz_id': 'quizId',
        'response_id': 'responseId',
        'score': 'score',
        'user_id': 'userId'
    }

    def __init__(self, corrections=None, passed=None, passed_on=None, quiz_id=None, response_id=None, score=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """PassingRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._corrections = None
        self._passed = None
        self._passed_on = None
        self._quiz_id = None
        self._response_id = None
        self._score = None
        self._user_id = None
        self.discriminator = None

        if corrections is not None:
            self.corrections = corrections
        if passed is not None:
            self.passed = passed
        if passed_on is not None:
            self.passed_on = passed_on
        if quiz_id is not None:
            self.quiz_id = quiz_id
        if response_id is not None:
            self.response_id = response_id
        if score is not None:
            self.score = score
        if user_id is not None:
            self.user_id = user_id

    @property
    def corrections(self):
        """Gets the corrections of this PassingRecord.  # noqa: E501

        For each response, whether it was correct  # noqa: E501

        :return: The corrections of this PassingRecord.  # noqa: E501
        :rtype: list[ResponseCorrectness]
        """
        return self._corrections

    @corrections.setter
    def corrections(self, corrections):
        """Sets the corrections of this PassingRecord.

        For each response, whether it was correct  # noqa: E501

        :param corrections: The corrections of this PassingRecord.  # noqa: E501
        :type: list[ResponseCorrectness]
        """

        self._corrections = corrections

    @property
    def passed(self):
        """Gets the passed of this PassingRecord.  # noqa: E501

        Whether the user passed the given test  # noqa: E501

        :return: The passed of this PassingRecord.  # noqa: E501
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this PassingRecord.

        Whether the user passed the given test  # noqa: E501

        :param passed: The passed of this PassingRecord.  # noqa: E501
        :type: bool
        """

        self._passed = passed

    @property
    def passed_on(self):
        """Gets the passed_on of this PassingRecord.  # noqa: E501

        Date/time when the user passed the test (omitted if the user has not passed)  # noqa: E501

        :return: The passed_on of this PassingRecord.  # noqa: E501
        :rtype: str
        """
        return self._passed_on

    @passed_on.setter
    def passed_on(self, passed_on):
        """Sets the passed_on of this PassingRecord.

        Date/time when the user passed the test (omitted if the user has not passed)  # noqa: E501

        :param passed_on: The passed_on of this PassingRecord.  # noqa: E501
        :type: str
        """

        self._passed_on = passed_on

    @property
    def quiz_id(self):
        """Gets the quiz_id of this PassingRecord.  # noqa: E501

        The id of the quiz  # noqa: E501

        :return: The quiz_id of this PassingRecord.  # noqa: E501
        :rtype: int
        """
        return self._quiz_id

    @quiz_id.setter
    def quiz_id(self, quiz_id):
        """Sets the quiz_id of this PassingRecord.

        The id of the quiz  # noqa: E501

        :param quiz_id: The quiz_id of this PassingRecord.  # noqa: E501
        :type: int
        """

        self._quiz_id = quiz_id

    @property
    def response_id(self):
        """Gets the response_id of this PassingRecord.  # noqa: E501

        The id of the user's response   # noqa: E501

        :return: The response_id of this PassingRecord.  # noqa: E501
        :rtype: int
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """Sets the response_id of this PassingRecord.

        The id of the user's response   # noqa: E501

        :param response_id: The response_id of this PassingRecord.  # noqa: E501
        :type: int
        """

        self._response_id = response_id

    @property
    def score(self):
        """Gets the score of this PassingRecord.  # noqa: E501

        The score the user received on the test  # noqa: E501

        :return: The score of this PassingRecord.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PassingRecord.

        The score the user received on the test  # noqa: E501

        :param score: The score of this PassingRecord.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def user_id(self):
        """Gets the user_id of this PassingRecord.  # noqa: E501

        The principal id of the user  # noqa: E501

        :return: The user_id of this PassingRecord.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PassingRecord.

        The principal id of the user  # noqa: E501

        :param user_id: The user_id of this PassingRecord.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PassingRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PassingRecord):
            return True

        return self.to_dict() != other.to_dict()
