# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class FacetColumnResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'column_name': 'str',
        'concrete_type': 'str',
        'facet_type': 'FacetType'
    }

    attribute_map = {
        'column_name': 'columnName',
        'concrete_type': 'concreteType',
        'facet_type': 'facetType'
    }

    def __init__(self, column_name=None, concrete_type=None, facet_type=None, local_vars_configuration=None):  # noqa: E501
        """FacetColumnResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._column_name = None
        self._concrete_type = None
        self._facet_type = None
        self.discriminator = None

        if column_name is not None:
            self.column_name = column_name
        if concrete_type is not None:
            self.concrete_type = concrete_type
        if facet_type is not None:
            self.facet_type = facet_type

    @property
    def column_name(self):
        """Gets the column_name of this FacetColumnResult.  # noqa: E501

        The name of the faceted column  # noqa: E501

        :return: The column_name of this FacetColumnResult.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this FacetColumnResult.

        The name of the faceted column  # noqa: E501

        :param column_name: The column_name of this FacetColumnResult.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def concrete_type(self):
        """Gets the concrete_type of this FacetColumnResult.  # noqa: E501

        Concrete Type  # noqa: E501

        :return: The concrete_type of this FacetColumnResult.  # noqa: E501
        :rtype: str
        """
        return self._concrete_type

    @concrete_type.setter
    def concrete_type(self, concrete_type):
        """Sets the concrete_type of this FacetColumnResult.

        Concrete Type  # noqa: E501

        :param concrete_type: The concrete_type of this FacetColumnResult.  # noqa: E501
        :type: str
        """

        self._concrete_type = concrete_type

    @property
    def facet_type(self):
        """Gets the facet_type of this FacetColumnResult.  # noqa: E501


        :return: The facet_type of this FacetColumnResult.  # noqa: E501
        :rtype: FacetType
        """
        return self._facet_type

    @facet_type.setter
    def facet_type(self, facet_type):
        """Sets the facet_type of this FacetColumnResult.


        :param facet_type: The facet_type of this FacetColumnResult.  # noqa: E501
        :type: FacetType
        """

        self._facet_type = facet_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacetColumnResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FacetColumnResult):
            return True

        return self.to_dict() != other.to_dict()
