# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class VersionInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_md5': 'str',
        'content_size': 'str',
        'id': 'str',
        'modified_by': 'str',
        'modified_by_principal_id': 'str',
        'modified_on': 'str',
        'version_comment': 'str',
        'version_label': 'str',
        'version_number': 'int'
    }

    attribute_map = {
        'content_md5': 'contentMd5',
        'content_size': 'contentSize',
        'id': 'id',
        'modified_by': 'modifiedBy',
        'modified_by_principal_id': 'modifiedByPrincipalId',
        'modified_on': 'modifiedOn',
        'version_comment': 'versionComment',
        'version_label': 'versionLabel',
        'version_number': 'versionNumber'
    }

    def __init__(self, content_md5=None, content_size=None, id=None, modified_by=None, modified_by_principal_id=None, modified_on=None, version_comment=None, version_label=None, version_number=None, local_vars_configuration=None):  # noqa: E501
        """VersionInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_md5 = None
        self._content_size = None
        self._id = None
        self._modified_by = None
        self._modified_by_principal_id = None
        self._modified_on = None
        self._version_comment = None
        self._version_label = None
        self._version_number = None
        self.discriminator = None

        if content_md5 is not None:
            self.content_md5 = content_md5
        if content_size is not None:
            self.content_size = content_size
        if id is not None:
            self.id = id
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_by_principal_id is not None:
            self.modified_by_principal_id = modified_by_principal_id
        if modified_on is not None:
            self.modified_on = modified_on
        if version_comment is not None:
            self.version_comment = version_comment
        if version_label is not None:
            self.version_label = version_label
        if version_number is not None:
            self.version_number = version_number

    @property
    def content_md5(self):
        """Gets the content_md5 of this VersionInfo.  # noqa: E501

        Calculated md5 of the associated file (when applicable and available).  # noqa: E501

        :return: The content_md5 of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._content_md5

    @content_md5.setter
    def content_md5(self, content_md5):
        """Sets the content_md5 of this VersionInfo.

        Calculated md5 of the associated file (when applicable and available).  # noqa: E501

        :param content_md5: The content_md5 of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._content_md5 = content_md5

    @property
    def content_size(self):
        """Gets the content_size of this VersionInfo.  # noqa: E501

        The size of the associated file (when applicable and available).  # noqa: E501

        :return: The content_size of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._content_size

    @content_size.setter
    def content_size(self, content_size):
        """Sets the content_size of this VersionInfo.

        The size of the associated file (when applicable and available).  # noqa: E501

        :param content_size: The content_size of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._content_size = content_size

    @property
    def id(self):
        """Gets the id of this VersionInfo.  # noqa: E501

        The id of the entity  # noqa: E501

        :return: The id of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VersionInfo.

        The id of the entity  # noqa: E501

        :param id: The id of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_by(self):
        """Gets the modified_by of this VersionInfo.  # noqa: E501

        The display name of the user that last modified this entity.  # noqa: E501

        :return: The modified_by of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this VersionInfo.

        The display name of the user that last modified this entity.  # noqa: E501

        :param modified_by: The modified_by of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_by_principal_id(self):
        """Gets the modified_by_principal_id of this VersionInfo.  # noqa: E501

        The user that last modified this entity.  # noqa: E501

        :return: The modified_by_principal_id of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._modified_by_principal_id

    @modified_by_principal_id.setter
    def modified_by_principal_id(self, modified_by_principal_id):
        """Sets the modified_by_principal_id of this VersionInfo.

        The user that last modified this entity.  # noqa: E501

        :param modified_by_principal_id: The modified_by_principal_id of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._modified_by_principal_id = modified_by_principal_id

    @property
    def modified_on(self):
        """Gets the modified_on of this VersionInfo.  # noqa: E501

        The date this entity was last modified.  # noqa: E501

        :return: The modified_on of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this VersionInfo.

        The date this entity was last modified.  # noqa: E501

        :param modified_on: The modified_on of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def version_comment(self):
        """Gets the version_comment of this VersionInfo.  # noqa: E501

        The user defined version label of the entity  # noqa: E501

        :return: The version_comment of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._version_comment

    @version_comment.setter
    def version_comment(self, version_comment):
        """Sets the version_comment of this VersionInfo.

        The user defined version label of the entity  # noqa: E501

        :param version_comment: The version_comment of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._version_comment = version_comment

    @property
    def version_label(self):
        """Gets the version_label of this VersionInfo.  # noqa: E501

        The user defined version label of the entity  # noqa: E501

        :return: The version_label of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._version_label

    @version_label.setter
    def version_label(self, version_label):
        """Sets the version_label of this VersionInfo.

        The user defined version label of the entity  # noqa: E501

        :param version_label: The version_label of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._version_label = version_label

    @property
    def version_number(self):
        """Gets the version_number of this VersionInfo.  # noqa: E501

        The version number of the entity  # noqa: E501

        :return: The version_number of this VersionInfo.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this VersionInfo.

        The version number of the entity  # noqa: E501

        :param version_number: The version_number of this VersionInfo.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VersionInfo):
            return True

        return self.to_dict() != other.to_dict()
