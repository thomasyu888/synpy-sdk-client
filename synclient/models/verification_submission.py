# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class VerificationSubmission(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attachments': 'list[AttachmentMetadata]',
        'company': 'str',
        'created_by': 'str',
        'created_on': 'str',
        'emails': 'list[str]',
        'first_name': 'str',
        'id': 'str',
        'last_name': 'str',
        'location': 'str',
        'notification_email': 'str',
        'orcid': 'str',
        'state_history': 'list[VerificationState]'
    }

    attribute_map = {
        'attachments': 'attachments',
        'company': 'company',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'emails': 'emails',
        'first_name': 'firstName',
        'id': 'id',
        'last_name': 'lastName',
        'location': 'location',
        'notification_email': 'notificationEmail',
        'orcid': 'orcid',
        'state_history': 'stateHistory'
    }

    def __init__(self, attachments=None, company=None, created_by=None, created_on=None, emails=None, first_name=None, id=None, last_name=None, location=None, notification_email=None, orcid=None, state_history=None, local_vars_configuration=None):  # noqa: E501
        """VerificationSubmission - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attachments = None
        self._company = None
        self._created_by = None
        self._created_on = None
        self._emails = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._location = None
        self._notification_email = None
        self._orcid = None
        self._state_history = None
        self.discriminator = None

        if attachments is not None:
            self.attachments = attachments
        if company is not None:
            self.company = company
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if emails is not None:
            self.emails = emails
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if location is not None:
            self.location = location
        if notification_email is not None:
            self.notification_email = notification_email
        if orcid is not None:
            self.orcid = orcid
        if state_history is not None:
            self.state_history = state_history

    @property
    def attachments(self):
        """Gets the attachments of this VerificationSubmission.  # noqa: E501

        Metadata of Files attached to the submission. The list will be emptied after the state is APPROVED or REJECTED.   # noqa: E501

        :return: The attachments of this VerificationSubmission.  # noqa: E501
        :rtype: list[AttachmentMetadata]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this VerificationSubmission.

        Metadata of Files attached to the submission. The list will be emptied after the state is APPROVED or REJECTED.   # noqa: E501

        :param attachments: The attachments of this VerificationSubmission.  # noqa: E501
        :type: list[AttachmentMetadata]
        """

        self._attachments = attachments

    @property
    def company(self):
        """Gets the company of this VerificationSubmission.  # noqa: E501

        This person's current affiliation   # noqa: E501

        :return: The company of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this VerificationSubmission.

        This person's current affiliation   # noqa: E501

        :param company: The company of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def created_by(self):
        """Gets the created_by of this VerificationSubmission.  # noqa: E501

        The principal ID of the user requesting verification  # noqa: E501

        :return: The created_by of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VerificationSubmission.

        The principal ID of the user requesting verification  # noqa: E501

        :param created_by: The created_by of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this VerificationSubmission.  # noqa: E501

        The date and time this object was created  # noqa: E501

        :return: The created_on of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this VerificationSubmission.

        The date and time this object was created  # noqa: E501

        :param created_on: The created_on of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def emails(self):
        """Gets the emails of this VerificationSubmission.  # noqa: E501

        The list of user email addresses registered to this user.  # noqa: E501

        :return: The emails of this VerificationSubmission.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this VerificationSubmission.

        The list of user email addresses registered to this user.  # noqa: E501

        :param emails: The emails of this VerificationSubmission.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def first_name(self):
        """Gets the first_name of this VerificationSubmission.  # noqa: E501

        This person's given name (forename)   # noqa: E501

        :return: The first_name of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this VerificationSubmission.

        This person's given name (forename)   # noqa: E501

        :param first_name: The first_name of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this VerificationSubmission.  # noqa: E501

        The ID of this object  # noqa: E501

        :return: The id of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VerificationSubmission.

        The ID of this object  # noqa: E501

        :param id: The id of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this VerificationSubmission.  # noqa: E501

        This person's family name (surname)   # noqa: E501

        :return: The last_name of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VerificationSubmission.

        This person's family name (surname)   # noqa: E501

        :param last_name: The last_name of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def location(self):
        """Gets the location of this VerificationSubmission.  # noqa: E501

        This person's location   # noqa: E501

        :return: The location of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VerificationSubmission.

        This person's location   # noqa: E501

        :param location: The location of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def notification_email(self):
        """Gets the notification_email of this VerificationSubmission.  # noqa: E501

        The primary (notification) email address registered to this user.  # noqa: E501

        :return: The notification_email of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._notification_email

    @notification_email.setter
    def notification_email(self, notification_email):
        """Sets the notification_email of this VerificationSubmission.

        The primary (notification) email address registered to this user.  # noqa: E501

        :param notification_email: The notification_email of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._notification_email = notification_email

    @property
    def orcid(self):
        """Gets the orcid of this VerificationSubmission.  # noqa: E501

        The user's ORCID URI   # noqa: E501

        :return: The orcid of this VerificationSubmission.  # noqa: E501
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this VerificationSubmission.

        The user's ORCID URI   # noqa: E501

        :param orcid: The orcid of this VerificationSubmission.  # noqa: E501
        :type: str
        """

        self._orcid = orcid

    @property
    def state_history(self):
        """Gets the state_history of this VerificationSubmission.  # noqa: E501

        List of state changes the submission has passed through, ordered by time. The last in the list contains the current state of the submission.   # noqa: E501

        :return: The state_history of this VerificationSubmission.  # noqa: E501
        :rtype: list[VerificationState]
        """
        return self._state_history

    @state_history.setter
    def state_history(self, state_history):
        """Sets the state_history of this VerificationSubmission.

        List of state changes the submission has passed through, ordered by time. The last in the list contains the current state of the submission.   # noqa: E501

        :param state_history: The state_history of this VerificationSubmission.  # noqa: E501
        :type: list[VerificationState]
        """

        self._state_history = state_history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationSubmission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerificationSubmission):
            return True

        return self.to_dict() != other.to_dict()
