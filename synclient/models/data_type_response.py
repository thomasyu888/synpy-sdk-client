# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class DataTypeResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_type': 'DataType',
        'object_id': 'str',
        'object_type': 'ObjectType',
        'updated_by': 'str',
        'updated_on': 'str'
    }

    attribute_map = {
        'data_type': 'dataType',
        'object_id': 'objectId',
        'object_type': 'objectType',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn'
    }

    def __init__(self, data_type=None, object_id=None, object_type=None, updated_by=None, updated_on=None, local_vars_configuration=None):  # noqa: E501
        """DataTypeResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_type = None
        self._object_id = None
        self._object_type = None
        self._updated_by = None
        self._updated_on = None
        self.discriminator = None

        if data_type is not None:
            self.data_type = data_type
        if object_id is not None:
            self.object_id = object_id
        if object_type is not None:
            self.object_type = object_type
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def data_type(self):
        """Gets the data_type of this DataTypeResponse.  # noqa: E501


        :return: The data_type of this DataTypeResponse.  # noqa: E501
        :rtype: DataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataTypeResponse.


        :param data_type: The data_type of this DataTypeResponse.  # noqa: E501
        :type: DataType
        """

        self._data_type = data_type

    @property
    def object_id(self):
        """Gets the object_id of this DataTypeResponse.  # noqa: E501

        The ID of the object.  # noqa: E501

        :return: The object_id of this DataTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this DataTypeResponse.

        The ID of the object.  # noqa: E501

        :param object_id: The object_id of this DataTypeResponse.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this DataTypeResponse.  # noqa: E501


        :return: The object_type of this DataTypeResponse.  # noqa: E501
        :rtype: ObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this DataTypeResponse.


        :param object_type: The object_type of this DataTypeResponse.  # noqa: E501
        :type: ObjectType
        """

        self._object_type = object_type

    @property
    def updated_by(self):
        """Gets the updated_by of this DataTypeResponse.  # noqa: E501

        The user that last updated this object's DataType.   # noqa: E501

        :return: The updated_by of this DataTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DataTypeResponse.

        The user that last updated this object's DataType.   # noqa: E501

        :param updated_by: The updated_by of this DataTypeResponse.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this DataTypeResponse.  # noqa: E501

        The date this object's DataType was last updated.   # noqa: E501

        :return: The updated_on of this DataTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this DataTypeResponse.

        The date this object's DataType was last updated.   # noqa: E501

        :param updated_on: The updated_on of this DataTypeResponse.  # noqa: E501
        :type: str
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataTypeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataTypeResponse):
            return True

        return self.to_dict() != other.to_dict()
