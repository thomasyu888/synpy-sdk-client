# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ResourceAccess(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_type': 'list[ACCESSTYPE]',
        'principal_id': 'int'
    }

    attribute_map = {
        'access_type': 'accessType',
        'principal_id': 'principalId'
    }

    def __init__(self, access_type=None, principal_id=None, local_vars_configuration=None):  # noqa: E501
        """ResourceAccess - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_type = None
        self._principal_id = None
        self.discriminator = None

        if access_type is not None:
            self.access_type = access_type
        if principal_id is not None:
            self.principal_id = principal_id

    @property
    def access_type(self):
        """Gets the access_type of this ResourceAccess.  # noqa: E501

        A list of types of access granted to the given principal  # noqa: E501

        :return: The access_type of this ResourceAccess.  # noqa: E501
        :rtype: list[ACCESSTYPE]
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this ResourceAccess.

        A list of types of access granted to the given principal  # noqa: E501

        :param access_type: The access_type of this ResourceAccess.  # noqa: E501
        :type: list[ACCESSTYPE]
        """

        self._access_type = access_type

    @property
    def principal_id(self):
        """Gets the principal_id of this ResourceAccess.  # noqa: E501

        The id of the principal who is granted access  # noqa: E501

        :return: The principal_id of this ResourceAccess.  # noqa: E501
        :rtype: int
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this ResourceAccess.

        The id of the principal who is granted access  # noqa: E501

        :param principal_id: The principal_id of this ResourceAccess.  # noqa: E501
        :type: int
        """

        self._principal_id = principal_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceAccess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceAccess):
            return True

        return self.to_dict() != other.to_dict()
