# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class TableFileHandleResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'headers': 'list[SelectColumn]',
        'rows': 'list[FileHandleResults]',
        'table_id': 'str'
    }

    attribute_map = {
        'headers': 'headers',
        'rows': 'rows',
        'table_id': 'tableId'
    }

    def __init__(self, headers=None, rows=None, table_id=None, local_vars_configuration=None):  # noqa: E501
        """TableFileHandleResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._headers = None
        self._rows = None
        self._table_id = None
        self.discriminator = None

        if headers is not None:
            self.headers = headers
        if rows is not None:
            self.rows = rows
        if table_id is not None:
            self.table_id = table_id

    @property
    def headers(self):
        """Gets the headers of this TableFileHandleResults.  # noqa: E501

        The list of ColumnModels ID that describes the rows of this set.  # noqa: E501

        :return: The headers of this TableFileHandleResults.  # noqa: E501
        :rtype: list[SelectColumn]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this TableFileHandleResults.

        The list of ColumnModels ID that describes the rows of this set.  # noqa: E501

        :param headers: The headers of this TableFileHandleResults.  # noqa: E501
        :type: list[SelectColumn]
        """

        self._headers = headers

    @property
    def rows(self):
        """Gets the rows of this TableFileHandleResults.  # noqa: E501

        For each row a list of file handles for each requested column  # noqa: E501

        :return: The rows of this TableFileHandleResults.  # noqa: E501
        :rtype: list[FileHandleResults]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this TableFileHandleResults.

        For each row a list of file handles for each requested column  # noqa: E501

        :param rows: The rows of this TableFileHandleResults.  # noqa: E501
        :type: list[FileHandleResults]
        """

        self._rows = rows

    @property
    def table_id(self):
        """Gets the table_id of this TableFileHandleResults.  # noqa: E501

        The ID of the TableEntity than owns these rows  # noqa: E501

        :return: The table_id of this TableFileHandleResults.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this TableFileHandleResults.

        The ID of the TableEntity than owns these rows  # noqa: E501

        :param table_id: The table_id of this TableFileHandleResults.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableFileHandleResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableFileHandleResults):
            return True

        return self.to_dict() != other.to_dict()
