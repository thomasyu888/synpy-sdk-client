# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class UserEntityPermissions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'can_add_child': 'bool',
        'can_certified_user_add_child': 'bool',
        'can_certified_user_edit': 'bool',
        'can_change_permissions': 'bool',
        'can_change_settings': 'bool',
        'can_delete': 'bool',
        'can_download': 'bool',
        'can_edit': 'bool',
        'can_enable_inheritance': 'bool',
        'can_moderate': 'bool',
        'can_public_read': 'bool',
        'can_upload': 'bool',
        'can_view': 'bool',
        'is_certification_required': 'bool',
        'is_certified_user': 'bool',
        'owner_principal_id': 'float'
    }

    attribute_map = {
        'can_add_child': 'canAddChild',
        'can_certified_user_add_child': 'canCertifiedUserAddChild',
        'can_certified_user_edit': 'canCertifiedUserEdit',
        'can_change_permissions': 'canChangePermissions',
        'can_change_settings': 'canChangeSettings',
        'can_delete': 'canDelete',
        'can_download': 'canDownload',
        'can_edit': 'canEdit',
        'can_enable_inheritance': 'canEnableInheritance',
        'can_moderate': 'canModerate',
        'can_public_read': 'canPublicRead',
        'can_upload': 'canUpload',
        'can_view': 'canView',
        'is_certification_required': 'isCertificationRequired',
        'is_certified_user': 'isCertifiedUser',
        'owner_principal_id': 'ownerPrincipalId'
    }

    def __init__(self, can_add_child=None, can_certified_user_add_child=None, can_certified_user_edit=None, can_change_permissions=None, can_change_settings=None, can_delete=None, can_download=None, can_edit=None, can_enable_inheritance=None, can_moderate=None, can_public_read=None, can_upload=None, can_view=None, is_certification_required=None, is_certified_user=None, owner_principal_id=None, local_vars_configuration=None):  # noqa: E501
        """UserEntityPermissions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._can_add_child = None
        self._can_certified_user_add_child = None
        self._can_certified_user_edit = None
        self._can_change_permissions = None
        self._can_change_settings = None
        self._can_delete = None
        self._can_download = None
        self._can_edit = None
        self._can_enable_inheritance = None
        self._can_moderate = None
        self._can_public_read = None
        self._can_upload = None
        self._can_view = None
        self._is_certification_required = None
        self._is_certified_user = None
        self._owner_principal_id = None
        self.discriminator = None

        if can_add_child is not None:
            self.can_add_child = can_add_child
        if can_certified_user_add_child is not None:
            self.can_certified_user_add_child = can_certified_user_add_child
        if can_certified_user_edit is not None:
            self.can_certified_user_edit = can_certified_user_edit
        if can_change_permissions is not None:
            self.can_change_permissions = can_change_permissions
        if can_change_settings is not None:
            self.can_change_settings = can_change_settings
        if can_delete is not None:
            self.can_delete = can_delete
        if can_download is not None:
            self.can_download = can_download
        if can_edit is not None:
            self.can_edit = can_edit
        if can_enable_inheritance is not None:
            self.can_enable_inheritance = can_enable_inheritance
        if can_moderate is not None:
            self.can_moderate = can_moderate
        if can_public_read is not None:
            self.can_public_read = can_public_read
        if can_upload is not None:
            self.can_upload = can_upload
        if can_view is not None:
            self.can_view = can_view
        if is_certification_required is not None:
            self.is_certification_required = is_certification_required
        if is_certified_user is not None:
            self.is_certified_user = is_certified_user
        if owner_principal_id is not None:
            self.owner_principal_id = owner_principal_id

    @property
    def can_add_child(self):
        """Gets the can_add_child of this UserEntityPermissions.  # noqa: E501

        Can the user add a child entity to this entity?  # noqa: E501

        :return: The can_add_child of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_add_child

    @can_add_child.setter
    def can_add_child(self, can_add_child):
        """Sets the can_add_child of this UserEntityPermissions.

        Can the user add a child entity to this entity?  # noqa: E501

        :param can_add_child: The can_add_child of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_add_child = can_add_child

    @property
    def can_certified_user_add_child(self):
        """Gets the can_certified_user_add_child of this UserEntityPermissions.  # noqa: E501

        Can the user add a child entity to this entity once they become a Certified User?  # noqa: E501

        :return: The can_certified_user_add_child of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_certified_user_add_child

    @can_certified_user_add_child.setter
    def can_certified_user_add_child(self, can_certified_user_add_child):
        """Sets the can_certified_user_add_child of this UserEntityPermissions.

        Can the user add a child entity to this entity once they become a Certified User?  # noqa: E501

        :param can_certified_user_add_child: The can_certified_user_add_child of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_certified_user_add_child = can_certified_user_add_child

    @property
    def can_certified_user_edit(self):
        """Gets the can_certified_user_edit of this UserEntityPermissions.  # noqa: E501

        Can the user edit this entity once they become a Certified User?  # noqa: E501

        :return: The can_certified_user_edit of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_certified_user_edit

    @can_certified_user_edit.setter
    def can_certified_user_edit(self, can_certified_user_edit):
        """Sets the can_certified_user_edit of this UserEntityPermissions.

        Can the user edit this entity once they become a Certified User?  # noqa: E501

        :param can_certified_user_edit: The can_certified_user_edit of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_certified_user_edit = can_certified_user_edit

    @property
    def can_change_permissions(self):
        """Gets the can_change_permissions of this UserEntityPermissions.  # noqa: E501

        Can the user change the permissions of this entity?  # noqa: E501

        :return: The can_change_permissions of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_permissions

    @can_change_permissions.setter
    def can_change_permissions(self, can_change_permissions):
        """Sets the can_change_permissions of this UserEntityPermissions.

        Can the user change the permissions of this entity?  # noqa: E501

        :param can_change_permissions: The can_change_permissions of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_change_permissions = can_change_permissions

    @property
    def can_change_settings(self):
        """Gets the can_change_settings of this UserEntityPermissions.  # noqa: E501

        Can the user change the settings of this entity?  # noqa: E501

        :return: The can_change_settings of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_settings

    @can_change_settings.setter
    def can_change_settings(self, can_change_settings):
        """Sets the can_change_settings of this UserEntityPermissions.

        Can the user change the settings of this entity?  # noqa: E501

        :param can_change_settings: The can_change_settings of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_change_settings = can_change_settings

    @property
    def can_delete(self):
        """Gets the can_delete of this UserEntityPermissions.  # noqa: E501

        Can the user delete this entity?  # noqa: E501

        :return: The can_delete of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this UserEntityPermissions.

        Can the user delete this entity?  # noqa: E501

        :param can_delete: The can_delete of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_download(self):
        """Gets the can_download of this UserEntityPermissions.  # noqa: E501

        Are there any access requirements precluding the user from downloading this entity?  # noqa: E501

        :return: The can_download of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_download

    @can_download.setter
    def can_download(self, can_download):
        """Sets the can_download of this UserEntityPermissions.

        Are there any access requirements precluding the user from downloading this entity?  # noqa: E501

        :param can_download: The can_download of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_download = can_download

    @property
    def can_edit(self):
        """Gets the can_edit of this UserEntityPermissions.  # noqa: E501

        Can the user edit this entity?  # noqa: E501

        :return: The can_edit of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this UserEntityPermissions.

        Can the user edit this entity?  # noqa: E501

        :param can_edit: The can_edit of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def can_enable_inheritance(self):
        """Gets the can_enable_inheritance of this UserEntityPermissions.  # noqa: E501

        Can the user delete the entity's access control list (so it inherits settings from an ancestor)?'   # noqa: E501

        :return: The can_enable_inheritance of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_enable_inheritance

    @can_enable_inheritance.setter
    def can_enable_inheritance(self, can_enable_inheritance):
        """Sets the can_enable_inheritance of this UserEntityPermissions.

        Can the user delete the entity's access control list (so it inherits settings from an ancestor)?'   # noqa: E501

        :param can_enable_inheritance: The can_enable_inheritance of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_enable_inheritance = can_enable_inheritance

    @property
    def can_moderate(self):
        """Gets the can_moderate of this UserEntityPermissions.  # noqa: E501

        Can the user moderate the forum associated with this entity? Note that only project entity has forum.  # noqa: E501

        :return: The can_moderate of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_moderate

    @can_moderate.setter
    def can_moderate(self, can_moderate):
        """Sets the can_moderate of this UserEntityPermissions.

        Can the user moderate the forum associated with this entity? Note that only project entity has forum.  # noqa: E501

        :param can_moderate: The can_moderate of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_moderate = can_moderate

    @property
    def can_public_read(self):
        """Gets the can_public_read of this UserEntityPermissions.  # noqa: E501

        Is this entity considered public?  # noqa: E501

        :return: The can_public_read of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_public_read

    @can_public_read.setter
    def can_public_read(self, can_public_read):
        """Sets the can_public_read of this UserEntityPermissions.

        Is this entity considered public?  # noqa: E501

        :param can_public_read: The can_public_read of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_public_read = can_public_read

    @property
    def can_upload(self):
        """Gets the can_upload of this UserEntityPermissions.  # noqa: E501

        Are there any access requirements precluding the user from uploading into this entity (folder or project)?  # noqa: E501

        :return: The can_upload of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_upload

    @can_upload.setter
    def can_upload(self, can_upload):
        """Sets the can_upload of this UserEntityPermissions.

        Are there any access requirements precluding the user from uploading into this entity (folder or project)?  # noqa: E501

        :param can_upload: The can_upload of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_upload = can_upload

    @property
    def can_view(self):
        """Gets the can_view of this UserEntityPermissions.  # noqa: E501

        Can the user view this entity?  # noqa: E501

        :return: The can_view of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_view

    @can_view.setter
    def can_view(self, can_view):
        """Sets the can_view of this UserEntityPermissions.

        Can the user view this entity?  # noqa: E501

        :param can_view: The can_view of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._can_view = can_view

    @property
    def is_certification_required(self):
        """Gets the is_certification_required of this UserEntityPermissions.  # noqa: E501

        Is the certification requirement enabled for the project of the entity?  # noqa: E501

        :return: The is_certification_required of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._is_certification_required

    @is_certification_required.setter
    def is_certification_required(self, is_certification_required):
        """Sets the is_certification_required of this UserEntityPermissions.

        Is the certification requirement enabled for the project of the entity?  # noqa: E501

        :param is_certification_required: The is_certification_required of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._is_certification_required = is_certification_required

    @property
    def is_certified_user(self):
        """Gets the is_certified_user of this UserEntityPermissions.  # noqa: E501

        Is this user certified?  # noqa: E501

        :return: The is_certified_user of this UserEntityPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._is_certified_user

    @is_certified_user.setter
    def is_certified_user(self, is_certified_user):
        """Sets the is_certified_user of this UserEntityPermissions.

        Is this user certified?  # noqa: E501

        :param is_certified_user: The is_certified_user of this UserEntityPermissions.  # noqa: E501
        :type: bool
        """

        self._is_certified_user = is_certified_user

    @property
    def owner_principal_id(self):
        """Gets the owner_principal_id of this UserEntityPermissions.  # noqa: E501

        The principal ID of the entity's owner (i.e. the entity's 'createdBy')'   # noqa: E501

        :return: The owner_principal_id of this UserEntityPermissions.  # noqa: E501
        :rtype: float
        """
        return self._owner_principal_id

    @owner_principal_id.setter
    def owner_principal_id(self, owner_principal_id):
        """Sets the owner_principal_id of this UserEntityPermissions.

        The principal ID of the entity's owner (i.e. the entity's 'createdBy')'   # noqa: E501

        :param owner_principal_id: The owner_principal_id of this UserEntityPermissions.  # noqa: E501
        :type: float
        """

        self._owner_principal_id = owner_principal_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserEntityPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserEntityPermissions):
            return True

        return self.to_dict() != other.to_dict()
