# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class MembershipRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'created_on': 'str',
        'expires_on': 'str',
        'id': 'str',
        'message': 'str',
        'team_id': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'expires_on': 'expiresOn',
        'id': 'id',
        'message': 'message',
        'team_id': 'teamId',
        'user_id': 'userId'
    }

    def __init__(self, created_by=None, created_on=None, expires_on=None, id=None, message=None, team_id=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """MembershipRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_on = None
        self._expires_on = None
        self._id = None
        self._message = None
        self._team_id = None
        self._user_id = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if expires_on is not None:
            self.expires_on = expires_on
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if team_id is not None:
            self.team_id = team_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def created_by(self):
        """Gets the created_by of this MembershipRequest.  # noqa: E501

        The ID of the user that created this MembershipRequest.  # noqa: E501

        :return: The created_by of this MembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MembershipRequest.

        The ID of the user that created this MembershipRequest.  # noqa: E501

        :param created_by: The created_by of this MembershipRequest.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this MembershipRequest.  # noqa: E501

        The date this MembershipRequest was created.  # noqa: E501

        :return: The created_on of this MembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this MembershipRequest.

        The date this MembershipRequest was created.  # noqa: E501

        :param created_on: The created_on of this MembershipRequest.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def expires_on(self):
        """Gets the expires_on of this MembershipRequest.  # noqa: E501

        The date this MembershipRequest expires (optional).  # noqa: E501

        :return: The expires_on of this MembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this MembershipRequest.

        The date this MembershipRequest expires (optional).  # noqa: E501

        :param expires_on: The expires_on of this MembershipRequest.  # noqa: E501
        :type: str
        """

        self._expires_on = expires_on

    @property
    def id(self):
        """Gets the id of this MembershipRequest.  # noqa: E501

        The id of the MembershipRequest.  # noqa: E501

        :return: The id of this MembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MembershipRequest.

        The id of the MembershipRequest.  # noqa: E501

        :param id: The id of this MembershipRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this MembershipRequest.  # noqa: E501

        The request message (optional).  # noqa: E501

        :return: The message of this MembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MembershipRequest.

        The request message (optional).  # noqa: E501

        :param message: The message of this MembershipRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def team_id(self):
        """Gets the team_id of this MembershipRequest.  # noqa: E501

        The id of the Team to which the request is sent.  # noqa: E501

        :return: The team_id of this MembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this MembershipRequest.

        The id of the Team to which the request is sent.  # noqa: E501

        :param team_id: The team_id of this MembershipRequest.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def user_id(self):
        """Gets the user_id of this MembershipRequest.  # noqa: E501

        The id of the user for whom membership is requested.  # noqa: E501

        :return: The user_id of this MembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MembershipRequest.

        The id of the user for whom membership is requested.  # noqa: E501

        :param user_id: The user_id of this MembershipRequest.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MembershipRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MembershipRequest):
            return True

        return self.to_dict() != other.to_dict()
