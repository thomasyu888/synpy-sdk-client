# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class EntityChildrenResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next_page_token': 'str',
        'page': 'list[EntityHeader]',
        'sum_file_sizes_bytes': 'int',
        'total_child_count': 'int'
    }

    attribute_map = {
        'next_page_token': 'nextPageToken',
        'page': 'page',
        'sum_file_sizes_bytes': 'sumFileSizesBytes',
        'total_child_count': 'totalChildCount'
    }

    def __init__(self, next_page_token=None, page=None, sum_file_sizes_bytes=None, total_child_count=None, local_vars_configuration=None):  # noqa: E501
        """EntityChildrenResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._next_page_token = None
        self._page = None
        self._sum_file_sizes_bytes = None
        self._total_child_count = None
        self.discriminator = None

        if next_page_token is not None:
            self.next_page_token = next_page_token
        if page is not None:
            self.page = page
        if sum_file_sizes_bytes is not None:
            self.sum_file_sizes_bytes = sum_file_sizes_bytes
        if total_child_count is not None:
            self.total_child_count = total_child_count

    @property
    def next_page_token(self):
        """Gets the next_page_token of this EntityChildrenResponse.  # noqa: E501

        Token that can be used to get the next page. Null if there are no more results.  # noqa: E501

        :return: The next_page_token of this EntityChildrenResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this EntityChildrenResponse.

        Token that can be used to get the next page. Null if there are no more results.  # noqa: E501

        :param next_page_token: The next_page_token of this EntityChildrenResponse.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def page(self):
        """Gets the page of this EntityChildrenResponse.  # noqa: E501

        The headers of each child.  # noqa: E501

        :return: The page of this EntityChildrenResponse.  # noqa: E501
        :rtype: list[EntityHeader]
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this EntityChildrenResponse.

        The headers of each child.  # noqa: E501

        :param page: The page of this EntityChildrenResponse.  # noqa: E501
        :type: list[EntityHeader]
        """

        self._page = page

    @property
    def sum_file_sizes_bytes(self):
        """Gets the sum_file_sizes_bytes of this EntityChildrenResponse.  # noqa: E501

        The sum of the file sizes (bytes) with the requested parentId and types. Only returned if requested.  # noqa: E501

        :return: The sum_file_sizes_bytes of this EntityChildrenResponse.  # noqa: E501
        :rtype: int
        """
        return self._sum_file_sizes_bytes

    @sum_file_sizes_bytes.setter
    def sum_file_sizes_bytes(self, sum_file_sizes_bytes):
        """Sets the sum_file_sizes_bytes of this EntityChildrenResponse.

        The sum of the file sizes (bytes) with the requested parentId and types. Only returned if requested.  # noqa: E501

        :param sum_file_sizes_bytes: The sum_file_sizes_bytes of this EntityChildrenResponse.  # noqa: E501
        :type: int
        """

        self._sum_file_sizes_bytes = sum_file_sizes_bytes

    @property
    def total_child_count(self):
        """Gets the total_child_count of this EntityChildrenResponse.  # noqa: E501

        The total number of children with the requested parentId and types. Only returned if requested.  # noqa: E501

        :return: The total_child_count of this EntityChildrenResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_child_count

    @total_child_count.setter
    def total_child_count(self, total_child_count):
        """Sets the total_child_count of this EntityChildrenResponse.

        The total number of children with the requested parentId and types. Only returned if requested.  # noqa: E501

        :param total_child_count: The total_child_count of this EntityChildrenResponse.  # noqa: E501
        :type: int
        """

        self._total_child_count = total_child_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityChildrenResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityChildrenResponse):
            return True

        return self.to_dict() != other.to_dict()
