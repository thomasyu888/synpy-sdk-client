# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class DoiAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creators': 'list[DoiCreator]',
        'publication_year': 'int',
        'resource_type': 'DoiResourceType',
        'titles': 'list[DoiTitle]'
    }

    attribute_map = {
        'creators': 'creators',
        'publication_year': 'publicationYear',
        'resource_type': 'resourceType',
        'titles': 'titles'
    }

    def __init__(self, creators=None, publication_year=None, resource_type=None, titles=None, local_vars_configuration=None):  # noqa: E501
        """DoiAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._creators = None
        self._publication_year = None
        self._resource_type = None
        self._titles = None
        self.discriminator = None

        if creators is not None:
            self.creators = creators
        if publication_year is not None:
            self.publication_year = publication_year
        if resource_type is not None:
            self.resource_type = resource_type
        if titles is not None:
            self.titles = titles

    @property
    def creators(self):
        """Gets the creators of this DoiAllOf.  # noqa: E501

        The main researchers involved in producing the data, or the authors of the publication, in priority order.   # noqa: E501

        :return: The creators of this DoiAllOf.  # noqa: E501
        :rtype: list[DoiCreator]
        """
        return self._creators

    @creators.setter
    def creators(self, creators):
        """Sets the creators of this DoiAllOf.

        The main researchers involved in producing the data, or the authors of the publication, in priority order.   # noqa: E501

        :param creators: The creators of this DoiAllOf.  # noqa: E501
        :type: list[DoiCreator]
        """

        self._creators = creators

    @property
    def publication_year(self):
        """Gets the publication_year of this DoiAllOf.  # noqa: E501

        The year that this resource became publicly accessible. Must be in YYYY format.  # noqa: E501

        :return: The publication_year of this DoiAllOf.  # noqa: E501
        :rtype: int
        """
        return self._publication_year

    @publication_year.setter
    def publication_year(self, publication_year):
        """Sets the publication_year of this DoiAllOf.

        The year that this resource became publicly accessible. Must be in YYYY format.  # noqa: E501

        :param publication_year: The publication_year of this DoiAllOf.  # noqa: E501
        :type: int
        """

        self._publication_year = publication_year

    @property
    def resource_type(self):
        """Gets the resource_type of this DoiAllOf.  # noqa: E501


        :return: The resource_type of this DoiAllOf.  # noqa: E501
        :rtype: DoiResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DoiAllOf.


        :param resource_type: The resource_type of this DoiAllOf.  # noqa: E501
        :type: DoiResourceType
        """

        self._resource_type = resource_type

    @property
    def titles(self):
        """Gets the titles of this DoiAllOf.  # noqa: E501

        A name or title by which a resource is known.  # noqa: E501

        :return: The titles of this DoiAllOf.  # noqa: E501
        :rtype: list[DoiTitle]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """Sets the titles of this DoiAllOf.

        A name or title by which a resource is known.  # noqa: E501

        :param titles: The titles of this DoiAllOf.  # noqa: E501
        :type: list[DoiTitle]
        """

        self._titles = titles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DoiAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DoiAllOf):
            return True

        return self.to_dict() != other.to_dict()
