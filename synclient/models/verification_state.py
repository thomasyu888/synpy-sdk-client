# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class VerificationState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'created_on': 'str',
        'notes': 'str',
        'reason': 'str',
        'state': 'VerificationStateEnum'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'notes': 'notes',
        'reason': 'reason',
        'state': 'state'
    }

    def __init__(self, created_by=None, created_on=None, notes=None, reason=None, state=None, local_vars_configuration=None):  # noqa: E501
        """VerificationState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_on = None
        self._notes = None
        self._reason = None
        self._state = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if notes is not None:
            self.notes = notes
        if reason is not None:
            self.reason = reason
        if state is not None:
            self.state = state

    @property
    def created_by(self):
        """Gets the created_by of this VerificationState.  # noqa: E501

        The principal ID of the user who created this object  # noqa: E501

        :return: The created_by of this VerificationState.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VerificationState.

        The principal ID of the user who created this object  # noqa: E501

        :param created_by: The created_by of this VerificationState.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this VerificationState.  # noqa: E501

        The date and time this object was created  # noqa: E501

        :return: The created_on of this VerificationState.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this VerificationState.

        The date and time this object was created  # noqa: E501

        :param created_on: The created_on of this VerificationState.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def notes(self):
        """Gets the notes of this VerificationState.  # noqa: E501

        Additional notes that can be set by the ACT team and that is not exposed to the end user.  # noqa: E501

        :return: The notes of this VerificationState.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this VerificationState.

        Additional notes that can be set by the ACT team and that is not exposed to the end user.  # noqa: E501

        :param notes: The notes of this VerificationState.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def reason(self):
        """Gets the reason of this VerificationState.  # noqa: E501

        The reason for putting the verification submission in this state.  # noqa: E501

        :return: The reason of this VerificationState.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this VerificationState.

        The reason for putting the verification submission in this state.  # noqa: E501

        :param reason: The reason of this VerificationState.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def state(self):
        """Gets the state of this VerificationState.  # noqa: E501


        :return: The state of this VerificationState.  # noqa: E501
        :rtype: VerificationStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VerificationState.


        :param state: The state of this VerificationState.  # noqa: E501
        :type: VerificationStateEnum
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerificationState):
            return True

        return self.to_dict() != other.to_dict()
