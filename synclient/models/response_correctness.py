# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ResponseCorrectness(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_correct': 'bool',
        'question': 'Question',
        'response': 'QuestionResponse'
    }

    attribute_map = {
        'is_correct': 'isCorrect',
        'question': 'question',
        'response': 'response'
    }

    def __init__(self, is_correct=None, question=None, response=None, local_vars_configuration=None):  # noqa: E501
        """ResponseCorrectness - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_correct = None
        self._question = None
        self._response = None
        self.discriminator = None

        if is_correct is not None:
            self.is_correct = is_correct
        if question is not None:
            self.question = question
        if response is not None:
            self.response = response

    @property
    def is_correct(self):
        """Gets the is_correct of this ResponseCorrectness.  # noqa: E501

        Is the response correct?  # noqa: E501

        :return: The is_correct of this ResponseCorrectness.  # noqa: E501
        :rtype: bool
        """
        return self._is_correct

    @is_correct.setter
    def is_correct(self, is_correct):
        """Sets the is_correct of this ResponseCorrectness.

        Is the response correct?  # noqa: E501

        :param is_correct: The is_correct of this ResponseCorrectness.  # noqa: E501
        :type: bool
        """

        self._is_correct = is_correct

    @property
    def question(self):
        """Gets the question of this ResponseCorrectness.  # noqa: E501


        :return: The question of this ResponseCorrectness.  # noqa: E501
        :rtype: Question
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this ResponseCorrectness.


        :param question: The question of this ResponseCorrectness.  # noqa: E501
        :type: Question
        """

        self._question = question

    @property
    def response(self):
        """Gets the response of this ResponseCorrectness.  # noqa: E501


        :return: The response of this ResponseCorrectness.  # noqa: E501
        :rtype: QuestionResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ResponseCorrectness.


        :param response: The response of this ResponseCorrectness.  # noqa: E501
        :type: QuestionResponse
        """

        self._response = response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseCorrectness):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseCorrectness):
            return True

        return self.to_dict() != other.to_dict()
