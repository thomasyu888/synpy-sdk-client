# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class DiscussionReplyBundle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'created_on': 'str',
        'etag': 'str',
        'forum_id': 'str',
        'id': 'str',
        'is_deleted': 'bool',
        'is_edited': 'bool',
        'message_key': 'str',
        'modified_on': 'str',
        'project_id': 'str',
        'thread_id': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'etag': 'etag',
        'forum_id': 'forumId',
        'id': 'id',
        'is_deleted': 'isDeleted',
        'is_edited': 'isEdited',
        'message_key': 'messageKey',
        'modified_on': 'modifiedOn',
        'project_id': 'projectId',
        'thread_id': 'threadId'
    }

    def __init__(self, created_by=None, created_on=None, etag=None, forum_id=None, id=None, is_deleted=None, is_edited=None, message_key=None, modified_on=None, project_id=None, thread_id=None, local_vars_configuration=None):  # noqa: E501
        """DiscussionReplyBundle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_on = None
        self._etag = None
        self._forum_id = None
        self._id = None
        self._is_deleted = None
        self._is_edited = None
        self._message_key = None
        self._modified_on = None
        self._project_id = None
        self._thread_id = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if etag is not None:
            self.etag = etag
        if forum_id is not None:
            self.forum_id = forum_id
        if id is not None:
            self.id = id
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if is_edited is not None:
            self.is_edited = is_edited
        if message_key is not None:
            self.message_key = message_key
        if modified_on is not None:
            self.modified_on = modified_on
        if project_id is not None:
            self.project_id = project_id
        if thread_id is not None:
            self.thread_id = thread_id

    @property
    def created_by(self):
        """Gets the created_by of this DiscussionReplyBundle.  # noqa: E501

        The id of the user that created this Reply  # noqa: E501

        :return: The created_by of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DiscussionReplyBundle.

        The id of the user that created this Reply  # noqa: E501

        :param created_by: The created_by of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this DiscussionReplyBundle.  # noqa: E501

        The timestamp when this Reply was created  # noqa: E501

        :return: The created_on of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this DiscussionReplyBundle.

        The timestamp when this Reply was created  # noqa: E501

        :param created_on: The created_on of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def etag(self):
        """Gets the etag of this DiscussionReplyBundle.  # noqa: E501

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.   # noqa: E501

        :return: The etag of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DiscussionReplyBundle.

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.   # noqa: E501

        :param etag: The etag of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def forum_id(self):
        """Gets the forum_id of this DiscussionReplyBundle.  # noqa: E501

        The ID of the forum this Reply belongs to  # noqa: E501

        :return: The forum_id of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._forum_id

    @forum_id.setter
    def forum_id(self, forum_id):
        """Sets the forum_id of this DiscussionReplyBundle.

        The ID of the forum this Reply belongs to  # noqa: E501

        :param forum_id: The forum_id of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._forum_id = forum_id

    @property
    def id(self):
        """Gets the id of this DiscussionReplyBundle.  # noqa: E501

        The ID of the reply  # noqa: E501

        :return: The id of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscussionReplyBundle.

        The ID of the reply  # noqa: E501

        :param id: The id of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this DiscussionReplyBundle.  # noqa: E501

        Has this Reply been deleted?  # noqa: E501

        :return: The is_deleted of this DiscussionReplyBundle.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this DiscussionReplyBundle.

        Has this Reply been deleted?  # noqa: E501

        :param is_deleted: The is_deleted of this DiscussionReplyBundle.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_edited(self):
        """Gets the is_edited of this DiscussionReplyBundle.  # noqa: E501

        Has the author edited this Reply?  # noqa: E501

        :return: The is_edited of this DiscussionReplyBundle.  # noqa: E501
        :rtype: bool
        """
        return self._is_edited

    @is_edited.setter
    def is_edited(self, is_edited):
        """Sets the is_edited of this DiscussionReplyBundle.

        Has the author edited this Reply?  # noqa: E501

        :param is_edited: The is_edited of this DiscussionReplyBundle.  # noqa: E501
        :type: bool
        """

        self._is_edited = is_edited

    @property
    def message_key(self):
        """Gets the message_key of this DiscussionReplyBundle.  # noqa: E501

        The S3 key where the actual message stored  # noqa: E501

        :return: The message_key of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._message_key

    @message_key.setter
    def message_key(self, message_key):
        """Sets the message_key of this DiscussionReplyBundle.

        The S3 key where the actual message stored  # noqa: E501

        :param message_key: The message_key of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._message_key = message_key

    @property
    def modified_on(self):
        """Gets the modified_on of this DiscussionReplyBundle.  # noqa: E501

        The timestamp when this Reply was last modified  # noqa: E501

        :return: The modified_on of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this DiscussionReplyBundle.

        The timestamp when this Reply was last modified  # noqa: E501

        :param modified_on: The modified_on of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def project_id(self):
        """Gets the project_id of this DiscussionReplyBundle.  # noqa: E501

        The ID of the project this Reply belongs to  # noqa: E501

        :return: The project_id of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DiscussionReplyBundle.

        The ID of the project this Reply belongs to  # noqa: E501

        :param project_id: The project_id of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def thread_id(self):
        """Gets the thread_id of this DiscussionReplyBundle.  # noqa: E501

        The ID of the thread this Reply belongs to  # noqa: E501

        :return: The thread_id of this DiscussionReplyBundle.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this DiscussionReplyBundle.

        The ID of the thread this Reply belongs to  # noqa: E501

        :param thread_id: The thread_id of this DiscussionReplyBundle.  # noqa: E501
        :type: str
        """

        self._thread_id = thread_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscussionReplyBundle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscussionReplyBundle):
            return True

        return self.to_dict() != other.to_dict()
