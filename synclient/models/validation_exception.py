# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ValidationException(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'causing_exceptions': 'list[ValidationException]',
        'keyword': 'str',
        'message': 'str',
        'pointer_to_violation': 'str',
        'schema_location': 'str'
    }

    attribute_map = {
        'causing_exceptions': 'causingExceptions',
        'keyword': 'keyword',
        'message': 'message',
        'pointer_to_violation': 'pointerToViolation',
        'schema_location': 'schemaLocation'
    }

    def __init__(self, causing_exceptions=None, keyword=None, message=None, pointer_to_violation=None, schema_location=None, local_vars_configuration=None):  # noqa: E501
        """ValidationException - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._causing_exceptions = None
        self._keyword = None
        self._message = None
        self._pointer_to_violation = None
        self._schema_location = None
        self.discriminator = None

        if causing_exceptions is not None:
            self.causing_exceptions = causing_exceptions
        if keyword is not None:
            self.keyword = keyword
        if message is not None:
            self.message = message
        if pointer_to_violation is not None:
            self.pointer_to_violation = pointer_to_violation
        if schema_location is not None:
            self.schema_location = schema_location

    @property
    def causing_exceptions(self):
        """Gets the causing_exceptions of this ValidationException.  # noqa: E501

        An array of sub-exceptions.  # noqa: E501

        :return: The causing_exceptions of this ValidationException.  # noqa: E501
        :rtype: list[ValidationException]
        """
        return self._causing_exceptions

    @causing_exceptions.setter
    def causing_exceptions(self, causing_exceptions):
        """Sets the causing_exceptions of this ValidationException.

        An array of sub-exceptions.  # noqa: E501

        :param causing_exceptions: The causing_exceptions of this ValidationException.  # noqa: E501
        :type: list[ValidationException]
        """

        self._causing_exceptions = causing_exceptions

    @property
    def keyword(self):
        """Gets the keyword of this ValidationException.  # noqa: E501

        The JSON schema keyword which was violated.  # noqa: E501

        :return: The keyword of this ValidationException.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this ValidationException.

        The JSON schema keyword which was violated.  # noqa: E501

        :param keyword: The keyword of this ValidationException.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def message(self):
        """Gets the message of this ValidationException.  # noqa: E501

        The description of the validation failure.  # noqa: E501

        :return: The message of this ValidationException.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ValidationException.

        The description of the validation failure.  # noqa: E501

        :param message: The message of this ValidationException.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def pointer_to_violation(self):
        """Gets the pointer_to_violation of this ValidationException.  # noqa: E501

        A JSON Pointer denoting the path from the input document root to its fragment which caused the validation failure.  # noqa: E501

        :return: The pointer_to_violation of this ValidationException.  # noqa: E501
        :rtype: str
        """
        return self._pointer_to_violation

    @pointer_to_violation.setter
    def pointer_to_violation(self, pointer_to_violation):
        """Sets the pointer_to_violation of this ValidationException.

        A JSON Pointer denoting the path from the input document root to its fragment which caused the validation failure.  # noqa: E501

        :param pointer_to_violation: The pointer_to_violation of this ValidationException.  # noqa: E501
        :type: str
        """

        self._pointer_to_violation = pointer_to_violation

    @property
    def schema_location(self):
        """Gets the schema_location of this ValidationException.  # noqa: E501

        A JSON Pointer denoting the path from the schema JSON root to the violated keyword.  # noqa: E501

        :return: The schema_location of this ValidationException.  # noqa: E501
        :rtype: str
        """
        return self._schema_location

    @schema_location.setter
    def schema_location(self, schema_location):
        """Sets the schema_location of this ValidationException.

        A JSON Pointer denoting the path from the schema JSON root to the violated keyword.  # noqa: E501

        :param schema_location: The schema_location of this ValidationException.  # noqa: E501
        :type: str
        """

        self._schema_location = schema_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationException):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidationException):
            return True

        return self.to_dict() != other.to_dict()
