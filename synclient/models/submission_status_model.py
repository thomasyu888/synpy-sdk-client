# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class SubmissionStatusModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'AnnotationsAnnotation',
        'can_cancel': 'bool',
        'cancel_requested': 'bool',
        'entity_id': 'str',
        'etag': 'str',
        'id': 'str',
        'modified_on': 'str',
        'status': 'SubmissionStatusEnum',
        'status_version': 'float',
        'submission_annotations': 'AnnotationsV2',
        'version_number': 'int'
    }

    attribute_map = {
        'annotations': 'annotations',
        'can_cancel': 'canCancel',
        'cancel_requested': 'cancelRequested',
        'entity_id': 'entityId',
        'etag': 'etag',
        'id': 'id',
        'modified_on': 'modifiedOn',
        'status': 'status',
        'status_version': 'statusVersion',
        'submission_annotations': 'submissionAnnotations',
        'version_number': 'versionNumber'
    }

    def __init__(self, annotations=None, can_cancel=None, cancel_requested=None, entity_id=None, etag=None, id=None, modified_on=None, status=None, status_version=None, submission_annotations=None, version_number=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionStatusModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._can_cancel = None
        self._cancel_requested = None
        self._entity_id = None
        self._etag = None
        self._id = None
        self._modified_on = None
        self._status = None
        self._status_version = None
        self._submission_annotations = None
        self._version_number = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if can_cancel is not None:
            self.can_cancel = can_cancel
        if cancel_requested is not None:
            self.cancel_requested = cancel_requested
        if entity_id is not None:
            self.entity_id = entity_id
        if etag is not None:
            self.etag = etag
        if id is not None:
            self.id = id
        if modified_on is not None:
            self.modified_on = modified_on
        if status is not None:
            self.status = status
        if status_version is not None:
            self.status_version = status_version
        if submission_annotations is not None:
            self.submission_annotations = submission_annotations
        if version_number is not None:
            self.version_number = version_number

    @property
    def annotations(self):
        """Gets the annotations of this SubmissionStatusModel.  # noqa: E501


        :return: The annotations of this SubmissionStatusModel.  # noqa: E501
        :rtype: AnnotationsAnnotation
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this SubmissionStatusModel.


        :param annotations: The annotations of this SubmissionStatusModel.  # noqa: E501
        :type: AnnotationsAnnotation
        """

        self._annotations = annotations

    @property
    def can_cancel(self):
        """Gets the can_cancel of this SubmissionStatusModel.  # noqa: E501

        Can this submission be cancelled? By default, this will be set to False. Users can read this value. Only the queue's scoring application can change this value.   # noqa: E501

        :return: The can_cancel of this SubmissionStatusModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_cancel

    @can_cancel.setter
    def can_cancel(self, can_cancel):
        """Sets the can_cancel of this SubmissionStatusModel.

        Can this submission be cancelled? By default, this will be set to False. Users can read this value. Only the queue's scoring application can change this value.   # noqa: E501

        :param can_cancel: The can_cancel of this SubmissionStatusModel.  # noqa: E501
        :type: bool
        """

        self._can_cancel = can_cancel

    @property
    def cancel_requested(self):
        """Gets the cancel_requested of this SubmissionStatusModel.  # noqa: E501

        Has user requested to cancel this submission? By default, this will be set to False. Submission owner can read and request to change this value.  # noqa: E501

        :return: The cancel_requested of this SubmissionStatusModel.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_requested

    @cancel_requested.setter
    def cancel_requested(self, cancel_requested):
        """Sets the cancel_requested of this SubmissionStatusModel.

        Has user requested to cancel this submission? By default, this will be set to False. Submission owner can read and request to change this value.  # noqa: E501

        :param cancel_requested: The cancel_requested of this SubmissionStatusModel.  # noqa: E501
        :type: bool
        """

        self._cancel_requested = cancel_requested

    @property
    def entity_id(self):
        """Gets the entity_id of this SubmissionStatusModel.  # noqa: E501

        The Synapse ID of the Entity in this Submission.  # noqa: E501

        :return: The entity_id of this SubmissionStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SubmissionStatusModel.

        The Synapse ID of the Entity in this Submission.  # noqa: E501

        :param entity_id: The entity_id of this SubmissionStatusModel.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def etag(self):
        """Gets the etag of this SubmissionStatusModel.  # noqa: E501

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. The eTag changes every time an SubmissionStatus is updated; it is used to detect when a client's copy of an SubmissionStatus is out-of-date.   # noqa: E501

        :return: The etag of this SubmissionStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this SubmissionStatusModel.

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. The eTag changes every time an SubmissionStatus is updated; it is used to detect when a client's copy of an SubmissionStatus is out-of-date.   # noqa: E501

        :param etag: The etag of this SubmissionStatusModel.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this SubmissionStatusModel.  # noqa: E501

        The unique, immutable Synapse ID of the Submission.  # noqa: E501

        :return: The id of this SubmissionStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionStatusModel.

        The unique, immutable Synapse ID of the Submission.  # noqa: E501

        :param id: The id of this SubmissionStatusModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_on(self):
        """Gets the modified_on of this SubmissionStatusModel.  # noqa: E501

        The date on which this SubmissionStatus was last modified.  # noqa: E501

        :return: The modified_on of this SubmissionStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this SubmissionStatusModel.

        The date on which this SubmissionStatus was last modified.  # noqa: E501

        :param modified_on: The modified_on of this SubmissionStatusModel.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def status(self):
        """Gets the status of this SubmissionStatusModel.  # noqa: E501


        :return: The status of this SubmissionStatusModel.  # noqa: E501
        :rtype: SubmissionStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubmissionStatusModel.


        :param status: The status of this SubmissionStatusModel.  # noqa: E501
        :type: SubmissionStatusEnum
        """

        self._status = status

    @property
    def status_version(self):
        """Gets the status_version of this SubmissionStatusModel.  # noqa: E501

        A version of the status, auto-generated and auto-incremented by the system and read-only to the client.  # noqa: E501

        :return: The status_version of this SubmissionStatusModel.  # noqa: E501
        :rtype: float
        """
        return self._status_version

    @status_version.setter
    def status_version(self, status_version):
        """Sets the status_version of this SubmissionStatusModel.

        A version of the status, auto-generated and auto-incremented by the system and read-only to the client.  # noqa: E501

        :param status_version: The status_version of this SubmissionStatusModel.  # noqa: E501
        :type: float
        """

        self._status_version = status_version

    @property
    def submission_annotations(self):
        """Gets the submission_annotations of this SubmissionStatusModel.  # noqa: E501


        :return: The submission_annotations of this SubmissionStatusModel.  # noqa: E501
        :rtype: AnnotationsV2
        """
        return self._submission_annotations

    @submission_annotations.setter
    def submission_annotations(self, submission_annotations):
        """Sets the submission_annotations of this SubmissionStatusModel.


        :param submission_annotations: The submission_annotations of this SubmissionStatusModel.  # noqa: E501
        :type: AnnotationsV2
        """

        self._submission_annotations = submission_annotations

    @property
    def version_number(self):
        """Gets the version_number of this SubmissionStatusModel.  # noqa: E501

        The version number of the Entity in this Submission.  # noqa: E501

        :return: The version_number of this SubmissionStatusModel.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this SubmissionStatusModel.

        The version number of the Entity in this Submission.  # noqa: E501

        :param version_number: The version_number of this SubmissionStatusModel.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionStatusModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionStatusModel):
            return True

        return self.to_dict() != other.to_dict()
