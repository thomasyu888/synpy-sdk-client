# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class TeamMembershipStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'can_join': 'bool',
        'can_send_email': 'bool',
        'has_open_invitation': 'bool',
        'has_open_request': 'bool',
        'has_unmet_access_requirement': 'bool',
        'is_member': 'bool',
        'membership_approval_required': 'bool',
        'team_id': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'can_join': 'canJoin',
        'can_send_email': 'canSendEmail',
        'has_open_invitation': 'hasOpenInvitation',
        'has_open_request': 'hasOpenRequest',
        'has_unmet_access_requirement': 'hasUnmetAccessRequirement',
        'is_member': 'isMember',
        'membership_approval_required': 'membershipApprovalRequired',
        'team_id': 'teamId',
        'user_id': 'userId'
    }

    def __init__(self, can_join=None, can_send_email=None, has_open_invitation=None, has_open_request=None, has_unmet_access_requirement=None, is_member=None, membership_approval_required=None, team_id=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """TeamMembershipStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._can_join = None
        self._can_send_email = None
        self._has_open_invitation = None
        self._has_open_request = None
        self._has_unmet_access_requirement = None
        self._is_member = None
        self._membership_approval_required = None
        self._team_id = None
        self._user_id = None
        self.discriminator = None

        if can_join is not None:
            self.can_join = can_join
        if can_send_email is not None:
            self.can_send_email = can_send_email
        if has_open_invitation is not None:
            self.has_open_invitation = has_open_invitation
        if has_open_request is not None:
            self.has_open_request = has_open_request
        if has_unmet_access_requirement is not None:
            self.has_unmet_access_requirement = has_unmet_access_requirement
        if is_member is not None:
            self.is_member = is_member
        if membership_approval_required is not None:
            self.membership_approval_required = membership_approval_required
        if team_id is not None:
            self.team_id = team_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def can_join(self):
        """Gets the can_join of this TeamMembershipStatus.  # noqa: E501

        true if and only if the user requesting this status information can join the user to the team  # noqa: E501

        :return: The can_join of this TeamMembershipStatus.  # noqa: E501
        :rtype: bool
        """
        return self._can_join

    @can_join.setter
    def can_join(self, can_join):
        """Sets the can_join of this TeamMembershipStatus.

        true if and only if the user requesting this status information can join the user to the team  # noqa: E501

        :param can_join: The can_join of this TeamMembershipStatus.  # noqa: E501
        :type: bool
        """

        self._can_join = can_join

    @property
    def can_send_email(self):
        """Gets the can_send_email of this TeamMembershipStatus.  # noqa: E501

        true if and only if the user can send an email to the team  # noqa: E501

        :return: The can_send_email of this TeamMembershipStatus.  # noqa: E501
        :rtype: bool
        """
        return self._can_send_email

    @can_send_email.setter
    def can_send_email(self, can_send_email):
        """Sets the can_send_email of this TeamMembershipStatus.

        true if and only if the user can send an email to the team  # noqa: E501

        :param can_send_email: The can_send_email of this TeamMembershipStatus.  # noqa: E501
        :type: bool
        """

        self._can_send_email = can_send_email

    @property
    def has_open_invitation(self):
        """Gets the has_open_invitation of this TeamMembershipStatus.  # noqa: E501

        true if and only if the user has an open invitation to join the team  # noqa: E501

        :return: The has_open_invitation of this TeamMembershipStatus.  # noqa: E501
        :rtype: bool
        """
        return self._has_open_invitation

    @has_open_invitation.setter
    def has_open_invitation(self, has_open_invitation):
        """Sets the has_open_invitation of this TeamMembershipStatus.

        true if and only if the user has an open invitation to join the team  # noqa: E501

        :param has_open_invitation: The has_open_invitation of this TeamMembershipStatus.  # noqa: E501
        :type: bool
        """

        self._has_open_invitation = has_open_invitation

    @property
    def has_open_request(self):
        """Gets the has_open_request of this TeamMembershipStatus.  # noqa: E501

        true if and only if the user has an open request to join the team  # noqa: E501

        :return: The has_open_request of this TeamMembershipStatus.  # noqa: E501
        :rtype: bool
        """
        return self._has_open_request

    @has_open_request.setter
    def has_open_request(self, has_open_request):
        """Sets the has_open_request of this TeamMembershipStatus.

        true if and only if the user has an open request to join the team  # noqa: E501

        :param has_open_request: The has_open_request of this TeamMembershipStatus.  # noqa: E501
        :type: bool
        """

        self._has_open_request = has_open_request

    @property
    def has_unmet_access_requirement(self):
        """Gets the has_unmet_access_requirement of this TeamMembershipStatus.  # noqa: E501

        true if and only if there is at least one unmet access requirement for the user on the team  # noqa: E501

        :return: The has_unmet_access_requirement of this TeamMembershipStatus.  # noqa: E501
        :rtype: bool
        """
        return self._has_unmet_access_requirement

    @has_unmet_access_requirement.setter
    def has_unmet_access_requirement(self, has_unmet_access_requirement):
        """Sets the has_unmet_access_requirement of this TeamMembershipStatus.

        true if and only if there is at least one unmet access requirement for the user on the team  # noqa: E501

        :param has_unmet_access_requirement: The has_unmet_access_requirement of this TeamMembershipStatus.  # noqa: E501
        :type: bool
        """

        self._has_unmet_access_requirement = has_unmet_access_requirement

    @property
    def is_member(self):
        """Gets the is_member of this TeamMembershipStatus.  # noqa: E501

        true if and only if the user is a member of the team  # noqa: E501

        :return: The is_member of this TeamMembershipStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_member

    @is_member.setter
    def is_member(self, is_member):
        """Sets the is_member of this TeamMembershipStatus.

        true if and only if the user is a member of the team  # noqa: E501

        :param is_member: The is_member of this TeamMembershipStatus.  # noqa: E501
        :type: bool
        """

        self._is_member = is_member

    @property
    def membership_approval_required(self):
        """Gets the membership_approval_required of this TeamMembershipStatus.  # noqa: E501

        true if and only if team admin approval is required for the user to join the team  # noqa: E501

        :return: The membership_approval_required of this TeamMembershipStatus.  # noqa: E501
        :rtype: bool
        """
        return self._membership_approval_required

    @membership_approval_required.setter
    def membership_approval_required(self, membership_approval_required):
        """Sets the membership_approval_required of this TeamMembershipStatus.

        true if and only if team admin approval is required for the user to join the team  # noqa: E501

        :param membership_approval_required: The membership_approval_required of this TeamMembershipStatus.  # noqa: E501
        :type: bool
        """

        self._membership_approval_required = membership_approval_required

    @property
    def team_id(self):
        """Gets the team_id of this TeamMembershipStatus.  # noqa: E501

        The id of the Team.  # noqa: E501

        :return: The team_id of this TeamMembershipStatus.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TeamMembershipStatus.

        The id of the Team.  # noqa: E501

        :param team_id: The team_id of this TeamMembershipStatus.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def user_id(self):
        """Gets the user_id of this TeamMembershipStatus.  # noqa: E501

        The principal id of the user.  # noqa: E501

        :return: The user_id of this TeamMembershipStatus.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TeamMembershipStatus.

        The principal id of the user.  # noqa: E501

        :param user_id: The user_id of this TeamMembershipStatus.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamMembershipStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamMembershipStatus):
            return True

        return self.to_dict() != other.to_dict()
