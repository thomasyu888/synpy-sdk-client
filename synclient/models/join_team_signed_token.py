# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class JoinTeamSignedToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'concrete_type': 'str',
        'created_on': 'str',
        'expires_on': 'str',
        'hmac': 'str',
        'member_id': 'str',
        'team_id': 'str',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'concrete_type': 'concreteType',
        'created_on': 'createdOn',
        'expires_on': 'expiresOn',
        'hmac': 'hmac',
        'member_id': 'memberId',
        'team_id': 'teamId',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, concrete_type=None, created_on=None, expires_on=None, hmac=None, member_id=None, team_id=None, user_id=None, version=None, local_vars_configuration=None):  # noqa: E501
        """JoinTeamSignedToken - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._concrete_type = None
        self._created_on = None
        self._expires_on = None
        self._hmac = None
        self._member_id = None
        self._team_id = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if concrete_type is not None:
            self.concrete_type = concrete_type
        if created_on is not None:
            self.created_on = created_on
        if expires_on is not None:
            self.expires_on = expires_on
        if hmac is not None:
            self.hmac = hmac
        if member_id is not None:
            self.member_id = member_id
        if team_id is not None:
            self.team_id = team_id
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def concrete_type(self):
        """Gets the concrete_type of this JoinTeamSignedToken.  # noqa: E501

        Concrete Type  # noqa: E501

        :return: The concrete_type of this JoinTeamSignedToken.  # noqa: E501
        :rtype: str
        """
        return self._concrete_type

    @concrete_type.setter
    def concrete_type(self, concrete_type):
        """Sets the concrete_type of this JoinTeamSignedToken.

        Concrete Type  # noqa: E501

        :param concrete_type: The concrete_type of this JoinTeamSignedToken.  # noqa: E501
        :type: str
        """

        self._concrete_type = concrete_type

    @property
    def created_on(self):
        """Gets the created_on of this JoinTeamSignedToken.  # noqa: E501

        The date-time the token was generated.  # noqa: E501

        :return: The created_on of this JoinTeamSignedToken.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this JoinTeamSignedToken.

        The date-time the token was generated.  # noqa: E501

        :param created_on: The created_on of this JoinTeamSignedToken.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def expires_on(self):
        """Gets the expires_on of this JoinTeamSignedToken.  # noqa: E501

        The date-time when this token expires.  # noqa: E501

        :return: The expires_on of this JoinTeamSignedToken.  # noqa: E501
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this JoinTeamSignedToken.

        The date-time when this token expires.  # noqa: E501

        :param expires_on: The expires_on of this JoinTeamSignedToken.  # noqa: E501
        :type: str
        """

        self._expires_on = expires_on

    @property
    def hmac(self):
        """Gets the hmac of this JoinTeamSignedToken.  # noqa: E501

        The hash message authentication code for the message.  # noqa: E501

        :return: The hmac of this JoinTeamSignedToken.  # noqa: E501
        :rtype: str
        """
        return self._hmac

    @hmac.setter
    def hmac(self, hmac):
        """Sets the hmac of this JoinTeamSignedToken.

        The hash message authentication code for the message.  # noqa: E501

        :param hmac: The hmac of this JoinTeamSignedToken.  # noqa: E501
        :type: str
        """

        self._hmac = hmac

    @property
    def member_id(self):
        """Gets the member_id of this JoinTeamSignedToken.  # noqa: E501

        The ID of the new team member.  # noqa: E501

        :return: The member_id of this JoinTeamSignedToken.  # noqa: E501
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this JoinTeamSignedToken.

        The ID of the new team member.  # noqa: E501

        :param member_id: The member_id of this JoinTeamSignedToken.  # noqa: E501
        :type: str
        """

        self._member_id = member_id

    @property
    def team_id(self):
        """Gets the team_id of this JoinTeamSignedToken.  # noqa: E501

        The ID of the team which the user was invited to join.  # noqa: E501

        :return: The team_id of this JoinTeamSignedToken.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this JoinTeamSignedToken.

        The ID of the team which the user was invited to join.  # noqa: E501

        :param team_id: The team_id of this JoinTeamSignedToken.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def user_id(self):
        """Gets the user_id of this JoinTeamSignedToken.  # noqa: E501

        The ID of the user who is acting to add the new member to the Team. The HMAC in the token authenticates that the request is being made by this user.'   # noqa: E501

        :return: The user_id of this JoinTeamSignedToken.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JoinTeamSignedToken.

        The ID of the user who is acting to add the new member to the Team. The HMAC in the token authenticates that the request is being made by this user.'   # noqa: E501

        :param user_id: The user_id of this JoinTeamSignedToken.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this JoinTeamSignedToken.  # noqa: E501

        The version of the key used to generate the HMAC.  # noqa: E501

        :return: The version of this JoinTeamSignedToken.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JoinTeamSignedToken.

        The version of the key used to generate the HMAC.  # noqa: E501

        :param version: The version of this JoinTeamSignedToken.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JoinTeamSignedToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JoinTeamSignedToken):
            return True

        return self.to_dict() != other.to_dict()
