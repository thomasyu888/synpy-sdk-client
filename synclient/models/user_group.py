# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class UserGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creation_date': 'str',
        'etag': 'str',
        'id': 'str',
        'is_individual': 'bool',
        'uri': 'str'
    }

    attribute_map = {
        'creation_date': 'creationDate',
        'etag': 'etag',
        'id': 'id',
        'is_individual': 'isIndividual',
        'uri': 'uri'
    }

    def __init__(self, creation_date=None, etag=None, id=None, is_individual=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """UserGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._creation_date = None
        self._etag = None
        self._id = None
        self._is_individual = None
        self._uri = None
        self.discriminator = None

        if creation_date is not None:
            self.creation_date = creation_date
        if etag is not None:
            self.etag = etag
        if id is not None:
            self.id = id
        if is_individual is not None:
            self.is_individual = is_individual
        if uri is not None:
            self.uri = uri

    @property
    def creation_date(self):
        """Gets the creation_date of this UserGroup.  # noqa: E501

        The date this user or group was created.  # noqa: E501

        :return: The creation_date of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this UserGroup.

        The date this user or group was created.  # noqa: E501

        :param creation_date: The creation_date of this UserGroup.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def etag(self):
        """Gets the etag of this UserGroup.  # noqa: E501

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.   # noqa: E501

        :return: The etag of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this UserGroup.

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.   # noqa: E501

        :param etag: The etag of this UserGroup.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this UserGroup.  # noqa: E501

        The id of either the user or group.  # noqa: E501

        :return: The id of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserGroup.

        The id of either the user or group.  # noqa: E501

        :param id: The id of this UserGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_individual(self):
        """Gets the is_individual of this UserGroup.  # noqa: E501

        True if this is a user, false if it is a group  # noqa: E501

        :return: The is_individual of this UserGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_individual

    @is_individual.setter
    def is_individual(self, is_individual):
        """Sets the is_individual of this UserGroup.

        True if this is a user, false if it is a group  # noqa: E501

        :param is_individual: The is_individual of this UserGroup.  # noqa: E501
        :type: bool
        """

        self._is_individual = is_individual

    @property
    def uri(self):
        """Gets the uri of this UserGroup.  # noqa: E501

        Uri  # noqa: E501

        :return: The uri of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this UserGroup.

        Uri  # noqa: E501

        :param uri: The uri of this UserGroup.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserGroup):
            return True

        return self.to_dict() != other.to_dict()
