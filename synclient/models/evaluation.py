# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class Evaluation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_source': 'str',
        'created_on': 'str',
        'description': 'str',
        'etag': 'str',
        'id': 'str',
        'name': 'str',
        'owner_id': 'str',
        'quota': 'SubmissionQuota',
        'status': 'EvaluationStatus',
        'submission_instructions_message': 'str',
        'submission_receipt_message': 'str'
    }

    attribute_map = {
        'content_source': 'contentSource',
        'created_on': 'createdOn',
        'description': 'description',
        'etag': 'etag',
        'id': 'id',
        'name': 'name',
        'owner_id': 'ownerId',
        'quota': 'quota',
        'status': 'status',
        'submission_instructions_message': 'submissionInstructionsMessage',
        'submission_receipt_message': 'submissionReceiptMessage'
    }

    def __init__(self, content_source=None, created_on=None, description=None, etag=None, id=None, name=None, owner_id=None, quota=None, status=None, submission_instructions_message=None, submission_receipt_message=None, local_vars_configuration=None):  # noqa: E501
        """Evaluation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_source = None
        self._created_on = None
        self._description = None
        self._etag = None
        self._id = None
        self._name = None
        self._owner_id = None
        self._quota = None
        self._status = None
        self._submission_instructions_message = None
        self._submission_receipt_message = None
        self.discriminator = None

        if content_source is not None:
            self.content_source = content_source
        if created_on is not None:
            self.created_on = created_on
        if description is not None:
            self.description = description
        if etag is not None:
            self.etag = etag
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if owner_id is not None:
            self.owner_id = owner_id
        if quota is not None:
            self.quota = quota
        if status is not None:
            self.status = status
        if submission_instructions_message is not None:
            self.submission_instructions_message = submission_instructions_message
        if submission_receipt_message is not None:
            self.submission_receipt_message = submission_receipt_message

    @property
    def content_source(self):
        """Gets the content_source of this Evaluation.  # noqa: E501

        The Synapse ID of the Entity to which this Evaluation belongs, e.g. a reference to a Synapse project.  # noqa: E501

        :return: The content_source of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._content_source

    @content_source.setter
    def content_source(self, content_source):
        """Sets the content_source of this Evaluation.

        The Synapse ID of the Entity to which this Evaluation belongs, e.g. a reference to a Synapse project.  # noqa: E501

        :param content_source: The content_source of this Evaluation.  # noqa: E501
        :type: str
        """

        self._content_source = content_source

    @property
    def created_on(self):
        """Gets the created_on of this Evaluation.  # noqa: E501

        The date on which Evaluation was created.  # noqa: E501

        :return: The created_on of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Evaluation.

        The date on which Evaluation was created.  # noqa: E501

        :param created_on: The created_on of this Evaluation.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this Evaluation.  # noqa: E501

        A text description of this Evaluation.  # noqa: E501

        :return: The description of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Evaluation.

        A text description of this Evaluation.  # noqa: E501

        :param description: The description of this Evaluation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Evaluation.  # noqa: E501

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. The eTag changes every time an Evaluation is updated; it is used to detect when a client's copy of an Evaluation is out-of-date.   # noqa: E501

        :return: The etag of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Evaluation.

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. The eTag changes every time an Evaluation is updated; it is used to detect when a client's copy of an Evaluation is out-of-date.   # noqa: E501

        :param etag: The etag of this Evaluation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Evaluation.  # noqa: E501

        The unique immutable ID for this Evaluation.  # noqa: E501

        :return: The id of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Evaluation.

        The unique immutable ID for this Evaluation.  # noqa: E501

        :param id: The id of this Evaluation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Evaluation.  # noqa: E501

        The name of this Evaluation  # noqa: E501

        :return: The name of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Evaluation.

        The name of this Evaluation  # noqa: E501

        :param name: The name of this Evaluation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Evaluation.  # noqa: E501

        The ID of the Synapse user who created this Evaluation.  # noqa: E501

        :return: The owner_id of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Evaluation.

        The ID of the Synapse user who created this Evaluation.  # noqa: E501

        :param owner_id: The owner_id of this Evaluation.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def quota(self):
        """Gets the quota of this Evaluation.  # noqa: E501


        :return: The quota of this Evaluation.  # noqa: E501
        :rtype: SubmissionQuota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Evaluation.


        :param quota: The quota of this Evaluation.  # noqa: E501
        :type: SubmissionQuota
        """

        self._quota = quota

    @property
    def status(self):
        """Gets the status of this Evaluation.  # noqa: E501


        :return: The status of this Evaluation.  # noqa: E501
        :rtype: EvaluationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Evaluation.


        :param status: The status of this Evaluation.  # noqa: E501
        :type: EvaluationStatus
        """

        self._status = status

    @property
    def submission_instructions_message(self):
        """Gets the submission_instructions_message of this Evaluation.  # noqa: E501

        Message to display to users detailing acceptable formatting for Submissions to this Evaluation.  # noqa: E501

        :return: The submission_instructions_message of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._submission_instructions_message

    @submission_instructions_message.setter
    def submission_instructions_message(self, submission_instructions_message):
        """Sets the submission_instructions_message of this Evaluation.

        Message to display to users detailing acceptable formatting for Submissions to this Evaluation.  # noqa: E501

        :param submission_instructions_message: The submission_instructions_message of this Evaluation.  # noqa: E501
        :type: str
        """

        self._submission_instructions_message = submission_instructions_message

    @property
    def submission_receipt_message(self):
        """Gets the submission_receipt_message of this Evaluation.  # noqa: E501

        Message to display to users upon successful submission to this Evaluation.  # noqa: E501

        :return: The submission_receipt_message of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._submission_receipt_message

    @submission_receipt_message.setter
    def submission_receipt_message(self, submission_receipt_message):
        """Sets the submission_receipt_message of this Evaluation.

        Message to display to users upon successful submission to this Evaluation.  # noqa: E501

        :param submission_receipt_message: The submission_receipt_message of this Evaluation.  # noqa: E501
        :type: str
        """

        self._submission_receipt_message = submission_receipt_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evaluation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Evaluation):
            return True

        return self.to_dict() != other.to_dict()
