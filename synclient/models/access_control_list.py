# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class AccessControlList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'creation_date': 'str',
        'etag': 'str',
        'id': 'str',
        'modified_by': 'str',
        'modified_on': 'str',
        'resource_access': 'list[ResourceAccess]'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'etag': 'etag',
        'id': 'id',
        'modified_by': 'modifiedBy',
        'modified_on': 'modifiedOn',
        'resource_access': 'resourceAccess'
    }

    def __init__(self, created_by=None, creation_date=None, etag=None, id=None, modified_by=None, modified_on=None, resource_access=None, local_vars_configuration=None):  # noqa: E501
        """AccessControlList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._creation_date = None
        self._etag = None
        self._id = None
        self._modified_by = None
        self._modified_on = None
        self._resource_access = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if etag is not None:
            self.etag = etag
        if id is not None:
            self.id = id
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_on is not None:
            self.modified_on = modified_on
        if resource_access is not None:
            self.resource_access = resource_access

    @property
    def created_by(self):
        """Gets the created_by of this AccessControlList.  # noqa: E501

        UNUSED -- maintained only for backwards compatibility with archived objects  # noqa: E501

        :return: The created_by of this AccessControlList.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AccessControlList.

        UNUSED -- maintained only for backwards compatibility with archived objects  # noqa: E501

        :param created_by: The created_by of this AccessControlList.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this AccessControlList.  # noqa: E501

        Created Date  # noqa: E501

        :return: The creation_date of this AccessControlList.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AccessControlList.

        Created Date  # noqa: E501

        :param creation_date: The creation_date of this AccessControlList.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def etag(self):
        """Gets the etag of this AccessControlList.  # noqa: E501

        Synapse etag value  # noqa: E501

        :return: The etag of this AccessControlList.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AccessControlList.

        Synapse etag value  # noqa: E501

        :param etag: The etag of this AccessControlList.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this AccessControlList.  # noqa: E501

        The entity id  # noqa: E501

        :return: The id of this AccessControlList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessControlList.

        The entity id  # noqa: E501

        :param id: The id of this AccessControlList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_by(self):
        """Gets the modified_by of this AccessControlList.  # noqa: E501

        UNUSED -- maintained only for backwards compatibility with archived objects  # noqa: E501

        :return: The modified_by of this AccessControlList.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this AccessControlList.

        UNUSED -- maintained only for backwards compatibility with archived objects  # noqa: E501

        :param modified_by: The modified_by of this AccessControlList.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this AccessControlList.  # noqa: E501

        UNUSED -- maintained only for backwards compatibility with archived objects  # noqa: E501

        :return: The modified_on of this AccessControlList.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this AccessControlList.

        UNUSED -- maintained only for backwards compatibility with archived objects  # noqa: E501

        :param modified_on: The modified_on of this AccessControlList.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def resource_access(self):
        """Gets the resource_access of this AccessControlList.  # noqa: E501

        The list of principals who can access the data with the allowed types of access for each.  # noqa: E501

        :return: The resource_access of this AccessControlList.  # noqa: E501
        :rtype: list[ResourceAccess]
        """
        return self._resource_access

    @resource_access.setter
    def resource_access(self, resource_access):
        """Sets the resource_access of this AccessControlList.

        The list of principals who can access the data with the allowed types of access for each.  # noqa: E501

        :param resource_access: The resource_access of this AccessControlList.  # noqa: E501
        :type: list[ResourceAccess]
        """

        self._resource_access = resource_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessControlList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessControlList):
            return True

        return self.to_dict() != other.to_dict()
