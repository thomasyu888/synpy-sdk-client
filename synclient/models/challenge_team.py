# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class ChallengeTeam(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'team_id': 'str',
        'challenge_id': 'str',
        'message': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'team_id': 'teamId',
        'challenge_id': 'challengeId',
        'message': 'message',
        'etag': 'etag'
    }

    def __init__(self, id=None, team_id=None, challenge_id=None, message=None, etag=None, local_vars_configuration=None):  # noqa: E501
        """ChallengeTeam - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._team_id = None
        self._challenge_id = None
        self._message = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if team_id is not None:
            self.team_id = team_id
        if challenge_id is not None:
            self.challenge_id = challenge_id
        if message is not None:
            self.message = message
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this ChallengeTeam.  # noqa: E501

        The ID of this ChallengeTeam object  # noqa: E501

        :return: The id of this ChallengeTeam.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChallengeTeam.

        The ID of this ChallengeTeam object  # noqa: E501

        :param id: The id of this ChallengeTeam.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def team_id(self):
        """Gets the team_id of this ChallengeTeam.  # noqa: E501

        The ID of the Team  # noqa: E501

        :return: The team_id of this ChallengeTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ChallengeTeam.

        The ID of the Team  # noqa: E501

        :param team_id: The team_id of this ChallengeTeam.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def challenge_id(self):
        """Gets the challenge_id of this ChallengeTeam.  # noqa: E501

        The ID of the Challenge  # noqa: E501

        :return: The challenge_id of this ChallengeTeam.  # noqa: E501
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this ChallengeTeam.

        The ID of the Challenge  # noqa: E501

        :param challenge_id: The challenge_id of this ChallengeTeam.  # noqa: E501
        :type: str
        """

        self._challenge_id = challenge_id

    @property
    def message(self):
        """Gets the message of this ChallengeTeam.  # noqa: E501

        A descriptive message for the Team in the context of the Challenge. Limited to 500 characters.  # noqa: E501

        :return: The message of this ChallengeTeam.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChallengeTeam.

        A descriptive message for the Team in the context of the Challenge. Limited to 500 characters.  # noqa: E501

        :param message: The message of this ChallengeTeam.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def etag(self):
        """Gets the etag of this ChallengeTeam.  # noqa: E501

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.  # noqa: E501

        :return: The etag of this ChallengeTeam.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ChallengeTeam.

        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.  # noqa: E501

        :param etag: The etag of this ChallengeTeam.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChallengeTeam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChallengeTeam):
            return True

        return self.to_dict() != other.to_dict()
