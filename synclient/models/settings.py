# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class Settings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mark_emailed_messages_as_read': 'bool',
        'send_email_notifications': 'bool'
    }

    attribute_map = {
        'mark_emailed_messages_as_read': 'markEmailedMessagesAsRead',
        'send_email_notifications': 'sendEmailNotifications'
    }

    def __init__(self, mark_emailed_messages_as_read=False, send_email_notifications=True, local_vars_configuration=None):  # noqa: E501
        """Settings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mark_emailed_messages_as_read = None
        self._send_email_notifications = None
        self.discriminator = None

        if mark_emailed_messages_as_read is not None:
            self.mark_emailed_messages_as_read = mark_emailed_messages_as_read
        if send_email_notifications is not None:
            self.send_email_notifications = send_email_notifications

    @property
    def mark_emailed_messages_as_read(self):
        """Gets the mark_emailed_messages_as_read of this Settings.  # noqa: E501

        Should messages that are emailed to the user be marked as READ in Synapse? Default false.  # noqa: E501

        :return: The mark_emailed_messages_as_read of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._mark_emailed_messages_as_read

    @mark_emailed_messages_as_read.setter
    def mark_emailed_messages_as_read(self, mark_emailed_messages_as_read):
        """Sets the mark_emailed_messages_as_read of this Settings.

        Should messages that are emailed to the user be marked as READ in Synapse? Default false.  # noqa: E501

        :param mark_emailed_messages_as_read: The mark_emailed_messages_as_read of this Settings.  # noqa: E501
        :type: bool
        """

        self._mark_emailed_messages_as_read = mark_emailed_messages_as_read

    @property
    def send_email_notifications(self):
        """Gets the send_email_notifications of this Settings.  # noqa: E501

        Should the user receive email notifications? Default true.  # noqa: E501

        :return: The send_email_notifications of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._send_email_notifications

    @send_email_notifications.setter
    def send_email_notifications(self, send_email_notifications):
        """Sets the send_email_notifications of this Settings.

        Should the user receive email notifications? Default true.  # noqa: E501

        :param send_email_notifications: The send_email_notifications of this Settings.  # noqa: E501
        :type: bool
        """

        self._send_email_notifications = send_email_notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Settings):
            return True

        return self.to_dict() != other.to_dict()
