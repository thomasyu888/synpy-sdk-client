# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class SubmissionStatusForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rejection_message': 'str',
        'reviewed_by': 'str',
        'reviewed_on': 'str',
        'state': 'StateEnum',
        'submitted_on': 'str'
    }

    attribute_map = {
        'rejection_message': 'rejectionMessage',
        'reviewed_by': 'reviewedBy',
        'reviewed_on': 'reviewedOn',
        'state': 'state',
        'submitted_on': 'submittedOn'
    }

    def __init__(self, rejection_message=None, reviewed_by=None, reviewed_on=None, state=None, submitted_on=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionStatusForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rejection_message = None
        self._reviewed_by = None
        self._reviewed_on = None
        self._state = None
        self._submitted_on = None
        self.discriminator = None

        if rejection_message is not None:
            self.rejection_message = rejection_message
        if reviewed_by is not None:
            self.reviewed_by = reviewed_by
        if reviewed_on is not None:
            self.reviewed_on = reviewed_on
        if state is not None:
            self.state = state
        if submitted_on is not None:
            self.submitted_on = submitted_on

    @property
    def rejection_message(self):
        """Gets the rejection_message of this SubmissionStatusForm.  # noqa: E501

        The message provided by the reviewer when a submission is rejected.  # noqa: E501

        :return: The rejection_message of this SubmissionStatusForm.  # noqa: E501
        :rtype: str
        """
        return self._rejection_message

    @rejection_message.setter
    def rejection_message(self, rejection_message):
        """Sets the rejection_message of this SubmissionStatusForm.

        The message provided by the reviewer when a submission is rejected.  # noqa: E501

        :param rejection_message: The rejection_message of this SubmissionStatusForm.  # noqa: E501
        :type: str
        """

        self._rejection_message = rejection_message

    @property
    def reviewed_by(self):
        """Gets the reviewed_by of this SubmissionStatusForm.  # noqa: E501

        The id of the service user that reviewed the submission.  # noqa: E501

        :return: The reviewed_by of this SubmissionStatusForm.  # noqa: E501
        :rtype: str
        """
        return self._reviewed_by

    @reviewed_by.setter
    def reviewed_by(self, reviewed_by):
        """Sets the reviewed_by of this SubmissionStatusForm.

        The id of the service user that reviewed the submission.  # noqa: E501

        :param reviewed_by: The reviewed_by of this SubmissionStatusForm.  # noqa: E501
        :type: str
        """

        self._reviewed_by = reviewed_by

    @property
    def reviewed_on(self):
        """Gets the reviewed_on of this SubmissionStatusForm.  # noqa: E501

        The date when this submission was reviewed.  # noqa: E501

        :return: The reviewed_on of this SubmissionStatusForm.  # noqa: E501
        :rtype: str
        """
        return self._reviewed_on

    @reviewed_on.setter
    def reviewed_on(self, reviewed_on):
        """Sets the reviewed_on of this SubmissionStatusForm.

        The date when this submission was reviewed.  # noqa: E501

        :param reviewed_on: The reviewed_on of this SubmissionStatusForm.  # noqa: E501
        :type: str
        """

        self._reviewed_on = reviewed_on

    @property
    def state(self):
        """Gets the state of this SubmissionStatusForm.  # noqa: E501


        :return: The state of this SubmissionStatusForm.  # noqa: E501
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubmissionStatusForm.


        :param state: The state of this SubmissionStatusForm.  # noqa: E501
        :type: StateEnum
        """

        self._state = state

    @property
    def submitted_on(self):
        """Gets the submitted_on of this SubmissionStatusForm.  # noqa: E501

        The date when the object was submitted.  # noqa: E501

        :return: The submitted_on of this SubmissionStatusForm.  # noqa: E501
        :rtype: str
        """
        return self._submitted_on

    @submitted_on.setter
    def submitted_on(self, submitted_on):
        """Sets the submitted_on of this SubmissionStatusForm.

        The date when the object was submitted.  # noqa: E501

        :param submitted_on: The submitted_on of this SubmissionStatusForm.  # noqa: E501
        :type: str
        """

        self._submitted_on = submitted_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionStatusForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionStatusForm):
            return True

        return self.to_dict() != other.to_dict()
