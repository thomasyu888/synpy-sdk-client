# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class CsvTableDescriptor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'escape_character': 'str',
        'is_first_line_header': 'bool',
        'line_end': 'str',
        'quote_character': 'str',
        'separator': 'str'
    }

    attribute_map = {
        'escape_character': 'escapeCharacter',
        'is_first_line_header': 'isFirstLineHeader',
        'line_end': 'lineEnd',
        'quote_character': 'quoteCharacter',
        'separator': 'separator'
    }

    def __init__(self, escape_character=None, is_first_line_header=None, line_end=None, quote_character=None, separator=None, local_vars_configuration=None):  # noqa: E501
        """CsvTableDescriptor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._escape_character = None
        self._is_first_line_header = None
        self._line_end = None
        self._quote_character = None
        self._separator = None
        self.discriminator = None

        if escape_character is not None:
            self.escape_character = escape_character
        if is_first_line_header is not None:
            self.is_first_line_header = is_first_line_header
        if line_end is not None:
            self.line_end = line_end
        if quote_character is not None:
            self.quote_character = quote_character
        if separator is not None:
            self.separator = separator

    @property
    def escape_character(self):
        """Gets the escape_character of this CsvTableDescriptor.  # noqa: E501

        The escape character to be used for escaping a separator or quote in the resulting file. The default character '\\\\' will be used if this is not provided by the caller.   # noqa: E501

        :return: The escape_character of this CsvTableDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._escape_character

    @escape_character.setter
    def escape_character(self, escape_character):
        """Sets the escape_character of this CsvTableDescriptor.

        The escape character to be used for escaping a separator or quote in the resulting file. The default character '\\\\' will be used if this is not provided by the caller.   # noqa: E501

        :param escape_character: The escape_character of this CsvTableDescriptor.  # noqa: E501
        :type: str
        """

        self._escape_character = escape_character

    @property
    def is_first_line_header(self):
        """Gets the is_first_line_header of this CsvTableDescriptor.  # noqa: E501

        Is the first line a header? The default value of 'true' will be used if this is not provided by the caller.   # noqa: E501

        :return: The is_first_line_header of this CsvTableDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_line_header

    @is_first_line_header.setter
    def is_first_line_header(self, is_first_line_header):
        """Sets the is_first_line_header of this CsvTableDescriptor.

        Is the first line a header? The default value of 'true' will be used if this is not provided by the caller.   # noqa: E501

        :param is_first_line_header: The is_first_line_header of this CsvTableDescriptor.  # noqa: E501
        :type: bool
        """

        self._is_first_line_header = is_first_line_header

    @property
    def line_end(self):
        """Gets the line_end of this CsvTableDescriptor.  # noqa: E501

        The line feed terminator to be used for the resulting file. The default value of '\\n' will be used if this is not provided by the caller.   # noqa: E501

        :return: The line_end of this CsvTableDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._line_end

    @line_end.setter
    def line_end(self, line_end):
        """Sets the line_end of this CsvTableDescriptor.

        The line feed terminator to be used for the resulting file. The default value of '\\n' will be used if this is not provided by the caller.   # noqa: E501

        :param line_end: The line_end of this CsvTableDescriptor.  # noqa: E501
        :type: str
        """

        self._line_end = line_end

    @property
    def quote_character(self):
        """Gets the quote_character of this CsvTableDescriptor.  # noqa: E501

        The character to be used for quoted elements in the resulting file. The default character '\"' will be used if this is not provided by the caller.   # noqa: E501

        :return: The quote_character of this CsvTableDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._quote_character

    @quote_character.setter
    def quote_character(self, quote_character):
        """Sets the quote_character of this CsvTableDescriptor.

        The character to be used for quoted elements in the resulting file. The default character '\"' will be used if this is not provided by the caller.   # noqa: E501

        :param quote_character: The quote_character of this CsvTableDescriptor.  # noqa: E501
        :type: str
        """

        self._quote_character = quote_character

    @property
    def separator(self):
        """Gets the separator of this CsvTableDescriptor.  # noqa: E501

        The delimiter to be used for separating entries in the resulting file. The default character ',' will be used if this is not provided by the caller. For tab-separated values use '\\t'   # noqa: E501

        :return: The separator of this CsvTableDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._separator

    @separator.setter
    def separator(self, separator):
        """Sets the separator of this CsvTableDescriptor.

        The delimiter to be used for separating entries in the resulting file. The default character ',' will be used if this is not provided by the caller. For tab-separated values use '\\t'   # noqa: E501

        :param separator: The separator of this CsvTableDescriptor.  # noqa: E501
        :type: str
        """

        self._separator = separator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsvTableDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CsvTableDescriptor):
            return True

        return self.to_dict() != other.to_dict()
