# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from synclient.configuration import Configuration


class FileHandleUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'new_file_handle_id': 'str',
        'old_file_handle_id': 'str'
    }

    attribute_map = {
        'new_file_handle_id': 'newFileHandleId',
        'old_file_handle_id': 'oldFileHandleId'
    }

    def __init__(self, new_file_handle_id=None, old_file_handle_id=None, local_vars_configuration=None):  # noqa: E501
        """FileHandleUpdateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._new_file_handle_id = None
        self._old_file_handle_id = None
        self.discriminator = None

        if new_file_handle_id is not None:
            self.new_file_handle_id = new_file_handle_id
        if old_file_handle_id is not None:
            self.old_file_handle_id = old_file_handle_id

    @property
    def new_file_handle_id(self):
        """Gets the new_file_handle_id of this FileHandleUpdateRequest.  # noqa: E501

        The id of the new file handle to be associated with the FileEntity. The user performing the request must be the owner of the file handle.   # noqa: E501

        :return: The new_file_handle_id of this FileHandleUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_file_handle_id

    @new_file_handle_id.setter
    def new_file_handle_id(self, new_file_handle_id):
        """Sets the new_file_handle_id of this FileHandleUpdateRequest.

        The id of the new file handle to be associated with the FileEntity. The user performing the request must be the owner of the file handle.   # noqa: E501

        :param new_file_handle_id: The new_file_handle_id of this FileHandleUpdateRequest.  # noqa: E501
        :type: str
        """

        self._new_file_handle_id = new_file_handle_id

    @property
    def old_file_handle_id(self):
        """Gets the old_file_handle_id of this FileHandleUpdateRequest.  # noqa: E501

        The id of the file handle currently associated to the FileEntity. Used to avoid conflicting cuncurrent updates, if the id does not match the current file handle id the request will be rejected with a PRECONDITION_FAILED (412) response.   # noqa: E501

        :return: The old_file_handle_id of this FileHandleUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._old_file_handle_id

    @old_file_handle_id.setter
    def old_file_handle_id(self, old_file_handle_id):
        """Sets the old_file_handle_id of this FileHandleUpdateRequest.

        The id of the file handle currently associated to the FileEntity. Used to avoid conflicting cuncurrent updates, if the id does not match the current file handle id the request will be rejected with a PRECONDITION_FAILED (412) response.   # noqa: E501

        :param old_file_handle_id: The old_file_handle_id of this FileHandleUpdateRequest.  # noqa: E501
        :type: str
        """

        self._old_file_handle_id = old_file_handle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileHandleUpdateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileHandleUpdateRequest):
            return True

        return self.to_dict() != other.to_dict()
