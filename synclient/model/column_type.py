"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from synclient.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class ColumnType(ModelSimple):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('value',): {
            'STRING': "STRING",
            'DOUBLE': "DOUBLE",
            'INTEGER': "INTEGER",
            'BOOLEAN': "BOOLEAN",
            'DATE': "DATE",
            'FILEHANDLEID': "FILEHANDLEID",
            'ENTITYID': "ENTITYID",
            'SUBMISSIONID': "SUBMISSIONID",
            'EVALUATIONID': "EVALUATIONID",
            'LINK': "LINK",
            'LARGETEXT': "LARGETEXT",
            'USERID': "USERID",
            'STRING_LIST': "STRING_LIST",
            'INTEGER_LIST': "INTEGER_LIST",
            'BOOLEAN_LIST': "BOOLEAN_LIST",
            'DATE_LIST': "DATE_LIST",
            'ENTITYID_LIST': "ENTITYID_LIST",
            'USERID_LIST': "USERID_LIST",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'value': (str,),
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {}

    _composed_schemas = None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):
        """ColumnType - a model defined in OpenAPI

        Note that value can be passed either in args or in kwargs, but not in both.

        Args:
            args[0] (str): The column type determines the type of data that can be stored in a column. Switching between types (using a transaction with TableUpdateTransactionRequest in the \"changes\" list) is generally allowed except for switching to \"_LIST\" suffixed types. In such cases, a new column must be created and data must be copied over manually  <table border=\"1\">  <tr>  <th>name</th>  <th>description</th>  </tr>  <tr>  <td>STRING</td>  <td>The STRING data type is a small text strings with between 1 and 1,000 characters. Each STRING column will have a declared maximum size between 1 and 1,000 characters (with 50 characters as the default when maximumSize = null). The maximum STRING size is applied to the budget of the maximum table width, therefore it is best to use the smallest possible maximum size for the data. For strings larger than 250 characters, consider using the LARGETEXT column type for improved performance. Each STRING column counts as maxSize*4 (4 bytes per character) towards the total width of a table.</td>  </tr>  <tr>  <td>DOUBLE</td>  <td>The DOUBLE data type is a double-precision 64-bit IEEE 754 floating point. Its range of values is approximately +/-1.79769313486231570E+308 (15 significant decimal digits). Each DOUBLE column counts as 23 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>INTEGER</td>  <td>The INTEGER data type is a 64-bit two's complement integer. The signed integer has a minimum value of -2^63 and a maximum value of 2^63-1. Each INTEGER column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>BOOLEAN</td>  <td>The BOOLEAN data type has only two possible values: 'true' and 'false'. Each BOOLEAN column counts as 5 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>DATE</td>  <td>The DATE data type represent the specified number of milliseconds since the standard base time known as 'the epoch', namely January 1, 1970, 00:00:00 GM. Each DATE column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>FILEHANDLEID</td>  <td>The FILEHANDLEID data type represents a file stored within a table. To store a file in a table, first use the 'File Services' to upload a file to generate a new FileHandle, then apply the fileHandle.id as the value for this column. Note: This column type works best for files that are binary (non-text) or text files that are 1 MB or larger. For text files that are smaller than 1 MB consider using the LARGETEXT column type to improve download performance. Each FILEHANDLEID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>ENTITYID</td>  <td>The ENTITYID type represents a reference to a Synapse Entity. Values will include the 'syn' prefix, such as 'syn123'. Each ENTITYID column counts as 44 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>SUBMISSIONID</td>  <td>The SUBMISSIONID type represents a reference to an evaluation submission. The value should be the ID of the referenced submission. Each SUBMISSIONID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>EVALUATIONID</td>  <td>The EVALUATIONID type represents a reference to an evaluation. The value should be the ID of the referenced evaluation. Each EVALUATIONID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>LINK</td>  <td>The LINK data type represents any URL with 1,000 characters or less. Each LINK column counts as maxSize*4 (4 bytes per character) towards the total width of a table.</td>  </tr>  <tr>  <td>LARGETEXT</td>  <td>The LARGETEXT data type represents a string that is greater than 250 characters but less than 524,288 characters (2 MB of UTF-8 4 byte chars). For smaller strings consider using the STRING column type. For larger strings, consider using the FILEHANDELID column type. Each LARGE_TEXT column counts as 2133 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>USERID</td>  <td>The USERID data type represents a reference to a Synapse User. The value should be the ID of the referenced User. Each USERID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>STRING_LIST</td>  <td>Multiple values of STRING</td>  </tr>  <tr>  <td>INTEGER_LIST</td>  <td>Multiple values of INTEGER.</td>  </tr>  <tr>  <td>BOOLEAN_LIST</td>  <td>Multiple values of BOOLEAN.</td>  </tr>  <tr>  <td>DOUBLE</td>  <td></td>  </tr> <tr>  <td>DATE_LIST</td>  <td>Multiple values of DATE.</td>  </tr>  <tr>  <td>ENTITYID_LIST</td>  <td>Multiple values of ENTITYID.</td>  </tr>  <tr>  <td>USERID_LIST</td>  <td>Multiple values of USERID.</td>  </tr>  </table> ., must be one of ["STRING", "DOUBLE", "INTEGER", "BOOLEAN", "DATE", "FILEHANDLEID", "ENTITYID", "SUBMISSIONID", "EVALUATIONID", "LINK", "LARGETEXT", "USERID", "STRING_LIST", "INTEGER_LIST", "BOOLEAN_LIST", "DATE_LIST", "ENTITYID_LIST", "USERID_LIST", ]  # noqa: E501

        Keyword Args:
            value (str): The column type determines the type of data that can be stored in a column. Switching between types (using a transaction with TableUpdateTransactionRequest in the \"changes\" list) is generally allowed except for switching to \"_LIST\" suffixed types. In such cases, a new column must be created and data must be copied over manually  <table border=\"1\">  <tr>  <th>name</th>  <th>description</th>  </tr>  <tr>  <td>STRING</td>  <td>The STRING data type is a small text strings with between 1 and 1,000 characters. Each STRING column will have a declared maximum size between 1 and 1,000 characters (with 50 characters as the default when maximumSize = null). The maximum STRING size is applied to the budget of the maximum table width, therefore it is best to use the smallest possible maximum size for the data. For strings larger than 250 characters, consider using the LARGETEXT column type for improved performance. Each STRING column counts as maxSize*4 (4 bytes per character) towards the total width of a table.</td>  </tr>  <tr>  <td>DOUBLE</td>  <td>The DOUBLE data type is a double-precision 64-bit IEEE 754 floating point. Its range of values is approximately +/-1.79769313486231570E+308 (15 significant decimal digits). Each DOUBLE column counts as 23 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>INTEGER</td>  <td>The INTEGER data type is a 64-bit two's complement integer. The signed integer has a minimum value of -2^63 and a maximum value of 2^63-1. Each INTEGER column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>BOOLEAN</td>  <td>The BOOLEAN data type has only two possible values: 'true' and 'false'. Each BOOLEAN column counts as 5 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>DATE</td>  <td>The DATE data type represent the specified number of milliseconds since the standard base time known as 'the epoch', namely January 1, 1970, 00:00:00 GM. Each DATE column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>FILEHANDLEID</td>  <td>The FILEHANDLEID data type represents a file stored within a table. To store a file in a table, first use the 'File Services' to upload a file to generate a new FileHandle, then apply the fileHandle.id as the value for this column. Note: This column type works best for files that are binary (non-text) or text files that are 1 MB or larger. For text files that are smaller than 1 MB consider using the LARGETEXT column type to improve download performance. Each FILEHANDLEID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>ENTITYID</td>  <td>The ENTITYID type represents a reference to a Synapse Entity. Values will include the 'syn' prefix, such as 'syn123'. Each ENTITYID column counts as 44 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>SUBMISSIONID</td>  <td>The SUBMISSIONID type represents a reference to an evaluation submission. The value should be the ID of the referenced submission. Each SUBMISSIONID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>EVALUATIONID</td>  <td>The EVALUATIONID type represents a reference to an evaluation. The value should be the ID of the referenced evaluation. Each EVALUATIONID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>LINK</td>  <td>The LINK data type represents any URL with 1,000 characters or less. Each LINK column counts as maxSize*4 (4 bytes per character) towards the total width of a table.</td>  </tr>  <tr>  <td>LARGETEXT</td>  <td>The LARGETEXT data type represents a string that is greater than 250 characters but less than 524,288 characters (2 MB of UTF-8 4 byte chars). For smaller strings consider using the STRING column type. For larger strings, consider using the FILEHANDELID column type. Each LARGE_TEXT column counts as 2133 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>USERID</td>  <td>The USERID data type represents a reference to a Synapse User. The value should be the ID of the referenced User. Each USERID column counts as 20 bytes towards the total width of a table.</td>  </tr>  <tr>  <td>STRING_LIST</td>  <td>Multiple values of STRING</td>  </tr>  <tr>  <td>INTEGER_LIST</td>  <td>Multiple values of INTEGER.</td>  </tr>  <tr>  <td>BOOLEAN_LIST</td>  <td>Multiple values of BOOLEAN.</td>  </tr>  <tr>  <td>DOUBLE</td>  <td></td>  </tr> <tr>  <td>DATE_LIST</td>  <td>Multiple values of DATE.</td>  </tr>  <tr>  <td>ENTITYID_LIST</td>  <td>Multiple values of ENTITYID.</td>  </tr>  <tr>  <td>USERID_LIST</td>  <td>Multiple values of USERID.</td>  </tr>  </table> ., must be one of ["STRING", "DOUBLE", "INTEGER", "BOOLEAN", "DATE", "FILEHANDLEID", "ENTITYID", "SUBMISSIONID", "EVALUATIONID", "LINK", "LARGETEXT", "USERID", "STRING_LIST", "INTEGER_LIST", "BOOLEAN_LIST", "DATE_LIST", "ENTITYID_LIST", "USERID_LIST", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        if 'value' in kwargs:
            value = kwargs.pop('value')
        elif args:
            args = list(args)
            value = args.pop(0)
        else:
            raise ApiTypeError(
                "value is required, but not passed in args or kwargs and doesn't have default",
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)
        self.value = value
        if kwargs:
            raise ApiTypeError(
                "Invalid named arguments=%s passed to %s. Remove those invalid named arguments." % (
                    kwargs,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )
