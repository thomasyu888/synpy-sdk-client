"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from synclient.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from synclient.model.column_model import ColumnModel
    from synclient.model.facet_column_result import FacetColumnResult
    from synclient.model.query_result import QueryResult
    from synclient.model.select_column import SelectColumn
    from synclient.model.sum_file_sizes import SumFileSizes
    globals()['ColumnModel'] = ColumnModel
    globals()['FacetColumnResult'] = FacetColumnResult
    globals()['QueryResult'] = QueryResult
    globals()['SelectColumn'] = SelectColumn
    globals()['SumFileSizes'] = SumFileSizes


class QueryResultBundle(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'column_models': ([ColumnModel],),  # noqa: E501
            'concrete_type': (str,),  # noqa: E501
            'facets': ([FacetColumnResult],),  # noqa: E501
            'last_updated_on': (str,),  # noqa: E501
            'max_rows_per_page': (int,),  # noqa: E501
            'query_count': (int,),  # noqa: E501
            'query_result': (QueryResult,),  # noqa: E501
            'select_columns': ([SelectColumn],),  # noqa: E501
            'sum_file_sizes': (SumFileSizes,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'column_models': 'columnModels',  # noqa: E501
        'concrete_type': 'concreteType',  # noqa: E501
        'facets': 'facets',  # noqa: E501
        'last_updated_on': 'lastUpdatedOn',  # noqa: E501
        'max_rows_per_page': 'maxRowsPerPage',  # noqa: E501
        'query_count': 'queryCount',  # noqa: E501
        'query_result': 'queryResult',  # noqa: E501
        'select_columns': 'selectColumns',  # noqa: E501
        'sum_file_sizes': 'sumFileSizes',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """QueryResultBundle - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            column_models ([ColumnModel]): The list of ColumnModels for the table. Use mask = 0x10 to include in the bundle.. [optional]  # noqa: E501
            concrete_type (str): Concrete Type. [optional]  # noqa: E501
            facets ([FacetColumnResult]): The list of facets for the search results. [optional]  # noqa: E501
            last_updated_on (str): The date-time when this table/view was last updated. Note: Since views are eventually consistent a view might still be out-of-date even if it was recently updated. Use mask = 0x80 to include in the bundle. . [optional]  # noqa: E501
            max_rows_per_page (int): The maximum number of rows that can be retrieved in a single call. This is a function of the columns that are selected in the query. Use mask = 0x8 to include in the bundle.. [optional]  # noqa: E501
            query_count (int): The total number of rows that match the query. Use mask = 0x2 to include in the bundle.. [optional]  # noqa: E501
            query_result (QueryResult): [optional]  # noqa: E501
            select_columns ([SelectColumn]): The list of SelectColumns from the select clause. Use mask = 0x4 to include in the bundle.. [optional]  # noqa: E501
            sum_file_sizes (SumFileSizes): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
