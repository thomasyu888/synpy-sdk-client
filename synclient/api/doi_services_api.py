"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from synclient.api_client import ApiClient, Endpoint
from synclient.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from synclient.model.async_job_id import AsyncJobId
from synclient.model.doi import Doi
from synclient.model.doi_association import DoiAssociation
from synclient.model.doi_request import DoiRequest
from synclient.model.doi_response import DoiResponse
from synclient.model.object_type import ObjectType


class DoiServicesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_create_or_update_doi_results(
            self,
            async_token,
            **kwargs
        ):
            """Get the results of a call to POST /doi/async/start  # noqa: E501

            Get the results of a call to POST /doi/async/start   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_create_or_update_doi_results(async_token, async_req=True)
            >>> result = thread.get()

            Args:
                async_token (str): The async job token from the create/update call

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DoiResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['async_token'] = \
                async_token
            return self.call_with_http_info(**kwargs)

        self.get_create_or_update_doi_results = Endpoint(
            settings={
                'response_type': (DoiResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/doi/async/get/{asyncToken}',
                'operation_id': 'get_create_or_update_doi_results',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'async_token',
                ],
                'required': [
                    'async_token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'async_token':
                        (str,),
                },
                'attribute_map': {
                    'async_token': 'asyncToken',
                },
                'location_map': {
                    'async_token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_create_or_update_doi_results
        )

        def __get_doi_association(
            self,
            id,
            type,
            **kwargs
        ):
            """Retrieves the DOI for the object.  # noqa: E501

            Retrieves the DOI for the object. Note: this call only retrieves the DOI association, if it exists. To retrieve the metadata for the object, see <a href=\"${GET.doi}\">GET /doi</a>'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_doi_association(id, type, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): The ID of the object to retrieve
                type (ObjectType): The type of the object

            Keyword Args:
                version (int): The version number of the object. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DoiAssociation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['type'] = \
                type
            return self.call_with_http_info(**kwargs)

        self.get_doi_association = Endpoint(
            settings={
                'response_type': (DoiAssociation,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/doi/association',
                'operation_id': 'get_doi_association',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'type',
                    'version',
                ],
                'required': [
                    'id',
                    'type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'type':
                        (ObjectType,),
                    'version':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'type': 'type',
                    'version': 'version',
                },
                'location_map': {
                    'id': 'query',
                    'type': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_doi_association
        )

        def __get_doi_v2(
            self,
            id,
            type,
            **kwargs
        ):
            """Retrieves the DOI for the object and its associated DOI metadata.  # noqa: E501

            Retrieves the DOI for the object and its associated DOI metadata. Note: this call calls an external API, which may impact performance To just retrieve the DOI association, see: <a href=\"${GET.doi.association}\">GET /doi/association</a>   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_doi_v2(id, type, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): The ID of the object to retrieve
                type (ObjectType): The type of the object

            Keyword Args:
                version (int): The version number of the object. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Doi
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['type'] = \
                type
            return self.call_with_http_info(**kwargs)

        self.get_doi_v2 = Endpoint(
            settings={
                'response_type': (Doi,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/doi',
                'operation_id': 'get_doi_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'type',
                    'version',
                ],
                'required': [
                    'id',
                    'type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'type':
                        (ObjectType,),
                    'version':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'type': 'type',
                    'version': 'version',
                },
                'location_map': {
                    'id': 'query',
                    'type': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_doi_v2
        )

        def __locate(
            self,
            id,
            type,
            **kwargs
        ):
            """Retrieves the Synapse web portal URL to the object entered.  # noqa: E501

            Retrieves the Synapse web portal URL to the object entered. Note: This call does not check to see if the object exists in Synapse.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.locate(id, type, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): The ID of the object to retrieve
                type (ObjectType): The type of the object

            Keyword Args:
                redirect (bool): Whether to return the URL or redirect to the URL. [optional] if omitted the server will use the default value of True
                version (int): The version number of the object. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['type'] = \
                type
            return self.call_with_http_info(**kwargs)

        self.locate = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/doi/locate',
                'operation_id': 'locate',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'type',
                    'redirect',
                    'version',
                ],
                'required': [
                    'id',
                    'type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'type':
                        (ObjectType,),
                    'redirect':
                        (bool,),
                    'version':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'type': 'type',
                    'redirect': 'redirect',
                    'version': 'version',
                },
                'location_map': {
                    'id': 'query',
                    'type': 'query',
                    'redirect': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__locate
        )

        def __start_create_or_update_doi(
            self,
            **kwargs
        ):
            """Asynchronously creates or updates a DOI in Synapse, with input metadata.  # noqa: E501

            Asynchronously creates or updates a DOI in Synapse, with input metadata. Retrieve the results with <a href=\"${GET.doi.async.get.asyncToken}\">GET /doi/async/get/{asyncToken}</a>. This call may fail if the external DataCite API is down. If the failure is recoverable, it will retry automatically.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.start_create_or_update_doi(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                doi_request (DoiRequest): A request containing a DOI and its metadata to associate with a Synapse object . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AsyncJobId
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.start_create_or_update_doi = Endpoint(
            settings={
                'response_type': (AsyncJobId,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/doi/async/start',
                'operation_id': 'start_create_or_update_doi',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'doi_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'doi_request':
                        (DoiRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'doi_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__start_create_or_update_doi
        )
