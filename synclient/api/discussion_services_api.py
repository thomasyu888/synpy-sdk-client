"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from synclient.api_client import ApiClient, Endpoint
from synclient.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from synclient.model.create_discussion_reply import CreateDiscussionReply
from synclient.model.create_discussion_thread import CreateDiscussionThread
from synclient.model.discussion_reply_bundle import DiscussionReplyBundle
from synclient.model.discussion_thread_bundle import DiscussionThreadBundle
from synclient.model.entity_id_list import EntityIdList
from synclient.model.entity_thread_counts import EntityThreadCounts
from synclient.model.forum import Forum
from synclient.model.message_url import MessageURL
from synclient.model.paginated_ids import PaginatedIds
from synclient.model.paginated_results_of_discussion_reply_bundle import PaginatedResultsOfDiscussionReplyBundle
from synclient.model.paginated_results_of_discussion_thread_bundle import PaginatedResultsOfDiscussionThreadBundle
from synclient.model.reply_count import ReplyCount
from synclient.model.thread_count import ThreadCount
from synclient.model.update_reply_message import UpdateReplyMessage
from synclient.model.update_thread_message import UpdateThreadMessage
from synclient.model.update_thread_title import UpdateThreadTitle


class DiscussionServicesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_reply(
            self,
            **kwargs
        ):
            """Create a new reply to a thread.  # noqa: E501

            This API is used to create a new reply to a thread.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_reply(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                create_discussion_reply (CreateDiscussionReply): - This object contains information needed to create a reply.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DiscussionReplyBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_reply = Endpoint(
            settings={
                'response_type': (DiscussionReplyBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/reply',
                'operation_id': 'create_reply',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_discussion_reply',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_discussion_reply':
                        (CreateDiscussionReply,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_discussion_reply': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_reply
        )

        def __create_thread(
            self,
            **kwargs
        ):
            """Create a new thread in a forum.  # noqa: E501

            This API is used to create a new thread in a forum.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_thread(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                create_discussion_thread (CreateDiscussionThread): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DiscussionThreadBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_thread = Endpoint(
            settings={
                'response_type': (DiscussionThreadBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread',
                'operation_id': 'create_thread',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_discussion_thread',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_discussion_thread':
                        (CreateDiscussionThread,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_discussion_thread': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_thread
        )

        def __delete_reply(
            self,
            reply_id,
            **kwargs
        ):
            """Delete Reply  # noqa: E501

            This API is used to mark a reply as deleted.  Target users: only forum's moderator can mark a reply as deleted.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_reply(reply_id, async_req=True)
            >>> result = thread.get()

            Args:
                reply_id (str): The ID of the Reply.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['reply_id'] = \
                reply_id
            return self.call_with_http_info(**kwargs)

        self.delete_reply = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/reply/{replyId}',
                'operation_id': 'delete_reply',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'reply_id',
                ],
                'required': [
                    'reply_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reply_id':
                        (str,),
                },
                'attribute_map': {
                    'reply_id': 'replyId',
                },
                'location_map': {
                    'reply_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_reply
        )

        def __delete_thread(
            self,
            thread_id,
            **kwargs
        ):
            """Delete a Thread.  # noqa: E501

            This API is used to mark a thread as deleted.  Target users: only forum's moderator can mark a thread as deleted.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_thread(thread_id, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            return self.call_with_http_info(**kwargs)

        self.delete_thread = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}',
                'operation_id': 'delete_thread',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                ],
                'required': [
                    'thread_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                },
                'location_map': {
                    'thread_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_thread
        )

        def __get_forum(
            self,
            forum_id,
            **kwargs
        ):
            """Get a Forum.   # noqa: E501

            This API is used to get the Forum''s metadata for a given its ID.  Target users: anyone who has READ permission to the project.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_forum(forum_id, async_req=True)
            >>> result = thread.get()

            Args:
                forum_id (str): The ID of the Forum.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Forum
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['forum_id'] = \
                forum_id
            return self.call_with_http_info(**kwargs)

        self.get_forum = Endpoint(
            settings={
                'response_type': (Forum,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/forum/{forumId}',
                'operation_id': 'get_forum',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'forum_id',
                ],
                'required': [
                    'forum_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'forum_id':
                        (str,),
                },
                'attribute_map': {
                    'forum_id': 'forumId',
                },
                'location_map': {
                    'forum_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_forum
        )

        def __get_forum_by_project_id(
            self,
            project_id,
            **kwargs
        ):
            """Get the Forum of a Project.  # noqa: E501

            This API is used to get the Forum's metadata for a given project ID.  Target users: anyone who has READ permission to the project.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_forum_by_project_id(project_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): The ID of a Project.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Forum
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            return self.call_with_http_info(**kwargs)

        self.get_forum_by_project_id = Endpoint(
            settings={
                'response_type': (Forum,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/project/{projectId}/forum',
                'operation_id': 'get_forum_by_project_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                ],
                'required': [
                    'project_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                },
                'location_map': {
                    'project_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_forum_by_project_id
        )

        def __get_forum_moderators(
            self,
            forum_id,
            **kwargs
        ):
            """Returns a page of Forum moderators.  # noqa: E501

            Returns a page of moderators for a given forum ID.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_forum_moderators(forum_id, async_req=True)
            >>> result = thread.get()

            Args:
                forum_id (str): The ID of the Forum.

            Keyword Args:
                limit (int): Limits the size of the page returned.. [optional] if omitted the server will use the default value of 10
                offset (int): The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.' . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedIds
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['forum_id'] = \
                forum_id
            return self.call_with_http_info(**kwargs)

        self.get_forum_moderators = Endpoint(
            settings={
                'response_type': (PaginatedIds,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/forum/{forumId}/moderators',
                'operation_id': 'get_forum_moderators',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'forum_id',
                    'limit',
                    'offset',
                ],
                'required': [
                    'forum_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 10,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'forum_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'forum_id': 'forumId',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'forum_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_forum_moderators
        )

        def __get_replies_for_thread(
            self,
            thread_id,
            filter,
            **kwargs
        ):
            """Get N number of replies for a given thread ID.  # noqa: E501

            This API is used to get N number of replies for a given thread ID.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_replies_for_thread(thread_id, filter, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.
                filter (str): Filter deleted not deleted replies.

            Keyword Args:
                ascending (bool): The direction of sort: true for ascending, and false for descending. [optional]
                limit (int): Limits the size of the page returned. For example, a page size of 10 require limit = 10. . [optional] if omitted the server will use the default value of 10
                offset (int): The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.' . [optional] if omitted the server will use the default value of 0
                sort (str): The field to sort the resulting replies on. . [optional] if omitted the server will use the default value of "CREATED_ON"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedResultsOfDiscussionReplyBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            kwargs['filter'] = \
                filter
            return self.call_with_http_info(**kwargs)

        self.get_replies_for_thread = Endpoint(
            settings={
                'response_type': (PaginatedResultsOfDiscussionReplyBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}/replies',
                'operation_id': 'get_replies_for_thread',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                    'filter',
                    'ascending',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'thread_id',
                    'filter',
                ],
                'nullable': [
                ],
                'enum': [
                    'filter',
                    'sort',
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('filter',): {

                        "DELETED_ONLY": "DELETED_ONLY",
                        "EXCLUDE_DELETED": "EXCLUDE_DELETED",
                        "NO_FILTER": "NO_FILTER"
                    },
                    ('sort',): {

                        "CREATED_ON": "CREATED_ON"
                    },
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                    'filter':
                        (str,),
                    'ascending':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                    'filter': 'filter',
                    'ascending': 'ascending',
                    'limit': 'limit',
                    'offset': 'offset',
                    'sort': 'sort',
                },
                'location_map': {
                    'thread_id': 'path',
                    'filter': 'query',
                    'ascending': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_replies_for_thread
        )

        def __get_reply(
            self,
            reply_id,
            **kwargs
        ):
            """Get a Reply.  # noqa: E501

            This API is used to get a reply and its statistic given its ID.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_reply(reply_id, async_req=True)
            >>> result = thread.get()

            Args:
                reply_id (str): The ID of the Reply.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DiscussionReplyBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['reply_id'] = \
                reply_id
            return self.call_with_http_info(**kwargs)

        self.get_reply = Endpoint(
            settings={
                'response_type': (DiscussionReplyBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/reply/{replyId}',
                'operation_id': 'get_reply',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'reply_id',
                ],
                'required': [
                    'reply_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reply_id':
                        (str,),
                },
                'attribute_map': {
                    'reply_id': 'replyId',
                },
                'location_map': {
                    'reply_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_reply
        )

        def __get_reply_count_for_thread(
            self,
            thread_id,
            filter,
            **kwargs
        ):
            """Get the total number of replies for a given Thread.   # noqa: E501

            This API is used to get the total number of replies for a given thread ID.  Target users: anyone who has READ permission to the project.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_reply_count_for_thread(thread_id, filter, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.
                filter (str): Filter deleted not deleted replies.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ReplyCount
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            kwargs['filter'] = \
                filter
            return self.call_with_http_info(**kwargs)

        self.get_reply_count_for_thread = Endpoint(
            settings={
                'response_type': (ReplyCount,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}/replycount',
                'operation_id': 'get_reply_count_for_thread',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                    'filter',
                ],
                'required': [
                    'thread_id',
                    'filter',
                ],
                'nullable': [
                ],
                'enum': [
                    'filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('filter',): {

                        "DELETED_ONLY": "DELETED_ONLY",
                        "EXCLUDE_DELETED": "EXCLUDE_DELETED",
                        "NO_FILTER": "NO_FILTER"
                    },
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                    'filter': 'filter',
                },
                'location_map': {
                    'thread_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_reply_count_for_thread
        )

        def __get_reply_url(
            self,
            message_key,
            **kwargs
        ):
            """Get the message URL of a reply.  # noqa: E501

            This API is used to get the message URL of a reply. The message URL is the URL to download the file which contains the reply message.  Target users: anyone who has READ permission to the project. The resulting URL will be signed with Content-Type =\"text/plain; charset=utf-8\"; therefore, this header must be included with the GET on the URL.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_reply_url(message_key, async_req=True)
            >>> result = thread.get()

            Args:
                message_key (str): DiscussionReplyBundle.messageKey

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MessageURL
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['message_key'] = \
                message_key
            return self.call_with_http_info(**kwargs)

        self.get_reply_url = Endpoint(
            settings={
                'response_type': (MessageURL,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/reply/messageUrl',
                'operation_id': 'get_reply_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'message_key',
                ],
                'required': [
                    'message_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'message_key':
                        (str,),
                },
                'attribute_map': {
                    'message_key': 'messageKey',
                },
                'location_map': {
                    'message_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_reply_url
        )

        def __get_thread(
            self,
            thread_id,
            **kwargs
        ):
            """Get a thread.  # noqa: E501

            This API is used to get a thread and its statistic given its ID.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_thread(thread_id, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DiscussionThreadBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            return self.call_with_http_info(**kwargs)

        self.get_thread = Endpoint(
            settings={
                'response_type': (DiscussionThreadBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}',
                'operation_id': 'get_thread',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                ],
                'required': [
                    'thread_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                },
                'location_map': {
                    'thread_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_thread
        )

        def __get_thread_count(
            self,
            forum_id,
            **kwargs
        ):
            """Get the total number of threads for a Forum.  # noqa: E501

            This API is used to get the total number of threads for a given forum ID.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_thread_count(forum_id, async_req=True)
            >>> result = thread.get()

            Args:
                forum_id (str): The ID of the Forum.

            Keyword Args:
                filter (str): Filter deleted or not deleted threads.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ThreadCount
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['forum_id'] = \
                forum_id
            return self.call_with_http_info(**kwargs)

        self.get_thread_count = Endpoint(
            settings={
                'response_type': (ThreadCount,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/forum/{forumId}/threadcount',
                'operation_id': 'get_thread_count',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'forum_id',
                    'filter',
                ],
                'required': [
                    'forum_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('filter',): {

                        "DELETED_ONLY": "DELETED_ONLY",
                        "EXCLUDE_DELETED": "EXCLUDE_DELETED",
                        "NO_FILTER": "NO_FILTER"
                    },
                },
                'openapi_types': {
                    'forum_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'forum_id': 'forumId',
                    'filter': 'filter',
                },
                'location_map': {
                    'forum_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_thread_count
        )

        def __get_thread_counts(
            self,
            **kwargs
        ):
            """Get number of threads that belong to projects user can view and references the given entity.   # noqa: E501

            This API is used to get list of entity and count pairs, with count is the number of threads that belong to projects user can view and references the given entity.  Target users: anyone who has READ permission to the project.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_thread_counts(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                entity_id_list (EntityIdList): The requested list. Limit size 20.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EntityThreadCounts
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_thread_counts = Endpoint(
            settings={
                'response_type': (EntityThreadCounts,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/entity/threadcounts',
                'operation_id': 'get_thread_counts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id_list',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id_list':
                        (EntityIdList,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'entity_id_list': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__get_thread_counts
        )

        def __get_thread_url(
            self,
            message_key,
            **kwargs
        ):
            """Get the message URL of a thread.  # noqa: E501

            This API is used to get the message URL of a thread. The message URL is the URL to download the file which contains the thread message.  Target users: anyone who has READ permission to the project.  The resulting URL will be signed with Content-Type =\"text/plain; charset=utf-8\"; therefore, this header must be included with the GET on the URL.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_thread_url(message_key, async_req=True)
            >>> result = thread.get()

            Args:
                message_key (str): Message Key

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MessageURL
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['message_key'] = \
                message_key
            return self.call_with_http_info(**kwargs)

        self.get_thread_url = Endpoint(
            settings={
                'response_type': (MessageURL,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/messageUrl',
                'operation_id': 'get_thread_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'message_key',
                ],
                'required': [
                    'message_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'message_key':
                        (str,),
                },
                'attribute_map': {
                    'message_key': 'messageKey',
                },
                'location_map': {
                    'message_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_thread_url
        )

        def __get_threads(
            self,
            forum_id,
            **kwargs
        ):
            """Get N number of threads for a Forum.  # noqa: E501

            This API is used to get N number of threads for a given forum ID.  Target users: anyone who has READ permission to the project.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_threads(forum_id, async_req=True)
            >>> result = thread.get()

            Args:
                forum_id (str): The ID of a Forum.

            Keyword Args:
                ascending (bool): The direction of sort: true for ascending, and false for descending. [optional]
                filter (str): Filter deleted or not deleted threads.. [optional]
                limit (int): Limits the size of the page returned. For example, a page size of 10 require limit = 10. . [optional] if omitted the server will use the default value of 10
                offset (float): - The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.. [optional] if omitted the server will use the default value of 0
                sort (str): The field to sort the resulting threads on.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedResultsOfDiscussionThreadBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['forum_id'] = \
                forum_id
            return self.call_with_http_info(**kwargs)

        self.get_threads = Endpoint(
            settings={
                'response_type': (PaginatedResultsOfDiscussionThreadBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/forum/{forumId}/threads',
                'operation_id': 'get_threads',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'forum_id',
                    'ascending',
                    'filter',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'forum_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'filter',
                    'sort',
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 20,
                        'inclusive_minimum': 10,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('filter',): {

                        "DELETED_ONLY": "DELETED_ONLY",
                        "EXCLUDE_DELETED": "EXCLUDE_DELETED",
                        "NO_FILTER": "NO_FILTER"
                    },
                    ('sort',): {

                        "NUMBER_OF_REPLIES": "NUMBER_OF_REPLIES",
                        "NUMBER_OF_VIEWS": "NUMBER_OF_VIEWS",
                        "PINNED_AND_LAST_ACTIVITY": "PINNED_AND_LAST_ACTIVITY",
                        "THREAD_TITLE": "THREAD_TITLE"
                    },
                },
                'openapi_types': {
                    'forum_id':
                        (str,),
                    'ascending':
                        (bool,),
                    'filter':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (float,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'forum_id': 'forumId',
                    'ascending': 'ascending',
                    'filter': 'filter',
                    'limit': 'limit',
                    'offset': 'offset',
                    'sort': 'sort',
                },
                'location_map': {
                    'forum_id': 'path',
                    'ascending': 'query',
                    'filter': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_threads
        )

        def __get_threads_for_entity(
            self,
            id,
            **kwargs
        ):
            """This API is used to get N number of threads that belongs to projects user can view and references the given entity.   # noqa: E501

            This API is used to get N number of threads that belongs to projects user can view and references the given entity.  Target users: anyone who has READ permission to the entity.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_threads_for_entity(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): The ID of an Entity.

            Keyword Args:
                ascending (bool): The direction of sort: true for ascending, and false for descending. [optional]
                limit (float): Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.' . [optional] if omitted the server will use the default value of 10
                offset (float): The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.' . [optional] if omitted the server will use the default value of 0
                sort (str): The field to sort the resulting threads on. Available options DiscussionThreadOrder . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedResultsOfDiscussionThreadBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_threads_for_entity = Endpoint(
            settings={
                'response_type': (PaginatedResultsOfDiscussionThreadBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/entity/{id}/threads',
                'operation_id': 'get_threads_for_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'ascending',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 20,
                        'inclusive_minimum': 10,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('sort',): {

                        "NUMBER_OF_REPLIES": "NUMBER_OF_REPLIES",
                        "NUMBER_OF_VIEWS": "NUMBER_OF_VIEWS",
                        "PINNED_AND_LAST_ACTIVITY": "PINNED_AND_LAST_ACTIVITY",
                        "THREAD_TITLE": "THREAD_TITLE"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'ascending':
                        (bool,),
                    'limit':
                        (float,),
                    'offset':
                        (float,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'ascending': 'ascending',
                    'limit': 'limit',
                    'offset': 'offset',
                    'sort': 'sort',
                },
                'location_map': {
                    'id': 'path',
                    'ascending': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_threads_for_entity
        )

        def __pin_thread(
            self,
            thread_id,
            **kwargs
        ):
            """Pin a Thread.  # noqa: E501

            This API is used to mark a thread as pinned.  Target users: only forum's moderator can mark a thread as pinned.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.pin_thread(thread_id, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            return self.call_with_http_info(**kwargs)

        self.pin_thread = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}/pin',
                'operation_id': 'pin_thread',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                ],
                'required': [
                    'thread_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                },
                'location_map': {
                    'thread_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__pin_thread
        )

        def __restore_deleted_thread(
            self,
            thread_id,
            **kwargs
        ):
            """Restore a deleted thread.  # noqa: E501

            This API is used to restore a deleted thread.  Target users: only forum's moderator can restore a deleted thread.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.restore_deleted_thread(thread_id, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            return self.call_with_http_info(**kwargs)

        self.restore_deleted_thread = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}/restore',
                'operation_id': 'restore_deleted_thread',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                ],
                'required': [
                    'thread_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                },
                'location_map': {
                    'thread_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__restore_deleted_thread
        )

        def __unpin_thread(
            self,
            thread_id,
            **kwargs
        ):
            """Unpin a thread.  # noqa: E501

            This API is used to unpin a thread.  Target users: only forum's moderator can unpin a thread.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.unpin_thread(thread_id, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            return self.call_with_http_info(**kwargs)

        self.unpin_thread = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}/unpin',
                'operation_id': 'unpin_thread',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                ],
                'required': [
                    'thread_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                },
                'location_map': {
                    'thread_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__unpin_thread
        )

        def __update_reply_message(
            self,
            reply_id,
            **kwargs
        ):
            """Update the message of a reply.  # noqa: E501

            This API is used to update the message of a reply.  Target users: only the author of the reply can update its message.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_reply_message(reply_id, async_req=True)
            >>> result = thread.get()

            Args:
                reply_id (str): The ID of the Reply.

            Keyword Args:
                update_reply_message (UpdateReplyMessage): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DiscussionReplyBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['reply_id'] = \
                reply_id
            return self.call_with_http_info(**kwargs)

        self.update_reply_message = Endpoint(
            settings={
                'response_type': (DiscussionReplyBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/reply/{replyId}/message',
                'operation_id': 'update_reply_message',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'reply_id',
                    'update_reply_message',
                ],
                'required': [
                    'reply_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reply_id':
                        (str,),
                    'update_reply_message':
                        (UpdateReplyMessage,),
                },
                'attribute_map': {
                    'reply_id': 'replyId',
                },
                'location_map': {
                    'reply_id': 'path',
                    'update_reply_message': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_reply_message
        )

        def __update_thread_message(
            self,
            thread_id,
            **kwargs
        ):
            """Update the message of a thread.  # noqa: E501

            This API is used to update the message of a thread.  Target users: only the author of the thread can update its message.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_thread_message(thread_id, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.

            Keyword Args:
                update_thread_message (UpdateThreadMessage): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DiscussionThreadBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            return self.call_with_http_info(**kwargs)

        self.update_thread_message = Endpoint(
            settings={
                'response_type': (DiscussionThreadBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}/message',
                'operation_id': 'update_thread_message',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                    'update_thread_message',
                ],
                'required': [
                    'thread_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                    'update_thread_message':
                        (UpdateThreadMessage,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                },
                'location_map': {
                    'thread_id': 'path',
                    'update_thread_message': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_thread_message
        )

        def __update_thread_title(
            self,
            thread_id,
            **kwargs
        ):
            """Update the title of a Thread.  # noqa: E501

            This API is used to update the title of a thread.  Target users: only the author of the thread can update its title.'   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_thread_title(thread_id, async_req=True)
            >>> result = thread.get()

            Args:
                thread_id (str): The ID of a thread.

            Keyword Args:
                update_thread_title (UpdateThreadTitle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DiscussionThreadBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['thread_id'] = \
                thread_id
            return self.call_with_http_info(**kwargs)

        self.update_thread_title = Endpoint(
            settings={
                'response_type': (DiscussionThreadBundle,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/thread/{threadId}/title',
                'operation_id': 'update_thread_title',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'thread_id',
                    'update_thread_title',
                ],
                'required': [
                    'thread_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thread_id':
                        (str,),
                    'update_thread_title':
                        (UpdateThreadTitle,),
                },
                'attribute_map': {
                    'thread_id': 'threadId',
                },
                'location_map': {
                    'thread_id': 'path',
                    'update_thread_title': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_thread_title
        )
