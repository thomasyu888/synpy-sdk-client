"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from synclient.api_client import ApiClient, Endpoint
from synclient.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from synclient.model.access_requirement_status import AccessRequirementStatus
from synclient.model.request_interface import RequestInterface
from synclient.model.research_project import ResearchProject
from synclient.model.submission_info_page import SubmissionInfoPage
from synclient.model.submission_info_page_request import SubmissionInfoPageRequest
from synclient.model.submission_page import SubmissionPage
from synclient.model.submission_page_request import SubmissionPageRequest


class DataAccessServicesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_access_requirement_status(
            self,
            requirement_id,
            **kwargs
        ):
            """Retrieve an access requirement status for a given access requirement ID.  # noqa: E501

            Retrieve an access requirement status for a given access requirement ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_access_requirement_status(requirement_id, async_req=True)
            >>> result = thread.get()

            Args:
                requirement_id (str): the ID of the requirement.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AccessRequirementStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['requirement_id'] = \
                requirement_id
            return self.call_with_http_info(**kwargs)

        self.get_access_requirement_status = Endpoint(
            settings={
                'response_type': (AccessRequirementStatus,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/accessRequirement/{requirementId}/status',
                'operation_id': 'get_access_requirement_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'requirement_id',
                ],
                'required': [
                    'requirement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requirement_id':
                        (str,),
                },
                'attribute_map': {
                    'requirement_id': 'requirementId',
                },
                'location_map': {
                    'requirement_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_access_requirement_status
        )

        def __get_request_for_update(
            self,
            requirement_id,
            **kwargs
        ):
            """Retrieve the Request for update.  # noqa: E501

            Retrieve the Request for update.  If one does not exist, an Request with some re-filled information is returned. If a submission associated with the request is approved, and the requirement requires renewal, a refilled Renewal is returned. Only the owner of the request can perform this action.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_request_for_update(requirement_id, async_req=True)
            >>> result = thread.get()

            Args:
                requirement_id (str): the ID of the requirement.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RequestInterface
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['requirement_id'] = \
                requirement_id
            return self.call_with_http_info(**kwargs)

        self.get_request_for_update = Endpoint(
            settings={
                'response_type': (RequestInterface,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/accessRequirement/{requirementId}/dataAccessRequestForUpdate',
                'operation_id': 'get_request_for_update',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'requirement_id',
                ],
                'required': [
                    'requirement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requirement_id':
                        (str,),
                },
                'attribute_map': {
                    'requirement_id': 'requirementId',
                },
                'location_map': {
                    'requirement_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_request_for_update
        )

        def __get_user_own_research_project_for_update(
            self,
            requirement_id,
            **kwargs
        ):
            """Retrieve an existing ResearchProject that the user owns.  # noqa: E501

            Retrieve an existing ResearchProject that the user owns.  If none exists, a ResearchProject with some re-filled information is returned to the user. Only the owner of the researchProject can perform this action.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_user_own_research_project_for_update(requirement_id, async_req=True)
            >>> result = thread.get()

            Args:
                requirement_id (str): the ID of the requirement.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResearchProject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['requirement_id'] = \
                requirement_id
            return self.call_with_http_info(**kwargs)

        self.get_user_own_research_project_for_update = Endpoint(
            settings={
                'response_type': (ResearchProject,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/accessRequirement/{requirementId}/researchProjectForUpdate',
                'operation_id': 'get_user_own_research_project_for_update',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'requirement_id',
                ],
                'required': [
                    'requirement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requirement_id':
                        (str,),
                },
                'attribute_map': {
                    'requirement_id': 'requirementId',
                },
                'location_map': {
                    'requirement_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_user_own_research_project_for_update
        )

        def __list_ar_submissions(
            self,
            requirement_id,
            **kwargs
        ):
            """Retrieve a list of submissions for a given access requirement ID.  # noqa: E501

            Retrieve a list of submissions for a given access requirement ID.  Only ACT member can perform this action.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_ar_submissions(requirement_id, async_req=True)
            >>> result = thread.get()

            Args:
                requirement_id (str): the ID of the requirement.

            Keyword Args:
                submission_page_request (SubmissionPageRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SubmissionPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['requirement_id'] = \
                requirement_id
            return self.call_with_http_info(**kwargs)

        self.list_ar_submissions = Endpoint(
            settings={
                'response_type': (SubmissionPage,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/accessRequirement/{requirementId}/submissions',
                'operation_id': 'list_ar_submissions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'requirement_id',
                    'submission_page_request',
                ],
                'required': [
                    'requirement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requirement_id':
                        (str,),
                    'submission_page_request':
                        (SubmissionPageRequest,),
                },
                'attribute_map': {
                    'requirement_id': 'requirementId',
                },
                'location_map': {
                    'requirement_id': 'path',
                    'submission_page_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__list_ar_submissions
        )

        def __list_info_for_approved_submissions(
            self,
            requirement_id,
            **kwargs
        ):
            """Return approved data access submissions  # noqa: E501

            Return the research project info for approved data access submissions, ordered by submission modified-on date, ascending   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_info_for_approved_submissions(requirement_id, async_req=True)
            >>> result = thread.get()

            Args:
                requirement_id (str): the ID of the requirement.

            Keyword Args:
                submission_info_page_request (SubmissionInfoPageRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SubmissionInfoPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['requirement_id'] = \
                requirement_id
            return self.call_with_http_info(**kwargs)

        self.list_info_for_approved_submissions = Endpoint(
            settings={
                'response_type': (SubmissionInfoPage,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/accessRequirement/{requirementId}/approvedSubmissionInfo',
                'operation_id': 'list_info_for_approved_submissions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'requirement_id',
                    'submission_info_page_request',
                ],
                'required': [
                    'requirement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requirement_id':
                        (str,),
                    'submission_info_page_request':
                        (SubmissionInfoPageRequest,),
                },
                'attribute_map': {
                    'requirement_id': 'requirementId',
                },
                'location_map': {
                    'requirement_id': 'path',
                    'submission_info_page_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__list_info_for_approved_submissions
        )
