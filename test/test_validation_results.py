# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import synclient
from synclient.models.validation_results import ValidationResults  # noqa: E501
from synclient.rest import ApiException

class TestValidationResults(unittest.TestCase):
    """ValidationResults unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ValidationResults
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = synclient.models.validation_results.ValidationResults()  # noqa: E501
        if include_optional :
            return ValidationResults(
                all_validation_messages = [
                    '0'
                    ], 
                is_valid = True, 
                object_etag = '0', 
                object_id = '0', 
                object_type = 'entity', 
                schemaid = '0', 
                validated_on = '0', 
                validation_error_message = '0', 
                validation_exception = {"causingExceptions":[{"causingExceptions":[{},{}],"keyword":"...","message":"...","pointerToViolation":"...","schemaLocation":"..."},{"causingExceptions":[{},{}],"keyword":"...","message":"...","pointerToViolation":"...","schemaLocation":"..."}],"keyword":"...","message":"...","pointerToViolation":"...","schemaLocation":"..."}
            )
        else :
            return ValidationResults(
        )

    def testValidationResults(self):
        """Test ValidationResults"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
