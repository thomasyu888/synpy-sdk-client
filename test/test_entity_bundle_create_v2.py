# coding: utf-8

"""
    Platform Repository Service

    Platform Repository Service - Sage Bionetworks Platform   # noqa: E501

    The version of the OpenAPI document: develop-SNAPSHOT
    Contact: thomas.yu@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import synclient
from synclient.models.entity_bundle_create_v2 import EntityBundleCreateV2  # noqa: E501
from synclient.rest import ApiException

class TestEntityBundleCreateV2(unittest.TestCase):
    """EntityBundleCreateV2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test EntityBundleCreateV2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = synclient.models.entity_bundle_create_v2.EntityBundleCreateV2()  # noqa: E501
        if include_optional :
            return EntityBundleCreateV2(
                access_control_list = {"createdBy":"...","creationDate":"12345","etag":"...","id":"...","modifiedBy":"...","modifiedOn":"12345","resourceAccess":[{"accessType":["UPDATE_SUBMISSION","CHANGE_PERMISSIONS"],"principalId":12345},{"accessType":["UPDATE","SEND_MESSAGE"],"principalId":12345}]}, 
                annotations = {"annotations":{"property1":{"type":"STRING","value":["...","..."]},"property2":{"type":"STRING","value":["...","..."]}},"etag":"...","id":"..."}, 
                entity = {"concreteType":"...","createdBy":"...","createdOn":"...","description":"...","etag":"...","id":"...","modifiedBy":"...","modifiedOn":"...","name":"Trial ' + (_) . 09","parentId":"..."}
            )
        else :
            return EntityBundleCreateV2(
        )

    def testEntityBundleCreateV2(self):
        """Test EntityBundleCreateV2"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
